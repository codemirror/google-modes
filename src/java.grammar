include "./javadoc.grammar" as doccomment

start top {
  (whitespace Statement)+
}

skip whitespace {
  context Statement {
    for "(" Statement Expr? ";" Expr? ")" Statement |
    while CondExpr Statement |
    try Block CatchFinally |
    do Statement while CondExpr ";" |
    Conditional |
    switch CondExpr Block |
    breakCont identifier ? ";" |
    assert Expr (":" Expr)? ";" |
    return Expr? ";" |
    throw Expr ";" |
    (default | case Expr | labelIdentifier) ":" |
    import kw("static")? identifierDot* ("*" | identifier) ";" |
    kw("synchronized") CondExpr Block |
    ";" |
    BeforeStatement(Modifier*) Declaration(declName) |
    ExprComma ";"
  }

  context BeforeStatement(expr) { expr }

  context CatchFinally {
    (catch "(" Modifier* Type ("|" Type)* declName ")" Block)*
    (finally Block)?
  }

  Modifier { modifierKw | Annotation }

  context StatementModifiers { Modifier* }

  Annotation {
    annotationHead ("(" CommaSep(maybe(identifier "=")? (Annotation | ArrayInitializer | Expr)) ")")?
  }

  context EnumBody {
    "{" (EnumConstant ","?)+ (";" ClassItem*)? "}"
  }
  context EnumConstant {
    Annotation? propDeclName ArgList? ClassBody?
  }

  Declaration(name) {
    Block |
    enum typeDeclName (implements CommaSep(Type))? EnumBody |
    classInterface typeDeclName TypeParams? (extends Type)? (implements CommaSep(Type))? ClassBody |
    atInterface declName AnnotationTypeBody |
    package identifier ("." identifier)* ";" |
    ~(Annotation* TypeParams? (primType | var | (typeQualifier TypeArgs? ".")* className))
      (Type | var) DeclExpr(name) (FunctionDef | (op("=") Expr)? ("," DeclExpr(name) (op("=") Expr)?)* ";")
  }

  context ClassItem {
    BeforeStatement(Modifier*) TypeParams? (propDeclNameParen FunctionDef | Declaration(propDeclName))
  }

  context ClassBody {
    "{" ClassItem* "}"
  }

  context AnnotationTypeItem {
    BeforeStatement(Modifier*)
    (declNameParenBracketOrEquals (("[" "]")* op("=") Expr) | "(" ")" ("[" "]")* (default Expr)? |
     Declaration(declName))
  }

  context AnnotationTypeBody {
    "{" AnnotationTypeItem* "}"
  }

  context Block { "{" Statement* "}" }

  context FunctionDef { ParamList ThrowsClause? (";" | Block) }

  context ThrowsClause { throws CommaSep(Type) }

  context ParamList { "(" CommaSep((Annotation | Modifier)* Type "..."? (this | DeclExpr(declName))) ")" }
  context SimpleParamList { "(" CommaSep(declName) ")" }

  context TypeParams { "<" CommaSep(Annotation* typeDeclName (extends Type)*) ">" }
  context TypeArgs { "<" CommaSep(Type | "?" ((extends | super_) Type)?) ">" }

  Expr { prefixOp* BaseExpr ExprSuffix* }

  ExprComma { Expr ("," Expr)* }

  BaseExpr {
    atom | this | super_ |
    number |
    string |
    NewExpr |
    Lambda |
    calleeName |
    plainVariableName |
    ArrayInitializer |
    ~("(" TypeID) "(" Type ")" Expr |
    ParenExpr
  }

  context NewExpr {
    new TypeArgs? TypeNoArray ("[" Expr? "]" ArrayInitializer? | ArgList? ClassBody?)
  }

  ExprSuffix {
    ArgList |
    "[" Expr? "]" |
    "." (kw("class") | NewExpr | TypeArgs | calleeField | fieldName) |
    "::" (kw("new") | calleeField | fieldName) |
    suffixOp |
    instanceof Type |
    binOp Expr |
    op("?") Expr op(":") Expr
  }

  context Lambda {
    (maybe((declName | ParamList) op("->")) | maybe(SimpleParamList op("->"))) (Block | Expr)
  }

  context ParenExpr { "(" Expr? ")" }
  context CondExpr { "(" Expr? ")" }
  context ArgList { "(" CommaSep(ArgExpr) ")" }
  context ArgExpr { Expr }
  context ArrayInitializer { "{" CommaSep(ArgExpr) "}" }

  Type {
    Annotation* TypeID ("[" Expr? "]" | TypeArgs)*
  }

  TypeID {
     primType |
     (typeQualifier TypeArgs? ".")+ qualifiedClassName |
     className
  }

  TypeNoArray {
    Annotation* TypeID TypeArgs*
  }

  DeclExpr(name) { name ("[" "]")? }

  CommaSep(expr) { (expr ("," expr?)*)? }
}

Conditional {
  if whitespace CondExpr whitespace Statement Alternative
}
context Alternative {
  whitespace (else whitespace Statement)?
}

tokens {
  enum { kw("enum") }
  return { kw("return") }
  if { kw("if") }
  else { kw("else") }
  for { kw("for") }
  while { kw("while") }
  do { kw("do") }
  breakCont { kw("break" | "continue") }
  default { kw("default") }
  case { kw("case") }
  switch { kw("switch") }
  modifierKw { kw("public" | "protected" | "private" | "abstract" | "static" | "final" | "transient" |
                  "volatile" | "synchronized" | "native" | "strictfp" | "const") }
  extends { kw("extends") }
  implements { kw("implements") }
  this { kw("this") }
  new { kw("new") }
  super_ { kw("super") }
  assert { kw("assert") }
  throw { kw("throw") }
  throws { kw("throws") }
  try { kw("try") }
  catch { kw("catch") }
  finally { kw("finally") }
  package { kw("package") }
  import { kw("import") }
  classInterface { kw("class" | "interface") }
  atInterface { kw("@interface") }
  instanceof { kw("instanceof") }
  var { kw("var") }

  primType="type" { ("boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double" | "void") !identifierChar }
  className="type" { "A"-"Z" identifierChar* }

  atom="atom" { ("true" | "false" | "null") !identifierChar }

  variableName { calleeName | plainVariableName }

  number="number" {
    (("0x" | "0X") (digit | "_" | "a"-"f" | "A"-"F")+ |
     ("0b" | "0B") ("0" | "1" | "_")+ |
     (digit (digit | "_")* ("." (digit | "_")*)? | "." (digit | "_")+) (("e" | "E") ("+" | "-")? (digit | "_")+)?)
    ("L" | "l" | "D" | "d" | "F" | "f")?
  }

  string="string" {
    ("'" ("\\" . (!"'" .)* | .) "'" |
     "\"" ("\\" _ | (!"\"" .))* "\"")
  }

  prefixOp="operator" {
    "++" | "--" | "!" | "~" | "&" | "*" | "-" | "+"
  }

  suffixOp="operator" {
    "++" | "--"
  }

  binOp="operator" {
    ("!" | "+" | "-" | "/" | "*" | "%" | ">" ">"? | "<" "<"? | "=" | "|" "|"? | "&" "&"?) "="?
  }

  comment="comment" { doccomment.comment | "/*" (!"*/" _)* "*/" | "//" .* }
}

calleeName="variable callee" { identifier ~"(" }
plainVariableName="variable" { identifier }

identifier { identifierStart identifierChar* }
identifierDot { identifier " "* "." }

annotationHead="meta" {
  !atInterface "@" identifier ("." identifier)*
}

whitespace {
  (" " | "\t" | "\n" | comment)*
}

declName="def" { identifier }
propDeclName="def property" { identifier }
propDeclNameParen="def property" { identifier ~(" "* "(") }
declNameParenBracketOrEquals="def" { identifier ~(" "* ("(" | "[" | "=")) }

typeDeclName="type def" { identifier }

calleeField="property callee" { identifier ~(" "* "(") }
fieldName="property" { identifier }

typeQualifier="type qualifier" { identifier ~(" "* (TypeArgs " "*)? "." !".") }

typeName="type" { identifier }

qualifiedClassName="qualified" { className }

kw(value)="keyword" { value !identifierChar }
op(value)="operator" { value }

maybe(value) { ~value value }

letter { "a"-"z" | "A"-"Z" | "\u00a1"-"\uffff" | "_" }

digit { "0"-"9" }

identifierStart { letter }

identifierChar { letter | digit }

spaceChar { "\n" | "\t" | " " }

labelIdentifier { identifier ~(spaceChar* ":" !":") }
