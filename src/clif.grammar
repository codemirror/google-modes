skip whitespace {
  start top { whitespace ("\n" | Statement)* }

  context Statement {
    FromStatement |
    InterfaceStatement |
    FuncDef |
    ClassDef |
    EnumDef |
    InterfaceStatement |
    StaticMethodsStatement |
    NamespaceStatement |
    SimpleStatement "\n"
  }

  SimpleStatement {
    CapsuleDef |
    ImplementsDef |
    ImportStatement |
    IncludeStatement |
    UseStatement |
    TypeDefStatement |
    ConstDef |
    VarDef |
    Decorator |
    enumEntry |
    pass |
    qstring !(":" | import) |
    return name "(" op("...") ")" |
    name !":"
  }

  FromStatement {
    !(from (DottedName | qstring import)) from qstring ":" indentedBody
  }

  IncludeStatement {
    !(from (DottedName | qstring ":")) from qstring import "*" (as d(name))?
  }

  ImportStatement { !(from qstring) from DottedName import name }

  TypeDefStatement { type d(name) "=" Type }

  UseStatement { use rename DottedName }

  NamespaceStatement { namespace astring ":" indentedBody }

  InterfaceStatement {
    interface d(name) "<" name ("," name)* ">" ":" indentedBody
  }

  StaticMethodsStatement {
    staticmethods from astring ":" indentedBody
  }

  ConstDef { const d(cname) ":" Type }

  CapsuleDef { capsule cname }

  EnumDef { enum cname (with ":" indentedBody)? }
  enumEntry { rename DottedName }

  VarDef { ~(cname ":") cname ":" Type ("=" property "(" astring ("," astring)? ")")? }

  ClassDef { class cname Bases? ":" indentedBody }
  context Bases { "(" CommaSep(tname) ")" }

  ImplementsDef { implements name "<" CommaSep(DottedName) ">" }

  FuncDef { def cname Params (Returns (":" indentedBody)?)? }

  Type {
    rename? (lambda? Params Returns | DottedName ("<" CommaSep(Type) ">")?)
  }

  ParamDef { locald(name) (":" Type ("=" default)?)? }
  context Params { "(" CommaSep(receiver | ParamDef) ")" }
  Returns { "->" (None | Type | Params) }

  DottedName { name ("." name)* }

  Decorator="meta" { "@" DottedName }

  rename { astring as }
  cname { rename? d(name) }
  tname { rename? DottedName }
  CommaSep(expr) { (expr ("," expr?)*)? }
}

tokens {
  as { kw("as") }
  capsule { kw("capsule") }
  class { kw("class") }
  const { kw("const") }
  def { kw("def") }
  default { kw("default") }
  enum { kw("enum") }
  from { kw("from") }
  implements { kw("implements") }
  import { kw("import") }
  interface { kw("interface") }
  lambda { kw("lambda") }
  namespace { kw("namespace") }
  pass { kw("pass") }
  property { kw("property") }
  return { kw("return") }
  staticmethods { kw("staticmethods") }
  type { kw("type") }
  use { kw("use") }
  with { kw("with") }

  None { atom("None") }
  receiver { atom("self" | "cls") }

  comment="comment" { "#" .* }
}

qstring="string" {
  "'''" ("\\" _ | !"'''" _)* "'''" |
  "\"\"\"" ("\\" _ | !"\"\"\"" _)* "\"\"\"" |
  "'" ("\\" _ | !"'" .)* "'" |
  "\"" ("\\" _ | !"\"" .)* "\""
}
astring="string" { "`" (!"`" .)* "`" }

atom(word)="atom" { word !nameChar }
kw(word)="keyword" { word !nameChar }

d(word)="def" { word }
locald(word)="variable-2" { word }
op(expr)="operator" { expr }

indentedBody {
  "\n" (whitespaceSimple | "\n")* (&stillIndented Statement (whitespaceSimple | "\n")*)+
}

name { nameStart nameChar* }

whitespaceSimple { (" " | "\t" | comment) }

whitespace { (whitespaceSimple | ~"\n" &maySkipNewline "\n")* }

nameStart { letter | "_" }
nameChar { letter | digit | "_" }
letter { "a"-"z" | "A"-"Z" }
digit { "0"-"9" }
