include "./kdoc.grammar" as doccomment

start top {
  shebang? l (TopItem (whitespace | "\n")*)+
}

skip l {
  Declaration(defName) {
    Modifier* (
      (kw("value")? class | interface) typeDeclName ClassSpec |
      ObjectDeclaration(defName) |
      fun (interface typeDeclName ClassSpec | FunctionDeclaration(defName)) |
      PropertyDeclaration(defName) |
      Getter |
      Setter |
      typealias typeDeclName TypeAliasSpec
    )
  }

  context ClassSpec {
    TypeParams?
    Constructor?
    Delegation?
    TypeConstraints?
    ClassBody?
  }

  context Constructor { (Modifier* constructor)? ConstructorParamList }

  TypeConstraints {
    where commaSep1(Annotation* variableName ":" Type)
  }

  ObjectDeclaration(defName) {
    object defName Delegation? ClassBody?
  }

  context FunctionDeclaration(defName) {
    TypeParams? defName FunctionSpec
  }

  context FunctionSpec {
    ParamList (":" Type)? TypeConstraints? (Block | op("=") Expression)?
  }

  context Block { "{" Statement* "}" }

  PropertyDeclaration(defName) {
    valVar TypeParams? VariableDeclaration(defName)
    TypeConstraints? (op("=") Expression | kw("by") Expression)? ";"?
  }

  VariableDeclaration(defName) {
    "(" commaSep1(VariableDeclaration(defName)) ")" | Annotation* defName (":" Type)?
  }

  Getter {
    kw("get") ("(" ")")? (":" Type)? (Block | op("=") Expression) ";"?
  }

  Setter {
    kw("set") ParamList? (":" Type)? (Block | op("=") Expression) ";"?
  }

  context TypeAliasSpec {
    TypeParams? op("=") Type ";"?
  }

  context ClassBody {
    "{" ClassItem* "}"
  }

  context ClassItem {
    Modifier |
    Declaration(propertyDeclName) |
    companion object identifier? Delegation? ClassBody? |
    init Block |
    constructor ParamList (":" (this | super_) ArgList)? Block? |
    EnumItem
  }

  EnumItem {
    Modifier* propertyDeclName ArgList? ClassBody? ("," | ";")
  }

  Delegation { ":" commaSep1(Modifier* Type (kw("by") Expression | ArgList)?) }

  context ConstructorParamList {
    "(" commaSep(Modifier* (valVar propertyDeclName | declName) (":" Type)? (op("=") Expression)?) ")"
  }

  context ParamList {
    "(" commaSep(Modifier* declName (":" Type)? (op("=") Expression)?) ")"
  }

  context ArgList {
    "(" commaSep(Annotation* (~(identifier "=") identifier op("="))? "*"? Expression) ")"
  }

  ForStatement {
    for "(" Annotation* VariableDeclaration(declName) in Expression ")" (Block | Statement)
  }

  Annotation {
    AnnotationHead (UnescapedAnnotation | "[" UnescapedAnnotation+ "]")
  }

  UnescapedAnnotation { (annotationName TypeArgs?) ("." annotationName TypeArgs?)* ArgList? }

  WhenExpression {
    when "(" (Annotation* kw("val") VariableDeclaration(declName) op("="))? Expression ")" WhenBody
  }

  context TypeArgs {
    "<" commaSep1("*" | (Annotation | kw("in" | "out"))* Type) ">"
  }

  context TypeParams {
    "<" commaSep1(Modifier* typeDeclName (":" Type)?) ">"
  }

  context LambdaBlock {
    "{" (~LambdaParams LambdaParams)? Statement* "}"
  }

  LambdaParams {
    commaSep1(declName (":" Type)?) op("->")
  }

  context ParenthesizedExpression { "(" Expression ")" }

  context WhenBody { "{" WhenEntry "}" }

  WhenEntry {
    (else | commaSep1(~("!"? in) op("!")? in Expression | ~("!"? is) op("!")? is Type | Expression))
    op("->") (Block | Statement | ";")
  }

  context ParamTypeList {
    "(" commaSep((~(identifier ":") identifier ":")? Type) ")"
  }

  stringInterpol {
    str("${") Expression str("}") |
    str("$") variableName
  }
}

TopItem {
  package l packageName s ("." l packageName s)* ";"? |
  import l (packageDot s "." l)* ("*" | declName s (as l declName s)?) ";"? |
  Statement
}

context Statement {
  label |
  Annotation |
  Declaration(declName) |
  ForStatement |
  while l ParenthesizedExpression l (Block | Statement | ";") |
  do l (Block | Statement) l while l ParenthesizedExpression |
  Expression s ";"? |
  ";"
}

AnnotationHead="meta" {
  "@" s (~(identifier s ":") identifier s ":")?
}

Modifier { modifierKw | Annotation }

ExpressionInner {
  ParenthesizedExpression |
  atom |
  number |
  string |
  char |
  LambdaBlock |
  object l (Delegation l)? ClassBody |
  fun l FunctionSpec |
  this s ("@" s identifier)? |
  it |
  super_ s ("<" l Type l ">" s)? ("@" s identifier)? |
  if l ParenthesizedExpression l (Block | Statement | ";") Alternative |
  WhenExpression |
  try l Block CatchFinally |
  throw s Expression |
  return s ("@" s identifier s)? Expression? |
  breakCont s ("@" s identifier)? |
  calleeClassName |
  className |
  calleeName |
  variableName
}

context Alternative {
  (~(l else) l else l (Block | Statement | ";"))?
}

context CatchFinally {
  (~(l catch) l catch l "(" l (Annotation l)* declName l ":" l Type l ")" l Block)*
  (~(l finally) l finally l Block)?
}

Expression {
  ((prefixOp | label | Annotation) l)* ExpressionInner sContinue (ExpressionSuffix sContinue)*
}

ExpressionSuffix {
  suffixOp |
  (~TypeArgs TypeArgs) |
  (binOp | ("!" s)? (in | is) | as s ("?" s)?) l ExpressionInner |
  ArgList |
  Annotation* LambdaBlock |
  ("?." | "." | "::") l (class | propertyCallee | propertyName | ParenthesizedExpression) |
  "[" l commaSep1(Expression) l "]" |
  infixCallee l ExpressionInner
}

TypeInner {
  dynamic |
  typeName s (TypeArgs s)? ("." l typeName s (TypeArgs s)?)* |
  (~("(" l (AnnotationHead | identifier l (")" l "->" | ":"))) ParamTypeList l op("->") l Type) |
  "(" l Type l ")"
}

Type {
  ((Annotation | kw("suspend")) l)* TypeInner s ("?" s)*
}

commaSep(inner) { commaSep1(inner)? }

commaSep1(inner) { inner s ("," l (inner s)?)* }

tokens {
  class { kw("class") }
  interface { kw("interface") }
  object { kw("object") }
  constructor { kw("constructor") }
  fun { kw("fun") }
  typealias { kw("typealias") }
  init { kw("init") }
  companion { kw("companion") }
  where { kw("where") }
  return { kw("return") }
  if { kw("if") }
  else { kw("else") }
  when { kw("when") }
  for { kw("for") }
  while { kw("while") }
  do { kw("do") }
  breakCont { kw("break" | "continue") }
  in { kw("in") }
  is { kw("is") }
  as { kw("as") }
  dynamic { kw("dynamic") }
  modifierKw { kw("enum" | "sealed" | "annotation" | "data" | "inner" | "override" | "lateinit" |
                  "public" | "private" | "internal" | "protected" | "tailrec" | "operator" | "infix" |
                  "inline" | "external" | "extend" | "const" | "abstract" | "final" | "open" |
                  "vararg" | "noinline" | "crossinline" | "reified" | "expect" | "actual" | "suspend") }
  this { kw("this") }
  it="variable-2" { "it" !identifierChar }
  super_ { kw("super") }
  throw { kw("throw") }
  try { kw("try") }
  catch { kw("catch") }
  finally { kw("finally") }
  package { kw("package") }
  import { kw("import") }
  valVar { kw("val" | "var") }

  atom="atom" { ("true" | "false" | "null") !identifierChar }

  number="number" {
    (("0x" | "0X") (digit | "_" | "a"-"f" | "A"-"F")+ |
     ("0b" | "0B") ("0" | "1" | "_")+ |
     (digit (digit | "_")* ("." (digit | "_")*)? | "." (digit | "_")+) (("e" | "E") ("+" | "-")? (digit | "_")+)?)
    ("u" | "U")? "L"?
  }

  string {
    str("\"\"\"") (str("\\" _) | stringInterpol | str((!("\"\"\"" | "$" | "\\") _)+))* str("\"\"\"") |
    str("\"") (str("\\" _) | stringInterpol | str((!("\"" | "$" | "\\") .)+))* str("\"")
  }

  char="string-2" {
    "'" ("\\" . (!"'" .)* | .) "'"
  }

  binOp="operator" {
    ".." | "?:" | ("+" | "-" | "*" | "/" | "%" | "<" | ">") "="? | ("!" | "=") "=" "="? | "=" | "&&" | "||"
  }

  blockComment { "/*" (blockComment | !"*/" _)* "*/" }

  comment="comment" { doccomment.comment | blockComment | "//" .* }
}

identifier { identifierStart identifierChar* | "`" (!"`" .)+ "`" }

annotationHead="meta" { "@" identifier }

label="meta" { identifier "@" }

whitespace {
  (" " | "\t" | "\r")+ | comment
}

s { whitespace* }

sContinue {
  (whitespace | "\n" ~(l ("?." | "." | "::")))*
}

l { (whitespace | "\n")* }

declName="def" { identifier }

typeDeclName="type def" { identifier }

typeName="type" { identifier }

variableName="variable" { identifier }

calleeName="variable callee" { identifier ~(" "* ("(" | "{")) }

className="type" { "A"-"Z" identifierChar* }

calleeClassName="callee" { className ~(" "* ("(" | "{")) }

infixCallee="variable callee" { !else identifier }

propertyName="property" { identifier }

propertyDeclName="def property" { identifier }

propertyCallee="property callee" { identifier ~(" "* ("(" | "{")) }

packageName="variable package" { identifier }

annotationName="meta" { identifier }

packageDot="variable package" { identifier ~(" "* ".") }

kw(value)="keyword" { value !identifierChar }
op(value)="operator" { value }
str(expr)="string" { expr }

suffixOp { op("++" | "--" | "!!") }

prefixOp { op("++" | "--" | "+" | "-" | "!") }

maybe(value) { ~value value }

letter { "a"-"z" | "A"-"Z" | "\u00a1"-"\uffff" | "_" }

digit { "0"-"9" }

identifierStart { letter }

identifierChar { letter | digit }

spaceChar { "\n" | "\t" | " " }

shebang="meta" { "#!" .* }
