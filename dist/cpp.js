(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.CodeMirror));
})(this, (function (CodeMirror) { 'use strict';

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    }
    n["default"] = e;
    return Object.freeze(n);
  }

  var CodeMirror__namespace = /*#__PURE__*/_interopNamespace(CodeMirror);

  var e = [/^static_assert(?![a-zA-Z¡-￿_0-9])/, /^namespace(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^asm(?![a-zA-Z¡-￿_0-9])/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^switch(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^goto(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:struct|union)(?![a-zA-Z¡-￿_0-9])/, /^default(?![a-zA-Z¡-￿_0-9])/, /^case(?![a-zA-Z¡-￿_0-9])/, /^operator(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?=\{)/, /^typename(?![a-zA-Z¡-￿_0-9])/, /^alignas(?![a-zA-Z¡-￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)(?:[Ll]+|[Uu][lL]*|F|f)?/, /^class(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^(?:final|explicit)(?![a-zA-Z¡-￿_0-9])/, /^using(?![a-zA-Z¡-￿_0-9])/, /^export(?![a-zA-Z¡-￿_0-9])/, /^template(?![a-zA-Z¡-￿_0-9])/, /^enum(?![a-zA-Z¡-￿_0-9])/, /^(?:_[A-Z0-9_]+(?![a-zA-Z¡-￿_0-9])|[A-Z][A-Z0-9_]+(?![a-zA-Z¡-￿_0-9]))/, /^auto(?![a-zA-Z¡-￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr|mutable|thread_local)(?![a-zA-Z¡-￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z¡-￿_0-9])/, /^(?:const|volatile|restrict)(?![a-zA-Z¡-￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z¡-￿_0-9])/, /^(?:int|float|double|char|short)(?![a-zA-Z¡-￿_0-9])/, /^[\*\&]/, /^\~?[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^noexcept(?![a-zA-Z¡-￿_0-9])/, /^(?:override|final|new)(?![a-zA-Z¡-￿_0-9])/, /^delete(?![a-zA-Z¡-￿_0-9])/, /^else(?![a-zA-Z¡-￿_0-9])/, /^(?:\+\+|\-\-)/, /^(?:\-\>|(?!\.\.)\.)/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^new(?![a-zA-Z¡-￿_0-9])/, [1, "\n", "\t", " "], /^[a-zA-Z0-9¡-￿_\.]+/, /^\@[a-zA-Z0-9¡-￿_]+/, [0, /^(?!\*\/|\{?\@[a-zA-Z0-9¡-￿_])/, /^[^]/], /^(?:\.\.\.)?/, /^virtual(?![a-zA-Z¡-￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z¡-￿_0-9])/, /^this(?![a-zA-Z¡-￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z¡-￿_0-9])/, /^(?:nullptr(?![a-zA-Z¡-￿_0-9])|(?:true|false|null)(?![a-zA-Z¡-￿_0-9]))/, /^(?:sizeof|alignof)(?![a-zA-Z¡-￿_0-9])/, /^[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*(?= *\()/, /^(?!\>)/, /^(?:\*|\&\&|\&|\.\.\.)/];
  var nodes = [
    [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
     0, 2],
    [/^[^]/, 0],
    [1, 9, 3],
    [2, 12, 4, {"name":"Statement"}],
    [0, 2,
     0, 1],
    [3, "keyword", e[27], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[41], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[56], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[31], -1,
     3, "type", e[33], -1,
     3, "type", e[34], -1,
     3, "keyword", e[32], -1,
     3, "atom", e[55], -1,
     3, "meta", e[28], -1,
     1, 123, -1,
     3, "number", e[20], -1,
     2, 131, -1, {"name":"string","token":"string"},
     2, 136, -1, {"name":"prefixOp","token":"operator"},
     3, "operator", e[42], -1,
     3, "operator", e[44], -1,
     2, 137, -1, {"name":"comment","token":"comment"},
     3, "keyword", e[1], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[45], -1,
     3, "keyword", e[40], -1,
     3, "keyword", e[53], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[38], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[25], -1,
     3, "keyword", e[26], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[51], -1,
     3, "keyword", e[52], -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[24], -1,
     3, "keyword", e[19], -1,
     3, "keyword", e[0], -1,
     3, "keyword", e[54], -1,
     3, "keyword", e[39], -1,
     3, "keyword", e[23], -1,
     /^[^]/, -1],
    ["#", 7],
    [2, 137, 7, {"name":"comment","token":"comment"},
     "\\", 8,
     /^./, 7,
     0, -1],
    [/^[^]/, 7],
    [/^[ \t]/, 9,
     "\n", 10,
     2, 137, 9, {"name":"comment","token":"comment"},
     0, -1],
    [/^[ \t]*/, 11],
    [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
     0, 9],
    [1, 142, -1,
     1, 159, 13,
     3, "keyword", e[0], 17,
     3, "keyword", e[1], 21,
     3, "keyword", e[2], 29,
     3, "keyword", e[3], 33,
     3, "keyword", e[4], 37,
     1, 174, -1,
     2, 189, -1, {"name":"Template"},
     [7, "constructorAhead"], 43,
     1, 198, -1,
     3, "keyword", e[5], 46,
     3, "keyword", e[6], 47,
     3, "keyword", e[7], 48,
     3, "keyword", e[8], 72,
     3, "keyword", e[9], 77,
     2, 211, -1, {"name":"Block"},
     3, "keyword", e[10], 81,
     3, "keyword", e[11], 83,
     3, "keyword", e[12], 87,
     3, "keyword", e[13], 91,
     3, "keyword", e[14], 99,
     3, "keyword", e[15], 100,
     [0, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/, [5, 215]], 99,
     1, 216, 103,
     2, 219, 107, {"name":"DeclType"},
     ";", -1,
     1, 245, 121],
    [1, 9, 14],
    [1, 251, 15,
     0, 15],
    [1, 9, 16],
    [";", -1],
    [1, 9, 18],
    [2, 256, 19, {"name":"ArgList"}],
    [1, 9, 20],
    [";", -1],
    [1, 9, 22],
    [1, 251, 23,
     0, 23],
    [1, 9, 24],
    [3, "operator", "=", 25,
     2, 261, -1, {"name":"NamespaceBlock"}],
    [1, 9, 26],
    [1, 123, 27],
    [1, 9, 28],
    [";", -1],
    [1, 9, 30],
    [1, 265, 31],
    [1, 9, 32],
    [";", -1],
    [1, 9, 34],
    [2, 211, 35, {"name":"Block"}],
    [1, 9, 36],
    [2, 270, -1, {"name":"Catch"}],
    [1, 9, 38],
    ["{", 39],
    [1, 9, 40],
    [2, 131, 41, {"name":"string","token":"string"}],
    [1, 9, 42],
    ["}", -1],
    [1, 251, 44],
    [1, 9, 45],
    [2, 282, -1, {"name":"FunctionDef"}],
    [1, 9, 49],
    [1, 9, 50],
    [1, 9, 51],
    ["(", 52],
    [2, 315, 53, {"name":"CondExpr"}],
    [2, 12, 54, {"name":"Statement"}],
    [1, 9, 55],
    [1, 9, 56],
    [1, 9, 57],
    [2, 12, 58, {"name":"Statement"}],
    [2, 12, -1, {"name":"Statement"}],
    [3, "keyword", e[6], 59],
    [1, 9, 60],
    [1, 9, 61],
    [1, 245, 62,
     0, 62],
    [2, 315, 63, {"name":"CondExpr"}],
    [1, 9, 64],
    [1, 9, 65],
    [";", 66],
    [";", -1],
    [1, 9, 67],
    [1, 245, 68,
     0, 68],
    [1, 9, 69],
    [")", 70],
    [1, 9, 71],
    [2, 12, -1, {"name":"Statement"}],
    [1, 9, 73],
    [2, 315, 74, {"name":"CondExpr"}],
    [1, 9, 75],
    [2, 12, 76, {"name":"Statement"}],
    [2, 336, -1, {"name":"Alternative"}],
    [1, 9, 78],
    [2, 315, 79, {"name":"CondExpr"}],
    [1, 9, 80],
    [2, 211, -1, {"name":"Block"}],
    [1, 9, 82],
    [";", -1],
    [1, 9, 84],
    [e[22], 85],
    [1, 9, 86],
    [";", -1],
    [1, 9, 88],
    [1, 245, 89,
     0, 89],
    [1, 9, 90],
    [";", -1],
    [1, 9, 92],
    [1, 251, 93,
     0, 93],
    [1, 9, 94],
    [2, 340, 95, {"name":"BlockOf"},
     0, 95],
    [1, 9, 96],
    [1, 251, 97,
     0, 97],
    [1, 9, 98],
    [";", -1],
    [1, 9, 101],
    [1, 9, 102],
    [":", -1],
    [1, 265, 99],
    [1, 9, 104],
    [2, 211, -1, {"name":"Block"},
     0, 105],
    [1, 350, 106,
     0, -1],
    [1, 9, 105],
    [1, 9, 108],
    [1, 373, 109],
    [1, 9, 110],
    [1, 216, 111,
     0, 111],
    [1, 9, 112],
    [[5, 392], 113,
     1, 396, 114,
     0, 114],
    [2, 282, -1, {"name":"FunctionDef"}],
    [1, 9, 115],
    [",", 116,
     ";", -1],
    [1, 9, 117],
    [1, 251, 118],
    [1, 9, 119],
    [1, 396, 120,
     0, 120],
    [1, 9, 115],
    [1, 9, 122],
    [";", -1],
    [0, 124,
     3, "type", e[17], -1,
     2, 399, 130, {"name":"unqualifiedVariableName","token":"variable"}],
    [1, 400, 125],
    [0, 124,
     3, "keyword", e[16], 126,
     3, "type qualified", e[17], 127,
     2, 407, 127, {"name":"qualifiedVariableName","token":"qualified"}],
    [1, 408, 127],
    [2, 410, 128, {"name":"TemplateArgs"},
     0, -1],
    [/^(?=\:\:)/, 129,
     0, -1],
    [1, 123, -1],
    [2, 410, -1, {"name":"TemplateArgs"},
     0, -1],
    [/^R\"(?:(?!\().)*\(/, 132,
     /^(?:(?:L|u8?|U)(?=[\'\"]))?/, 133],
    [[0, [7, "rawStringContinues"], /^[^]/], 132,
     "\"", -1],
    [/^\'(?:\\.)?(?:(?!\').)*\'/, -1,
     "\"", 134],
    ["\\", 135,
     [0, /^(?!\")/, /^[^]/], 134,
     "\"", -1],
    [/^[^]/, 134],
    [3, "keyword", e[18], -1,
     /^(?:\+\+?|\-\-?|\!|\~|\&|\*)/, -1],
    [/^\/\*\*(?!\/)/, 138,
     "/*", 141,
     /^\/\/.*/, -1],
    [e[49], 139,
     0, 140],
    [0, 138,
     0, 138],
    [2, 415, 140, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [[0, /^(?!\*\/)/, /^[^]/], 141,
     "*/", -1],
    [3, "keyword", e[19], 144,
     [0, [5, 426], "["], 145],
    [0, 142,
     0, -1],
    [1, 9, 146],
    [1, 9, 147],
    ["(", 148],
    ["[", 149],
    [1, 9, 150],
    [1, 9, 151],
    [3, "number", e[20], 152],
    [1, 430, 153],
    [1, 9, 154],
    [1, 9, 155],
    [")", 156],
    ["]", 157],
    [1, 9, 143],
    [1, 9, 158],
    ["]", 156],
    [3, "keyword", e[21], 160,
     3, "keyword", e[13], 160],
    [1, 9, 161],
    [1, 142, 162,
     0, 162],
    [1, 9, 163],
    [0, 164,
     3, "type def", e[22], 167],
    [1, 452, 165],
    [1, 9, 166],
    [0, 164,
     3, "type qualified", e[22], 167],
    [1, 9, 168],
    [3, "keyword", e[23], 169,
     ":", 170,
     0, 172],
    [1, 9, 168],
    [1, 9, 171],
    [1, 459, 172],
    [1, 9, 173],
    [2, 473, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[24], 175],
    [1, 9, 176],
    [3, "keyword", e[18], 177,
     3, "keyword", e[1], 178,
     0, 178],
    [1, 9, 179],
    [1, 9, 180],
    [1, 477, 181],
    [1, 123, 181],
    [1, 9, 182],
    [3, "operator", "=", 183,
     0, 187],
    [1, 9, 184],
    [1, 477, 185],
    [1, 9, 186],
    [1, 373, 187,
     0, 187],
    [1, 9, 188],
    [";", -1],
    [3, "keyword", e[25], 190,
     0, 190],
    [1, 9, 191],
    [3, "keyword", e[26], 192],
    [1, 9, 193],
    [2, 490, 194, {"name":"TemplateParams"},
     0, 194],
    [1, 9, 195],
    [1, 9, 196],
    [1, 9, 197],
    [2, 12, -1, {"name":"Statement"}],
    [3, "keyword", e[27], 199],
    [1, 9, 200],
    [3, "keyword", e[21], 201,
     3, "keyword", /^struct(?![a-zA-Z¡-￿_0-9])/, 201,
     0, 201],
    [1, 9, 202],
    [1, 142, 203,
     0, 203],
    [1, 9, 204],
    [3, "type def", e[22], 205,
     0, 205],
    [1, 9, 206],
    [":", 207,
     0, 209],
    [1, 9, 208],
    [1, 477, 209],
    [1, 9, 210],
    [2, 495, -1, {"name":"BlockOf"},
     0, -1],
    ["{", 212],
    [1, 9, 213],
    [2, 12, 214, {"name":"Statement"},
     "}", -1],
    [1, 9, 213],
    [e[46], 215,
     /^\:(?!\:)/, -1],
    [3, "meta", e[28], 217],
    [1, 9, 218],
    [2, 515, -1, {"name":"ParenTokens"},
     0, -1],
    [0, 220,
     0, 232,
     3, "keyword", e[29], 238,
     [5, 519], 239],
    [3, "keyword", e[30], 221,
     3, "keyword", e[31], 221,
     3, "keyword", e[32], 221],
    [1, 9, 222],
    [0, 220,
     3, "keyword", e[29], 223,
     0, 224,
     1, 532, 225],
    [1, 9, 226],
    [3, "type", e[33], 227],
    [1, 9, 228],
    [e[35], 229,
     3, "keyword", e[32], 229,
     0, -1],
    [0, 224,
     1, 9, 230,
     0, 225],
    [1, 537, 231,
     0, -1],
    [1, 9, 226],
    [3, "type", e[34], 225],
    [1, 9, 228],
    [3, "type", e[33], 233],
    [1, 9, 234],
    [0, 232,
     3, "type", e[34], 235,
     0, 235],
    [1, 9, 236],
    [1, 537, 237,
     0, -1],
    [1, 9, 236],
    [1, 9, 240],
    [1, 532, 241],
    [e[35], 242,
     3, "keyword", e[32], 242,
     0, -1],
    [1, 9, 243],
    [1, 9, 240],
    [1, 537, 244,
     0, -1],
    [1, 9, 243],
    [1, 265, 246],
    [1, 9, 247],
    [",", 248,
     0, -1],
    [1, 9, 249],
    [1, 265, 250],
    [1, 9, 247],
    [3, "keyword", e[16], 252,
     0, 253,
     3, "def", e[36], -1],
    [1, 408, -1],
    [1, 546, 254],
    [0, 253,
     3, "keyword", e[16], 255,
     3, "qualified def", e[36], -1],
    [1, 408, -1],
    ["(", 257],
    [1, 9, 258],
    [1, 553, 259],
    [1, 9, 260],
    [")", -1],
    ["{", 262],
    [1, 9, 263],
    [2, 12, 264, {"name":"Statement"},
     "}", -1],
    [1, 9, 263],
    [1, 563, 266,
     1, 580, 267],
    [1, 9, 265],
    [1, 9, 268],
    [1, 350, 269,
     0, -1],
    [1, 9, 268],
    [3, "keyword", e[37], 271,
     0, -1],
    [1, 9, 272],
    ["(", 273],
    [1, 9, 274],
    [1, 477, 275],
    [1, 9, 276],
    [1, 373, 277,
     0, 277],
    [1, 9, 278],
    [")", 279],
    [1, 9, 280],
    [2, 211, 281, {"name":"Block"}],
    [1, 9, 270],
    [2, 607, 283, {"name":"ParamList"}],
    [1, 9, 284],
    [3, "keyword", e[32], 285,
     /^(?:\&\&|\&)?/, 286],
    [1, 9, 284],
    [1, 9, 287],
    [3, "keyword", e[38], 288,
     3, "keyword", e[2], 289,
     0, 300],
    [1, 9, 290],
    [1, 9, 291],
    ["(", 292,
     0, 300],
    ["(", 293],
    [1, 9, 294],
    [1, 9, 295],
    [1, 265, 296],
    [1, 612, 297],
    [1, 9, 298],
    [1, 9, 299],
    [")", 300],
    [")", 300],
    [1, 9, 301],
    [1, 142, 302,
     0, 302],
    [1, 9, 303],
    ["->", 304,
     0, 306],
    [1, 9, 305],
    [1, 477, 306],
    [1, 9, 307],
    [3, "keyword", e[39], 308,
     2, 618, 309, {"name":"InitializerList"},
     0, 309],
    [1, 9, 307],
    [1, 9, 310],
    [";", -1,
     2, 211, -1, {"name":"Block"},
     3, "operator", "=", 311],
    [1, 9, 312],
    [3, "keyword", e[14], 313,
     3, "keyword", e[40], 313],
    [1, 9, 314],
    [";", -1],
    ["(", 316],
    [1, 9, 317],
    [[6, 621], 318,
     1, 245, 334,
     0, 334],
    [2, 219, 319, {"name":"DeclType"}],
    [1, 9, 320],
    [1, 373, 321],
    [1, 9, 322],
    [1, 216, 323,
     0, 323],
    [1, 9, 324],
    [1, 396, 325,
     0, 325],
    [1, 9, 326],
    [",", 327,
     ";", 328,
     0, 334],
    [1, 9, 329],
    [1, 9, 330],
    [1, 251, 331],
    [1, 265, 334,
     0, 334],
    [1, 9, 332],
    [1, 396, 333,
     0, 333],
    [1, 9, 326],
    [1, 9, 335],
    [")", -1],
    [1, 9, 337],
    [3, "keyword", e[41], 338,
     0, -1],
    [1, 9, 339],
    [2, 12, -1, {"name":"Statement"}],
    ["{", 341],
    [1, 9, 342],
    [1, 624, 343,
     0, 348],
    [1, 9, 344],
    [";", 345,
     0, 348],
    [1, 9, 346],
    [1, 624, 347,
     0, 347],
    [1, 9, 344],
    [1, 9, 349],
    ["}", -1],
    [2, 635, -1, {"name":"BlockOf"},
     2, 256, 351, {"name":"ArgList"},
     e[43], 353,
     2, 256, -1, {"name":"ArgList"},
     "[", 359,
     3, "operator", e[42], -1,
     e[43], 363,
     3, "operator", e[44], 365,
     "?", 367],
    [1, 9, 352],
    [2, 211, -1, {"name":"Block"},
     0, -1],
    [1, 9, 354],
    [/^\*?/, 355],
    [1, 9, 356],
    [2, 657, 357, {"name":"fieldName","token":"property"}],
    [1, 9, 358],
    [2, 410, -1, {"name":"TemplateArgs"},
     0, -1],
    [1, 9, 360],
    [1, 265, 361],
    [1, 9, 362],
    ["]", -1],
    [1, 9, 364],
    [2, 657, -1, {"name":"fieldName","token":"property"}],
    [1, 9, 366],
    [1, 265, -1,
     0, -1],
    [1, 9, 368],
    [1, 265, 369],
    [1, 9, 370],
    [":", 371],
    [1, 9, 372],
    [1, 265, -1],
    [0, 374,
     "(", 388],
    [e[59], 375,
     "[", 376,
     1, 251, 377],
    [1, 9, 374],
    [1, 9, 378],
    [1, 9, 379],
    [1, 251, 380],
    ["[", 381,
     0, -1],
    [1, 9, 382],
    [1, 9, 383],
    [",", 384,
     "]", -1],
    ["]", 385],
    [1, 9, 386],
    [1, 9, 379],
    [1, 251, 387],
    [1, 9, 382],
    [1, 9, 389],
    [1, 373, 390],
    [1, 9, 391],
    [")", -1],
    ["(", 393],
    [1, 9, 394],
    [")", -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[31], -1,
     3, "keyword", e[32], -1,
     3, "type", e[33], -1,
     3, "keyword", e[29], -1,
     [5, 519], 395],
    [1, 532, -1],
    [3, "operator", "=", 397,
     2, 658, -1, {"name":"BlockOf"},
     2, 256, -1, {"name":"ArgList"}],
    [1, 9, 398],
    [1, 265, -1],
    [3, "callee", e[57], -1,
     e[22], -1],
    ["::", 405,
     [5, 668], 401],
    [3, "variable qualifier", e[22], 402],
    [2, 410, 403, {"name":"TemplateArgs"},
     0, 403],
    [1, 9, 404],
    ["::", 405],
    [1, 9, 406],
    [/^\*?/, -1],
    [2, 399, -1, {"name":"unqualifiedVariableName","token":"variable"}],
    [3, "operator", "->*", -1,
     ",", -1,
     3, "operator", "==", -1,
     3, "operator", "=", -1,
     3, "operator", e[44], -1,
     2, 136, -1, {"name":"prefixOp","token":"operator"},
     /^(?:\(\)|\[\])/, -1,
     3, "keyword", e[45], 409,
     3, "keyword", e[40], 409],
    [/^(?:\[\])?/, -1],
    ["<", 411],
    [1, 9, 412],
    [1, 672, 413],
    [1, 9, 414],
    [">", -1],
    [3, "tag", /^\@f[\$\[\]]/, 424,
     3, "tag", /^\@param(?:\[(?:in|out|in\,out)\])?(?![a-zA-Z0-9¡-￿_])/, 416,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z0-9¡-￿_])/, 417,
     3, "tag", e[48], 424,
     "{", 418],
    [e[46], 416,
     3, "def", e[47], 424,
     "<", 419,
     0, 424],
    [e[46], 417,
     3, "type", e[47], 424,
     0, 424],
    [3, "tag", e[48], 420],
    [3, "type def", /^[a-zA-Z0-9¡-￿_]+/, 421],
    [/^[\t ]*/, 422],
    [">", 424],
    [1, 712, 423],
    ["}", 424],
    [e[49], 425,
     0, -1],
    [0, 424,
     0, 424],
    ["[", 427],
    [1, 9, 428],
    [" ", 429,
     "[", -1],
    [1, 9, 428],
    [1, 716, 431,
     3, "meta", e[22], 432,
     0, -1],
    [1, 9, 430],
    [1, 9, 433],
    ["(", 434,
     0, 435],
    [1, 9, 436],
    [1, 9, 437],
    [1, 723, 438,
     ")", 435],
    [e[50], 439],
    [1, 9, 436],
    [1, 9, 440],
    [",", 441,
     0, -1],
    [1, 9, 442],
    [1, 716, 443,
     3, "meta", e[22], 444],
    [1, 9, 442],
    [1, 9, 445],
    ["(", 446,
     0, 447],
    [1, 9, 448],
    [1, 9, 449],
    [1, 723, 450,
     ")", 447],
    [e[50], 451],
    [1, 9, 448],
    [1, 9, 440],
    ["::", 457,
     [5, 733], 453],
    [3, "type qualifier", e[22], 454],
    [2, 410, 455, {"name":"TemplateArgs"},
     0, 455],
    [1, 9, 456],
    ["::", 457],
    [1, 9, 458],
    [/^\*?/, -1],
    [3, "keyword", e[51], 460,
     0, 460,
     0, -1],
    [1, 9, 461],
    [3, "keyword", e[52], 462,
     0, 462],
    [1, 9, 463],
    [1, 477, 464],
    [1, 9, 465],
    [",", 466,
     0, -1],
    [1, 9, 467],
    [3, "keyword", e[51], 468,
     0, 468],
    [1, 9, 469],
    [3, "keyword", e[52], 470,
     0, 470],
    [1, 9, 471],
    [1, 477, 472],
    [1, 9, 465],
    ["{", 474],
    [1, 9, 475],
    [2, 737, 476, {"name":"ClassItem"},
     "}", -1],
    [1, 9, 475],
    [3, "keyword", e[18], 478,
     1, 159, -1,
     0, 480],
    [1, 9, 479],
    [1, 477, -1],
    [3, "keyword", e[30], 481,
     3, "keyword", e[31], 481,
     3, "keyword", e[32], 481,
     3, "keyword", e[13], 482,
     0, 482],
    [1, 9, 480],
    [1, 9, 483],
    [3, "keyword", e[29], 484,
     0, 485,
     1, 532, 484],
    [1, 9, 486],
    [3, "type", e[33], 487],
    [1, 537, 488,
     0, -1],
    [0, 485,
     1, 9, 489,
     0, 484],
    [1, 9, 486],
    [3, "type", e[34], 484],
    ["<", 491],
    [1, 9, 492],
    [1, 754, 493],
    [1, 9, 494],
    [">", -1],
    ["{", 496],
    [1, 9, 497],
    [3, "keyword", e[16], 498,
     3, "def property", e[22], 499,
     0, 513],
    [1, 408, 499],
    [1, 9, 500],
    [3, "operator", "=", 501,
     0, 502],
    [1, 9, 503],
    [1, 9, 504],
    [1, 265, 502],
    [",", 505,
     0, 513],
    [1, 9, 506],
    [3, "keyword", e[16], 507,
     3, "def property", e[22], 508,
     0, 509],
    [1, 408, 508],
    [1, 9, 510],
    [1, 9, 504],
    [3, "operator", "=", 511,
     0, 509],
    [1, 9, 512],
    [1, 265, 509],
    [1, 9, 514],
    ["}", -1],
    ["(", 516],
    [1, 9, 517],
    [1, 780, 518,
     ")", -1],
    [1, 9, 517],
    [/^(?!(?:new|delete)(?![a-zA-Z¡-￿_0-9]))/, 520],
    [1, 532, 521],
    [1, 9, 522],
    [1, 537, 523,
     /^(?:[a-z]|[A-Z]|[¡-￿]|_|\.\.\.)/, -1,
     "(", 524],
    [1, 9, 522],
    [1, 9, 525],
    ["*", 526],
    [1, 9, 527],
    [e[22], 528],
    [1, 9, 529],
    [")", 530],
    [1, 9, 531],
    ["(", -1],
    [3, "keyword", e[18], 533,
     0, 534],
    [1, 9, 534],
    [0, 535,
     3, "type", e[22], -1],
    [1, 452, 536],
    [0, 535,
     3, "type qualified", e[22], -1],
    [2, 410, -1, {"name":"TemplateArgs"},
     "::", 538,
     1, 142, -1,
     "[", 542,
     e[35], -1,
     3, "keyword", e[32], -1],
    [1, 9, 539],
    [3, "keyword", e[16], 540,
     3, "type qualified", e[22], -1],
    [1, 9, 541],
    [1, 408, -1],
    [1, 9, 543],
    [1, 265, 544,
     0, 544],
    [1, 9, 545],
    ["]", -1],
    ["::", 551,
     [5, 785], 547],
    [3, "qualifier def", e[22], 548],
    [2, 410, 549, {"name":"TemplateArgs"},
     0, 549],
    [1, 9, 550],
    ["::", 551],
    [1, 9, 552],
    [/^\*?/, -1],
    [1, 265, 554,
     0, -1],
    [1, 9, 555],
    [e[50], 556],
    [1, 9, 557],
    [",", 558,
     0, -1],
    [1, 9, 559],
    [1, 265, 560],
    [1, 9, 561],
    [e[50], 562],
    [1, 9, 557],
    [3, "keyword", e[40], 564,
     3, "keyword", e[45], 568,
     2, 136, -1, {"name":"prefixOp","token":"operator"}],
    [1, 9, 565],
    ["[", 566,
     0, -1],
    [1, 9, 567],
    ["]", -1],
    [1, 9, 569],
    ["[", 570,
     0, 571],
    [1, 9, 572],
    [1, 9, 573],
    ["]", 571],
    ["(", 574,
     0, 575],
    [1, 9, 576],
    [1, 9, 577],
    [1, 265, 578],
    [1, 142, -1,
     0, -1],
    [1, 9, 579],
    [")", 575],
    [3, "keyword", e[53], -1,
     2, 789, -1, {"name":"Lambda"},
     3, "keyword", e[54], 581,
     2, 635, -1, {"name":"BlockOf"},
     2, 797, 593, {"name":"ParenExpr"},
     3, "atom", e[55], -1,
     3, "number", e[20], -1,
     2, 131, 596, {"name":"string","token":"string"},
     2, 658, -1, {"name":"BlockOf"},
     3, "keyword", e[56], 599,
     1, 216, -1,
     1, 123, -1],
    [1, 9, 582],
    ["<", 583],
    [1, 9, 584],
    [1, 477, 585],
    [1, 9, 586],
    [">", 587],
    [1, 9, 588],
    ["(", 589],
    [1, 9, 590],
    [1, 265, 591],
    [1, 9, 592],
    [")", -1],
    [1, 9, 594],
    [/^(?![\[\(\-\+])/, 595,
     0, -1],
    [1, 265, -1],
    [1, 9, 597],
    [2, 131, 598, {"name":"string","token":"string"},
     0, -1],
    [1, 9, 597],
    [1, 9, 600],
    ["(", 601,
     e[50], 602],
    [1, 9, 603],
    [1, 9, 604],
    [1, 477, 605],
    [1, 265, -1],
    [1, 9, 606],
    [")", -1],
    ["(", 608],
    [1, 9, 609],
    [1, 802, 610],
    [1, 9, 611],
    [")", -1],
    [1, 477, 613,
     0, -1],
    [1, 9, 614],
    [",", 615,
     0, -1],
    [1, 9, 616],
    [1, 477, 617],
    [1, 9, 614],
    [":", 619],
    [1, 9, 620],
    [1, 828, -1],
    [e[22], 622],
    [1, 9, 623],
    ["&&", -1],
    [1, 477, 625],
    [1, 9, 626],
    [2, 657, 627, {"name":"fieldName","token":"property"},
     0, 627],
    [1, 9, 628],
    [":", 629,
     "[", 630,
     0, -1],
    [1, 9, 631],
    [1, 9, 632],
    [3, "number", e[20], -1],
    [1, 265, 633,
     0, 633],
    [1, 9, 634],
    ["]", -1],
    ["{", 636],
    [1, 9, 637],
    [".", 638,
     0, 639,
     0, 655],
    [1, 9, 640],
    [1, 9, 641],
    [2, 657, 642, {"name":"fieldName","token":"property"}],
    [1, 265, 643],
    [1, 9, 644],
    [1, 9, 645],
    [3, "operator", "=", 639],
    [",", 646,
     0, 655],
    [1, 9, 647],
    [".", 648,
     0, 649,
     0, 650],
    [1, 9, 651],
    [1, 9, 652],
    [1, 9, 645],
    [2, 657, 653, {"name":"fieldName","token":"property"}],
    [1, 265, 650],
    [1, 9, 654],
    [3, "operator", "=", 649],
    [1, 9, 656],
    ["}", -1],
    [3, "callee", e[57], -1,
     e[22], -1],
    ["{", 659],
    [1, 9, 660],
    [1, 265, 661,
     0, 666],
    [1, 9, 662],
    [",", 663,
     0, 666],
    [1, 9, 664],
    [1, 265, 665,
     0, 665],
    [1, 9, 662],
    [1, 9, 667],
    ["}", -1],
    [3, "variable qualifier", e[22], 669],
    [1, 834, 670,
     0, 670],
    [1, 9, 671],
    ["::", -1],
    [3, "keyword", e[26], 673,
     0, 674,
     0, 675,
     0, -1],
    [1, 9, 676],
    [1, 9, 677],
    [3, "keyword", e[30], 678,
     3, "keyword", e[31], 678,
     [5, 839], 679,
     1, 477, 680],
    [2, 410, 674, {"name":"TemplateArgs"}],
    [3, "keyword", e[21], 681,
     3, "keyword", e[18], 681],
    [1, 9, 675],
    [1, 840, 682],
    [1, 9, 683],
    [1, 9, 684],
    [1, 9, 685],
    [2, 607, 682, {"name":"ParamList"},
     1, 396, 682,
     0, 686,
     0, 682],
    [1, 477, 687],
    [e[50], 687],
    [e[58], 688],
    [1, 9, 689],
    [1, 350, 690],
    [",", 691,
     0, -1],
    [1, 9, 692],
    [1, 9, 693],
    [0, 686,
     0, 682],
    [3, "keyword", e[26], 694,
     0, 695,
     0, 696],
    [1, 9, 697],
    [1, 9, 698],
    [3, "keyword", e[30], 699,
     3, "keyword", e[31], 699,
     [5, 846], 700,
     1, 477, 701],
    [2, 410, 695, {"name":"TemplateArgs"}],
    [3, "keyword", e[21], 702,
     3, "keyword", e[18], 702],
    [1, 9, 696],
    [1, 840, 703],
    [1, 9, 704],
    [1, 9, 705],
    [1, 9, 706],
    [2, 607, 703, {"name":"ParamList"},
     1, 396, 703,
     0, 707,
     0, 703],
    [1, 477, 708],
    [e[50], 708],
    [e[58], 709],
    [1, 9, 689],
    [1, 350, 710],
    [1, 9, 711],
    [0, 707,
     0, 703],
    [3, "attribute", "{", 713,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 712,
     "\n", 714,
     0, -1],
    [1, 712, 715],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 712],
    [/^(?=\*\/)/, 712,
     3, "attribute", "}", 712],
    ["::", 721,
     [5, 847], 717],
    [3, "meta", e[22], 718],
    [2, 410, 719, {"name":"TemplateArgs"},
     0, 719],
    [1, 9, 720],
    ["::", 721],
    [1, 9, 722],
    [/^\*?/, -1],
    [3, "number", e[20], -1,
     2, 131, -1, {"name":"string","token":"string"},
     e[22], -1,
     3, "operator", e[44], -1,
     ",", -1,
     "(", 724,
     "[", 727,
     "{", 730],
    [1, 9, 725],
    [1, 723, 726,
     ")", -1],
    [1, 9, 725],
    [1, 9, 728],
    [1, 723, 729,
     "]", -1],
    [1, 9, 728],
    [1, 9, 731],
    [1, 723, 732,
     "}", -1],
    [1, 9, 731],
    [3, "type qualifier", e[22], 734],
    [1, 834, 735,
     0, 735],
    [1, 9, 736],
    ["::", -1],
    [3, "keyword", e[52], 738,
     2, 189, -1, {"name":"Template"},
     1, 174, -1,
     3, "keyword", e[0], 740,
     1, 216, 744,
     0, 746],
    [1, 9, 739],
    [":", -1],
    [1, 9, 741],
    [2, 256, 742, {"name":"ArgList"}],
    [1, 9, 743],
    [";", -1],
    [1, 9, 745],
    [/^\;?/, -1],
    [3, "keyword", e[30], 747,
     3, "keyword", e[31], 747,
     1, 198, 748,
     1, 159, 749,
     2, 851, -1, {"name":"ObjectMember"}],
    [1, 9, 746],
    [1, 9, 750],
    [1, 9, 751],
    [/^\;?/, -1],
    [1, 251, 752,
     0, 752],
    [1, 9, 753],
    [/^\;?/, -1],
    [1, 872, 755,
     1, 477, 756,
     0, -1],
    [1, 9, 757],
    [1, 9, 758],
    [",", 759,
     0, -1],
    ["...", 760,
     1, 373, 761],
    [1, 9, 762],
    [1, 9, 758],
    [1, 9, 763],
    [1, 872, 764,
     1, 477, 765],
    [2, 607, 766, {"name":"ParamList"},
     0, 766],
    [1, 9, 757],
    [1, 9, 767],
    [1, 9, 768],
    ["...", 769,
     1, 373, 770],
    [3, "keyword", e[30], 771,
     3, "keyword", e[31], 771,
     3, "keyword", e[32], 771,
     3, "operator", "=", 772,
     0, 755],
    [1, 9, 767],
    [1, 9, 773],
    [1, 9, 768],
    [1, 9, 774],
    [2, 607, 775, {"name":"ParamList"},
     0, 775],
    [1, 840, 755],
    [1, 9, 776],
    [3, "keyword", e[30], 777,
     3, "keyword", e[31], 777,
     3, "keyword", e[32], 777,
     3, "operator", "=", 778,
     0, 764],
    [1, 9, 776],
    [1, 9, 779],
    [1, 840, 764],
    [2, 515, -1, {"name":"ParenTokens"},
     2, 893, -1, {"name":"BracketTokens"},
     2, 897, -1, {"name":"BraceTokens"},
     3, "keyword", /^(?:auto|double|int|struct|break|else|long|switch|case|enum|register|typedef|char|extern|return|union|const|float|short|unsigned|continue|for|signed|void|default|goto|sizeof|volatile|do|if|static|while|asm|alignof)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "keyword", /^(?:alignas|asm|bool|catch|class|compl|concept|constexpr|const_cast|decltype|delete|dynamic_cast|explicit|export|friend|import|module|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|reinterpret_cast|requires|static_assert|static_cast|synchronized|template|this|throw|try|typedef|typeid|using|virtual|wchar_t)(?![a-zA-Z¡-￿_0-9])/, -1,
     3, "atom", e[55], -1,
     3, "number", e[20], -1,
     2, 131, -1, {"name":"string","token":"string"},
     3, "operator", e[44], -1,
     2, 136, -1, {"name":"prefixOp","token":"operator"},
     0, 781,
     2, 399, -1, {"name":"unqualifiedVariableName","token":"variable"},
     /^(?![\)\]\}])./, -1],
    ["::", 782,
     /^(?=[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*\:\:)/, 783],
    [0, 781,
     2, 407, -1, {"name":"qualifiedVariableName","token":"qualified"}],
    [3, "variable qualifier", e[22], 784],
    ["::", 782],
    [3, "qualifier def", e[22], 786],
    [1, 834, 787,
     0, 787],
    [1, 9, 788],
    ["::", -1],
    ["[", 790],
    [1, 9, 791],
    [/^(?!\[)/, 792],
    [1, 901, 793],
    [1, 9, 794],
    ["]", 795],
    [1, 9, 796],
    [2, 282, -1, {"name":"FunctionDef"},
     2, 211, -1, {"name":"Block"}],
    ["(", 798],
    [1, 9, 799],
    [1, 245, 800,
     0, 800],
    [1, 9, 801],
    [")", -1],
    [1, 477, 803,
     "...", 804,
     0, -1],
    [1, 9, 805],
    [1, 9, 806],
    [1, 373, 807,
     0, 808],
    [",", 809,
     0, -1],
    [1, 9, 810],
    [1, 9, 811],
    [1, 9, 812],
    [2, 607, 813, {"name":"ParamList"},
     0, 813],
    [e[50], 804],
    [1, 477, 814,
     "...", 815],
    [1, 9, 816],
    [1, 9, 817],
    [1, 9, 806],
    [3, "operator", "=", 818,
     0, 808],
    [1, 373, 819,
     0, 820],
    [1, 9, 821],
    [1, 9, 822],
    [1, 9, 823],
    [1, 265, 808],
    [2, 607, 824, {"name":"ParamList"},
     0, 824],
    [e[50], 815],
    [1, 9, 825],
    [3, "operator", "=", 826,
     0, 820],
    [1, 9, 827],
    [1, 265, 820],
    [1, 911, 829,
     0, -1],
    [1, 9, 830],
    [",", 831,
     0, -1],
    [1, 9, 832],
    [1, 911, 833],
    [1, 9, 830],
    ["<", 835],
    [1, 9, 836],
    [e[58], 837,
     ">", -1],
    [1, 834, 838,
     2, 131, 838, {"name":"string","token":"string"},
     /^[^]/, 838],
    [1, 9, 836],
    [3, "number", e[20], -1,
     2, 131, -1, {"name":"string","token":"string"}],
    [1, 563, 841,
     1, 580, 842],
    [1, 9, 840],
    [1, 9, 843],
    [e[58], 844,
     0, -1],
    [1, 350, 845],
    [1, 9, 843],
    [3, "number", e[20], -1,
     2, 131, -1, {"name":"string","token":"string"}],
    [3, "meta", e[22], 848],
    [1, 834, 849,
     0, 849],
    [1, 9, 850],
    ["::", -1],
    [3, "keyword", e[30], 852,
     3, "keyword", e[31], 852,
     3, "keyword", e[32], 852,
     3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z¡-￿_]/, /^[a-zA-Z¡-￿_0-9]*/], 860,
     1, 477, 853],
    [1, 9, 851],
    [1, 9, 854],
    [1, 925, 855],
    [1, 9, 856],
    [",", 857,
     0, 860],
    [1, 9, 858],
    [1, 925, 859],
    [1, 9, 856],
    [1, 9, 861],
    [2, 282, -1, {"name":"FunctionDef"},
     1, 396, 862,
     ":", 863,
     "[", 864,
     0, 862,
     1, 216, 865],
    [1, 9, 866],
    [1, 9, 867],
    [1, 9, 868],
    [1, 9, 869],
    [";", -1],
    [3, "number", e[20], 862],
    [1, 265, 870,
     0, 870],
    [/^\;?/, -1],
    [1, 9, 871],
    ["]", 862],
    [3, "keyword", e[26], 873,
     3, "keyword", e[21], 885,
     3, "keyword", e[18], 885],
    [1, 9, 874],
    [2, 490, 875, {"name":"TemplateParams"}],
    [1, 9, 876],
    [3, "keyword", e[21], 877],
    [1, 9, 878],
    [e[50], 879],
    [1, 9, 880],
    [3, "type def", e[22], 881,
     0, 881],
    [1, 9, 882],
    [3, "operator", "=", 883,
     0, -1],
    [1, 9, 884],
    [1, 123, -1,
     3, "number", e[20], -1],
    [1, 9, 886],
    [e[50], 887],
    [1, 9, 888],
    [3, "type def", e[22], 889,
     0, 889],
    [1, 9, 890],
    [3, "operator", "=", 891,
     0, -1],
    [1, 9, 892],
    [1, 477, -1],
    ["[", 894],
    [1, 9, 895],
    [1, 780, 896,
     "]", -1],
    [1, 9, 895],
    ["{", 898],
    [1, 9, 899],
    [1, 780, 900,
     "}", -1],
    [1, 9, 899],
    [/^\&?/, 902,
     "=", 903,
     3, "keyword", e[53], 903,
     0, -1],
    [1, 9, 904],
    [1, 9, 905],
    [1, 123, 903,
     0, 903],
    [",", 906,
     0, -1],
    [1, 9, 907],
    [/^\&?/, 908,
     "=", 909,
     3, "keyword", e[53], 909],
    [1, 9, 910],
    [1, 9, 905],
    [1, 123, 909,
     0, 909],
    [1, 400, 912,
     2, 657, 913, {"name":"fieldName","token":"property"}],
    [1, 9, 911],
    [1, 9, 914],
    [2, 410, 915, {"name":"TemplateArgs"},
     0, 915],
    [1, 9, 916],
    ["(", 917,
     "{", 918],
    [1, 9, 919],
    [1, 9, 920],
    [1, 938, 921],
    [1, 938, 922],
    [1, 9, 923],
    [1, 9, 924],
    [")", -1],
    ["}", -1],
    [0, 926,
     "(", 934],
    [e[59], 927,
     3, "keyword", e[16], 928,
     3, "def property", e[22], 929],
    [1, 9, 926],
    [1, 408, 929],
    [1, 9, 930],
    ["[", 931,
     0, -1],
    [1, 9, 932],
    ["]", 933],
    [1, 9, 930],
    [1, 9, 935],
    [1, 925, 936],
    [1, 9, 937],
    [")", -1],
    [1, 265, 939,
     0, -1],
    [1, 9, 940],
    [",", 941,
     0, -1],
    [1, 9, 942],
    [1, 265, 943],
    [1, 9, 940]
  ];
  var start = 0;
  var token = 5;

  var cpp = /*#__PURE__*/Object.freeze({
    __proto__: null,
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }
  function isLocalType(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var typeRE = /(^|\s)type($|\s)/;

  function markTypeLocals(type, scopes, stream, state) {
    if (type == "type def") {
      var scope = getScope(state.context, scopes);
      if (scope) {
        if (!scope.localTypes) { scope.localTypes = []; }
        scope.localTypes.push(stream.current());
      }
    } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
               isLocalType(state.context, stream.current())) {
      type += " local";
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}",
    ObjectPattern: "}", EnumBody: "}", LambdaBlock: "}", WhenBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    ParenthesizedExpression: ")", ConstructorParamList: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror__namespace.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror__namespace.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror__namespace.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror__namespace.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && (!config.dontAlign || config.dontAlign.indexOf(cx.name) < 0) && aligned(cx))
      { return CodeMirror__namespace.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config);
    if (brack) {
      if (closed && (config.dontCloseBrackets || "").indexOf(brack) < 0) { return base }
      return base + config.indentUnit * ((config.doubleIndentBrackets || "").indexOf(brack) < 0 ? 1 : 2)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config);
      if (!textAfter || /^((else|catch|finally)\b|\/[\/\*])/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror__namespace.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror__namespace.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template" || top == "str")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror__namespace.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    var passLine = config.forceContent && /^\s*(\/\/.*)?$/.test(line) ? "x" : line;
    return findIndent(state.contextAt(passLine, line.length - textAfter.length), textAfter, config)
  }

  function constructorAhead(line, pos, _cx, nextLines) {
    var m1 = /^(\w+)\s*(::\s*(?:~?(\w+)|$)|$)/.exec(line.slice(pos));
    if (!m1) { return false }
    if (m1[3]) { return m1[3] == m1[1] }
    var m2 = (m1[2] ? /^\s*~?(\w+)/ : /^\s*::\s*~?(\w+)/).exec(nextLines && nextLines(1) || "");
    return m2 && m2[1] == m1[1]
  }

  function localConstructorAhead(line, pos, cx) {
    var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos)), skippedItem = false;
    if (!ahead) { return false }
    while (!(cx.name == "Statement" || skippedItem && cx.name == "ClassItem")) {
      if (cx.name == "ClassItem") { skippedItem = true; }
      cx = cx.parent;
    }
    var className = /\b(?:class|struct)\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
    return className ? className[1] == ahead[1] : false
  }

  var rawStringOpen = /R"(.*?)\(/g;

  function rawStringContinues(line, pos, cx) {
    rawStringOpen.lastIndex = cx.startPos;
    var open = rawStringOpen.exec(cx.startLine);
    if (!open) { return false }
    var closing = ")" + open[1] + '"';
    return pos < closing.length - 1 || line.slice(pos - closing.length + 1, pos + 1) != closing
  }

  var scopes = ["Block", "FunctionDef"], typeScopes = ["Template"];

  var CppMode = /*@__PURE__*/(function (superclass) {
    function CppMode(conf) {
      superclass.call(this, cpp, {
        predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead, rawStringContinues: rawStringContinues}
      });
      this.indentConf = {doubleIndentBrackets: ">)", dontCloseBrackets: ")", tabSize: conf.tabSize, indentUnit: conf.indentUnit};
    }

    if ( superclass ) CppMode.__proto__ = superclass;
    CppMode.prototype = Object.create( superclass && superclass.prototype );
    CppMode.prototype.constructor = CppMode;

    CppMode.prototype.token = function token (stream, state) {
      return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
    };

    CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
      if (textAfter.charAt(0) == "#") { return 0 }
      return indent(state, textAfter, line, this.indentConf)
    };

    return CppMode;
  }(CodeMirror__namespace.GrammarMode));

  CppMode.prototype.electricInput = /^\s*(?:case .*?:|(?:public|private|protected|default):|\{\}?|\})$/;
  CppMode.prototype.blockCommentStart = "/*";
  CppMode.prototype.blockCommentEnd = "*/";
  CppMode.prototype.blockCommentContinue = " * ";
  CppMode.prototype.lineComment = "//";
  CppMode.prototype.fold = "brace";

  CodeMirror__namespace.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

}));
