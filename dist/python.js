(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.CodeMirror));
})(this, (function (CodeMirror) { 'use strict';

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    }
    n["default"] = e;
    return Object.freeze(n);
  }

  var CodeMirror__namespace = /*#__PURE__*/_interopNamespace(CodeMirror);

  var e = [/^if(?![a-zA-Z¡-￿_0-9_])/, /^(?:while|elif)(?![a-zA-Z¡-￿_0-9_])/, /^else(?![a-zA-Z¡-￿_0-9_])/, /^(?:try|finally)(?![a-zA-Z¡-￿_0-9_])/, /^for(?![a-zA-Z¡-￿_0-9_])/, /^except(?![a-zA-Z¡-￿_0-9_])/, /^async(?![a-zA-Z¡-￿_0-9_])/, /^print(?![a-zA-Z¡-￿_0-9_])/, /^in(?![a-zA-Z¡-￿_0-9_])/, /^as(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*/, [0, /^(?![\{\}])/, /^[^]/], /^(?![\{\}])./, /^with(?![a-zA-Z¡-￿_0-9_])/, /^def(?![a-zA-Z¡-￿_0-9_])/, /^class(?![a-zA-Z¡-￿_0-9_])/, /^[\*\+\-\~]/, /^(?:not|await)(?![a-zA-Z¡-￿_0-9_])/, /^(?:pass|break|continue)(?![a-zA-Z¡-￿_0-9_])/, /^del(?![a-zA-Z¡-￿_0-9_])/, /^(?:return|assert)(?![a-zA-Z¡-￿_0-9_])/, /^raise(?![a-zA-Z¡-￿_0-9_])/, /^import(?![a-zA-Z¡-￿_0-9_])/, /^from(?![a-zA-Z¡-￿_0-9_])/, /^(?:global|nonlocal)(?![a-zA-Z¡-￿_0-9_])/, /^(?:(?:0b|OB)[01_]+|(?:0o|0O)[0-7_]+|(?:0x|OX)[0-9a-fA-F_]+|(?:[0-9][0-9_]*(?:l|L|\.[0-9_]+)?|\.[0-9_]+)(?:[eE][\+\-]?[0-9_]+)?[jJ]?)/, /^(?:None|True|False)(?![a-zA-Z¡-￿_0-9_])/, /^self(?![a-zA-Z¡-￿_0-9_])/, /^yield(?![a-zA-Z¡-￿_0-9_])/, /^lambda(?![a-zA-Z¡-￿_0-9_])/, /^(?:abs|all|any|bin|bool|bytearray|callable|chr|classmethod|compile|complex|delattr|dict|dir|divmod|enumerate|eval|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|isinstance|issubclass|iter|len|list|locals|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|vars|zip|__import__|NotImplemented|Ellipsis|__debug__|ascii|bytes|exec|print)(?![a-zA-Z¡-￿_0-9_])/, /^(?:(?:\^|\&|\||\<\<|\>\>|\+|\-|\*\*?|\@|\/|\%|\/)\=?|\=|\<|\>|\=\=|\>\=|\<\=|\<\>|\!\=|\:\=)/, /^(?:or|and|in|is(?: +not)?|not(?: +in)?)(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?=\()/, /^(?!\=[\!\:\}])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\=(?!\=))/, [0, /^[a-zA-Z¡-￿__]/, /^[a-zA-Z¡-￿_0-9_]*/, [7, "isCompLocal"]], /^(?:\*|\*\*)/];
  var nodes = [
    [1, 6, 2],
    [/^[^]/, 0],
    [1, 6, 3],
    ["\n", 4,
     2, 9, 4, {"name":"Statement"},
     0, 1],
    [1, 6, 3],
    [3, "keyword", e[0], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[19], -1,
     3, "keyword", e[28], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[23], -1,
     3, "keyword", e[22], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[24], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[17], -1,
     3, "atom", e[26], -1,
     3, "atom", e[27], -1,
     3, "keyword", e[32], -1,
     3, "builtin", e[30], -1,
     3, "builtin", e[7], -1,
     3, "operator", e[31], -1,
     3, "operator", e[16], -1,
     3, "number", e[25], -1,
     2, 48, -1, {"name":"string","token":"string"},
     1, 50, -1,
     3, "variable", e[10], -1,
     3, "comment", /^\#.*/, -1,
     /^[^]/, -1],
    [/^[ \t]/, 6,
     3, "comment", /^\#.*/, 6,
     "\\", 7,
     [0, /^(?=\n)/, [7, "maySkipNewline"]], 8,
     0, -1],
    ["\n", 6],
    ["\n", 6],
    [3, "keyword", e[0], 10,
     3, "keyword", e[1], 10,
     3, "keyword", e[2], 16,
     3, "keyword", e[3], 16,
     3, "keyword", e[4], 20,
     3, "keyword", e[5], 30,
     3, "keyword", e[6], 40,
     1, 62, -1,
     2, 75, 42, {"name":"Annotation","token":"meta"},
     3, "builtin", e[7], 46,
     1, 83, -1],
    [1, 6, 11],
    [1, 89, 12],
    [1, 6, 13],
    [":", 14],
    [1, 6, 15],
    [1, 96, -1],
    [1, 6, 17],
    [":", 18],
    [1, 6, 19],
    [1, 96, -1],
    [1, 6, 21],
    [1, 98, 22],
    [1, 6, 23],
    [3, "keyword", e[8], 24],
    [1, 6, 25],
    [1, 89, 26],
    [1, 6, 27],
    [":", 28],
    [1, 6, 29],
    [1, 96, -1],
    [1, 6, 31],
    [1, 89, 32,
     0, 33],
    [1, 6, 34],
    [1, 6, 35],
    [3, "keyword", e[9], 36,
     0, 33],
    [":", 37],
    [1, 6, 38],
    [1, 6, 39],
    [3, "def", e[10], 33],
    [1, 96, -1],
    [1, 6, 41],
    [1, 62, -1],
    [1, 6, 43],
    [2, 106, 44, {"name":"ArgList"},
     0, 44],
    [1, 6, 45],
    ["\n", -1],
    [1, 6, 47],
    [2, 106, -1, {"name":"ArgList"},
     1, 89, -1],
    [/^[uUrRbB]+(?=[\'\"])/, 49,
     1, 111, -1],
    [1, 111, -1],
    [3, "string", /^[uUrR]*[fF][uUrR]*(?=[\'\"])/, 51],
    [3, "string", "'''", 52,
     3, "string", "\"\"\"", 53,
     3, "string", "'", 54,
     3, "string", "\"", 55],
    [/^(?!\'\'\')/, 56,
     3, "string", "{{", 52,
     3, "string", "}}", 52,
     1, 120, 52,
     3, "string", "'''", -1],
    [/^(?!\"\"\")/, 57,
     3, "string", "{{", 53,
     3, "string", "}}", 53,
     1, 120, 53,
     3, "string", "\"\"\"", -1],
    [3, "string", "\\", 58,
     /^(?!\')/, 59,
     3, "string", "{{", 54,
     3, "string", "}}", 54,
     1, 120, 54,
     3, "string", "'", -1],
    [3, "string", "\\", 60,
     /^(?!\")/, 61,
     3, "string", "{{", 55,
     3, "string", "}}", 55,
     1, 120, 55,
     3, "string", "\"", -1],
    [3, "string", e[11], 52],
    [3, "string", e[11], 53],
    [3, "string", e[11], 54],
    [3, "string", e[12], 54],
    [3, "string", e[11], 55],
    [3, "string", e[12], 55],
    [3, "keyword", e[13], 63,
     3, "keyword", e[14], 69,
     3, "keyword", e[15], 73],
    [1, 6, 64],
    [1, 128, 65],
    [1, 6, 66],
    [":", 67],
    [1, 6, 68],
    [1, 96, -1],
    [1, 6, 70],
    [3, "def", e[10], 71],
    [1, 6, 72],
    [2, 142, -1, {"name":"FuncDef"}],
    [1, 6, 74],
    [2, 151, -1, {"name":"ClassDef"}],
    ["@", 76],
    [1, 6, 77],
    [e[10], 78],
    [1, 6, 79],
    [".", 80,
     0, -1],
    [1, 6, 81],
    [e[10], 82],
    [1, 6, 79],
    [1, 158, 84],
    [1, 6, 85],
    [";", 86,
     "\n", -1],
    [1, 6, 87],
    [1, 158, 88,
     0, 88],
    [1, 6, 85],
    [3, "operator", e[16], 90,
     3, "keyword", e[17], 90,
     1, 190, 91],
    [1, 6, 89],
    [1, 6, 92],
    [1, 200, 93,
     3, "keyword", e[8], 94,
     ",", 94,
     0, -1],
    [1, 6, 92],
    [1, 6, 95],
    [1, 212, 93],
    [1, 83, -1,
     [5, 219], 97,
     2, 220, -1, {"name":"indentedBody"}],
    [2, 226, -1, {"name":"indentedSimple"}],
    [[5, 228], 99,
     1, 231, 100],
    [1, 236, 100],
    [1, 6, 101],
    [",", 102,
     0, -1],
    [1, 6, 103],
    [[5, 228], 104,
     1, 231, 105,
     0, 105],
    [1, 236, 105],
    [1, 6, 101],
    ["(", 107],
    [1, 6, 108],
    [1, 237, 109,
     0, 109],
    [1, 6, 110],
    [")", -1],
    ["'''", 112,
     "\"\"\"", 114,
     "'", 116,
     "\"", 118],
    ["\\", 113,
     [0, /^(?!\'\'\')/, /^[^]/], 112,
     "'''", -1],
    [/^[^]/, 112],
    ["\\", 115,
     [0, /^(?!\"\"\")/, /^[^]/], 114,
     "\"\"\"", -1],
    [/^[^]/, 114],
    ["\\", 117,
     /^(?!\')./, 116,
     "'", -1],
    [/^[^]/, 116],
    ["\\", 119,
     /^(?!\")./, 118,
     "\"", -1],
    [/^[^]/, 118],
    [3, "operator", "{", 121],
    [1, 89, 122,
     0, 122],
    [3, "operator", "=", 123,
     0, 123],
    [3, "operator", "!", 124,
     0, 125],
    [3, "keyword", /^(?:(?![\:\} \t]).)*/, 125],
    [3, "operator", ":", 126,
     0, 127],
    [3, "string", e[12], 126,
     1, 120, 126,
     0, 127],
    [3, "operator", "}", -1],
    [1, 212, 129],
    [1, 6, 130],
    [3, "keyword", e[9], 131,
     0, 133],
    [1, 6, 132],
    [3, "def", e[10], 133,
     2, 249, 133, {"name":"ParenPattern"},
     2, 254, 133, {"name":"BracketPattern"}],
    [1, 6, 134],
    [",", 135,
     0, -1],
    [1, 6, 136],
    [1, 212, 137,
     0, 138],
    [1, 6, 139],
    [1, 6, 134],
    [3, "keyword", e[9], 140,
     0, 138],
    [1, 6, 141],
    [3, "def", e[10], 138,
     2, 249, 138, {"name":"ParenPattern"},
     2, 254, 138, {"name":"BracketPattern"}],
    [2, 259, 143, {"name":"ParamList"}],
    [1, 6, 144],
    ["->", 145,
     0, 147],
    [1, 6, 146],
    [1, 89, 147],
    [1, 6, 148],
    [":", 149],
    [1, 6, 150],
    [1, 96, -1],
    [3, "type def", e[10], 152],
    [1, 6, 153],
    [2, 106, 154, {"name":"ArgList"},
     0, 154],
    [1, 6, 155],
    [":", 156],
    [1, 6, 157],
    [1, 96, -1],
    [3, "keyword", e[18], -1,
     3, "keyword", e[19], 159,
     3, "keyword", e[20], 161,
     3, "keyword", e[21], 163,
     3, "keyword", e[22], 169,
     3, "keyword", e[23], 171,
     3, "keyword", e[24], 179,
     [5, 264], 181,
     1, 89, -1],
    [1, 6, 160],
    [1, 89, -1],
    [1, 6, 162],
    [1, 89, -1,
     0, -1],
    [1, 6, 164],
    [1, 89, 165,
     0, 165],
    [1, 6, 166],
    [3, "keyword", e[23], 167,
     0, -1],
    [1, 6, 168],
    [1, 89, -1],
    [1, 6, 170],
    [1, 267, -1],
    [1, 6, 172],
    [".", 173,
     [6, 281], 174,
     3, "keyword", e[22], 175],
    [1, 6, 172],
    [1, 89, 176],
    [1, 6, 177],
    [1, 6, 178],
    ["*", -1,
     2, 282, -1, {"name":"FromImportList"},
     1, 289, -1],
    [3, "keyword", e[22], 175],
    [1, 6, 180],
    [1, 303, -1],
    [1, 236, 182],
    [1, 6, 183],
    [":", 184,
     0, 185],
    [1, 6, 186],
    [1, 6, 187],
    [1, 89, 185],
    [3, "operator", "=", 188,
     0, -1],
    [1, 6, 189],
    [1, 89, -1],
    [2, 309, -1, {"name":"ParenExpr"},
     2, 314, -1, {"name":"ArrayLiteral"},
     2, 319, -1, {"name":"ObjectLiteral"},
     3, "number", e[25], -1,
     0, 191,
     3, "operator", "...", -1,
     3, "atom", e[26], -1,
     3, "atom", e[27], -1,
     3, "keyword", e[28], 194,
     3, "keyword", e[29], 198,
     3, "builtin", e[30], -1,
     3, "variable callee", e[33], -1,
     3, "variable", e[10], -1],
    [2, 48, 192, {"name":"string","token":"string"},
     1, 50, 192],
    [1, 6, 193],
    [0, 191,
     0, -1],
    [1, 6, 195],
    [3, "keyword", e[23], 196,
     1, 89, -1,
     0, -1],
    [1, 6, 197],
    [1, 89, -1],
    [1, 6, 199],
    [2, 326, -1, {"name":"LambdaDef"}],
    [e[34], 201,
     2, 106, -1, {"name":"ArgList"},
     2, 331, -1, {"name":"Subscript"},
     ".", 204,
     3, "keyword", e[0], 206],
    [3, "operator", e[31], 202,
     3, "keyword", e[32], 202],
    [1, 6, 203],
    [1, 89, -1],
    [1, 6, 205],
    [3, "property callee", e[33], -1,
     3, "property", e[10], -1],
    [1, 6, 207],
    [1, 89, 208],
    [1, 6, 209],
    [3, "keyword", e[2], 210,
     0, -1],
    [1, 6, 211],
    [1, 89, -1],
    [3, "operator", e[16], 213,
     3, "keyword", e[17], 213,
     1, 190, 214],
    [1, 6, 212],
    [1, 6, 215],
    [1, 336, 216,
     3, "keyword", e[8], 217,
     0, -1],
    [1, 6, 215],
    [1, 6, 218],
    [1, 89, 216],
    [2, 226, -1, {"name":"indentedSimple"}],
    ["\n", 221],
    [/^[ \t]/, 221,
     3, "comment", /^\#.*/, 221,
     "\n", 221,
     0, 222],
    [[0, [7, "stillIndented"], [6, 348]], 223,
     [0, [7, "stillIndented"], /^(?=return|pass)/], 225,
     0, -1],
    [2, 9, 224, {"name":"Statement"}],
    [/^[ \t]/, 224,
     3, "comment", /^\#.*/, 224,
     "\n", 224,
     0, 222],
    [2, 9, -1, {"name":"Statement"}],
    ["\n", 227],
    [1, 83, -1],
    [1, 236, 229],
    [1, 6, 230],
    [3, "keyword", e[8], -1],
    [3, "operator", e[16], 232,
     3, "keyword", e[17], 232,
     1, 190, 233],
    [1, 6, 231],
    [1, 6, 234],
    [1, 349, 235,
     0, -1],
    [1, 6, 234],
    [1, 361, -1],
    [3, "variable-2", e[36], 238,
     3, "operator", "**", 239,
     3, "meta", e[35], 240,
     0, 239],
    [1, 6, 241],
    [1, 6, 242],
    [1, 6, 243],
    [1, 336, 244,
     0, 245],
    [1, 212, 245],
    ["=", 239],
    [1, 6, 241],
    [1, 6, 246],
    [",", 247,
     1, 369, -1,
     0, -1],
    [1, 6, 248],
    [1, 381, -1,
     0, -1],
    ["(", 250],
    [1, 6, 251],
    [1, 236, 252],
    [1, 6, 253],
    [")", -1],
    ["[", 255],
    [1, 6, 256],
    [1, 236, 257],
    [1, 6, 258],
    ["]", -1],
    ["(", 260],
    [1, 6, 261],
    [1, 395, 262,
     0, 262],
    [1, 6, 263],
    [")", -1],
    [1, 236, 265],
    [1, 6, 266],
    [/^[\=\:]/, -1],
    [1, 212, 268],
    [1, 6, 269],
    [3, "keyword", e[9], 270,
     0, 272],
    [1, 6, 271],
    [3, "def", e[10], 272],
    [1, 6, 273],
    [",", 274,
     0, -1],
    [1, 6, 275],
    [1, 212, 276,
     0, 277],
    [1, 6, 278],
    [1, 6, 273],
    [3, "keyword", e[9], 279,
     0, 277],
    [1, 6, 280],
    [3, "def", e[10], 277],
    [3, "keyword", e[22], -1],
    ["(", 283],
    [1, 6, 284],
    [1, 289, 285,
     0, 285],
    [1, 6, 286],
    [/^\,?/, 287],
    [1, 6, 288],
    [")", -1],
    [e[10], 290],
    [1, 6, 291],
    [3, "keyword", e[9], 292,
     0, 294],
    [1, 6, 293],
    [3, "def", e[10], 294],
    [1, 6, 295],
    [",", 296,
     0, -1],
    [1, 6, 297],
    [e[10], 298,
     0, 299],
    [1, 6, 300],
    [1, 6, 295],
    [3, "keyword", e[9], 301,
     0, 299],
    [1, 6, 302],
    [3, "def", e[10], 299],
    [3, "variable", e[10], 304],
    [1, 6, 305],
    [",", 306,
     0, -1],
    [1, 6, 307],
    [3, "variable", e[10], 308,
     0, 308],
    [1, 6, 305],
    ["(", 310],
    [1, 6, 311],
    [1, 421, 312,
     0, 312],
    [1, 6, 313],
    [")", -1],
    ["[", 315],
    [1, 6, 316],
    [1, 421, 317,
     0, 317],
    [1, 6, 318],
    ["]", -1],
    ["{", 320],
    [1, 6, 321],
    [1, 429, 322,
     0, 324],
    [1, 6, 323],
    [1, 369, 324,
     0, 324],
    [1, 6, 325],
    ["}", -1],
    [1, 435, 327,
     0, 327],
    [1, 6, 328],
    [":", 329],
    [1, 6, 330],
    [1, 212, -1],
    ["[", 332],
    [1, 6, 333],
    [1, 453, 334],
    [1, 6, 335],
    ["]", -1],
    [e[34], 337,
     2, 106, -1, {"name":"ArgList"},
     2, 331, -1, {"name":"Subscript"},
     ".", 340,
     3, "keyword", e[0], 342],
    [3, "operator", e[31], 338,
     3, "keyword", e[32], 338],
    [1, 6, 339],
    [1, 212, -1],
    [1, 6, 341],
    [3, "property callee", e[33], -1,
     3, "property", e[10], -1],
    [1, 6, 343],
    [1, 212, 344],
    [1, 6, 345],
    [3, "keyword", e[2], 346,
     0, -1],
    [1, 6, 347],
    [1, 212, -1],
    [3, "keyword", /^(?:return|pass)(?![a-zA-Z¡-￿_0-9_])/, -1],
    [e[34], 350,
     2, 106, -1, {"name":"ArgList"},
     2, 331, -1, {"name":"Subscript"},
     ".", 353,
     3, "keyword", e[0], 355],
    [3, "operator", e[31], 351,
     3, "keyword", e[32], 351],
    [1, 6, 352],
    [1, 231, -1],
    [1, 6, 354],
    [3, "property callee", e[33], -1,
     3, "property", e[10], -1],
    [1, 6, 356],
    [1, 231, 357],
    [1, 6, 358],
    [3, "keyword", e[2], 359,
     0, -1],
    [1, 6, 360],
    [1, 231, -1],
    [[6, 487], 362,
     2, 249, 363, {"name":"ParenPattern"},
     2, 254, 363, {"name":"BracketPattern"}],
    [3, "def", e[10], 363],
    [1, 6, 364],
    [",", 365,
     0, -1],
    [1, 6, 366],
    [[6, 487], 367,
     2, 249, 368, {"name":"ParenPattern"},
     2, 254, 368, {"name":"BracketPattern"},
     0, 368],
    [3, "def", e[10], 368],
    [1, 6, 364],
    [3, "keyword", e[6], 370,
     0, 370],
    [1, 6, 371],
    [3, "keyword", e[4], 372],
    [1, 6, 373],
    [[5, 488], 374,
     1, 231, 375],
    [1, 236, 375],
    [1, 6, 376],
    [3, "keyword", e[8], 377],
    [1, 6, 378],
    [1, 89, 379],
    [1, 6, 380],
    [1, 369, -1,
     1, 492, -1,
     0, -1],
    [3, "operator", "**", 382,
     3, "meta", e[35], 383,
     0, 382],
    [1, 6, 384],
    [1, 6, 385],
    [1, 212, 386],
    ["=", 382],
    [1, 6, 387],
    [",", 388,
     0, -1],
    [1, 6, 389],
    [3, "operator", "**", 390,
     3, "meta", e[35], 391,
     0, 390,
     0, 392],
    [1, 6, 393],
    [1, 6, 394],
    [1, 6, 387],
    [1, 212, 392],
    ["=", 390],
    [2, 497, 396, {"name":"op","token":"operator"},
     0, 396],
    [1, 6, 397],
    [3, "atom", e[27], 398,
     3, "def", e[10], 398],
    [1, 6, 399],
    [":", 400,
     0, 401],
    [1, 6, 402],
    [1, 6, 403],
    [1, 212, 401],
    [3, "operator", "=", 404,
     0, 406],
    [1, 6, 405],
    [1, 212, 406],
    [1, 6, 407],
    [",", 408,
     0, -1],
    [1, 6, 409],
    [2, 497, 410, {"name":"op","token":"operator"},
     0, 410,
     0, 411],
    [1, 6, 412],
    [1, 6, 407],
    [3, "atom", e[27], 413,
     3, "def", e[10], 413],
    [1, 6, 414],
    [":", 415,
     0, 416],
    [1, 6, 417],
    [1, 6, 418],
    [1, 212, 416],
    [3, "operator", "=", 419,
     0, 411],
    [1, 6, 420],
    [1, 212, 411],
    [3, "variable-2", e[36], 422,
     1, 212, 425],
    [1, 6, 423],
    [1, 336, 424,
     0, 425],
    [1, 6, 423],
    [1, 6, 426],
    [",", 427,
     1, 369, -1,
     0, -1],
    [1, 6, 428],
    [1, 500, -1,
     0, -1],
    [2, 506, 430, {"name":"DictProp"}],
    [1, 6, 431],
    [",", 432,
     0, -1],
    [1, 6, 433],
    [2, 506, 434, {"name":"DictProp"},
     0, 434],
    [1, 6, 431],
    [3, "operator", e[37], 436,
     0, 436],
    [1, 6, 437],
    [3, "def", e[10], 438],
    [1, 6, 439],
    [3, "operator", "=", 440,
     0, 442],
    [1, 6, 441],
    [1, 212, 442],
    [1, 6, 443],
    [",", 444,
     0, -1],
    [1, 6, 445],
    [3, "operator", e[37], 446,
     0, 446,
     0, 447],
    [1, 6, 448],
    [1, 6, 443],
    [3, "def", e[10], 449],
    [1, 6, 450],
    [3, "operator", "=", 451,
     0, 447],
    [1, 6, 452],
    [1, 212, 447],
    [1, 212, 454,
     ":", 455],
    [1, 6, 456],
    [1, 6, 457],
    [":", 458,
     0, 468],
    [1, 212, 459,
     0, 459],
    [1, 6, 460],
    [1, 6, 461],
    [1, 212, 462,
     0, 462],
    [":", 463,
     0, 468],
    [1, 6, 464],
    [1, 6, 465],
    [":", 466,
     0, 468],
    [1, 212, 468,
     0, 468],
    [1, 6, 467],
    [1, 212, 468,
     0, 468],
    [1, 6, 469],
    [",", 470,
     0, -1],
    [1, 6, 471],
    [1, 212, 472,
     ":", 473,
     0, 474],
    [1, 6, 475],
    [1, 6, 476],
    [1, 6, 469],
    [":", 477,
     0, 474],
    [1, 212, 478,
     0, 478],
    [1, 6, 479],
    [1, 6, 480],
    [1, 212, 481,
     0, 481],
    [":", 482,
     0, 474],
    [1, 6, 483],
    [1, 6, 484],
    [":", 485,
     0, 474],
    [1, 212, 474,
     0, 474],
    [1, 6, 486],
    [1, 212, 474,
     0, 474],
    [3, "keyword", e[8], -1],
    [1, 236, 489],
    [1, 6, 490],
    ["\n", 491,
     3, "keyword", e[8], -1],
    [1, 6, 490],
    [3, "keyword", e[0], 493],
    [1, 6, 494],
    [1, 89, 495],
    [1, 6, 496],
    [1, 369, -1,
     1, 492, -1,
     0, -1],
    ["*", 498],
    [1, 6, 499],
    [/^\*?/, -1],
    [1, 212, 501],
    [1, 6, 502],
    [",", 503,
     0, -1],
    [1, 6, 504],
    [1, 212, 505,
     0, 505],
    [1, 6, 502],
    [3, "operator", "**", 507,
     1, 212, 509],
    [1, 6, 508],
    [1, 212, -1],
    [1, 6, 510],
    [":", 511,
     0, -1],
    [1, 6, 512],
    [1, 212, -1]
  ];
  var start = 0;
  var token = 5;

  var grammar = /*#__PURE__*/Object.freeze({
    __proto__: null,
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var scopes = ["LambdaDef", "FuncDef", "ClassDef"];
  var allowNewline = ["ArgList", "ParamList", "FromImportList", "ParenExpr", "ArrayLiteral", "ObjectLiteral", "Subscript", "DictProp", "ParenPattern", "BracketPattern"];

  function maySkipNewline(_line, _pos, cx) {
    return cx && allowNewline.indexOf(cx.name) > -1
  }

  function countIndent(line, pos) {
    var count = 0;
    for (var i = pos - 1; i >= 0; i--) {
      var ch = line.charCodeAt(i);
      if (ch === 32) { count++; }
      else if (ch === 9) { count += 4; }
      else { break }
    }
    return count
  }

  function stillIndented(line, pos, cx) {
    while (cx && cx.name != "Statement") { cx = cx.parent; }
    return cx && countIndent(line, pos) > countIndent(cx.startLine, cx.startPos)
  }

  function isCompLocal(line, pos) {
    var id = /\w*$/.exec(line.slice(0, pos))[0];
    var forDecl = /\s+for\s+(\w+)/.exec(line.slice(pos));
    return forDecl ? forDecl[1] == id : false
  }

  function aligned(cx) {
    return !/^\s*((#.*)?$)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    ObjectLiteral: "}",
    ArrayLiteral: "]", SubScript: "]", BracketPattern: "]",
    ParamList: ")", ArgList: ")", ParenExpr: ")", ParenPattern: ")"
  };

  function findIndent(cx, textAfter, curLine, config) {
    if (!cx) { return 0 }
    if (cx.name == "string") { return CodeMirror__namespace.Pass }

    var brack = bracketed[cx.name];
    if (brack) {
      if (curLine != cx.startLine && aligned(cx))
        { return CodeMirror__namespace.countColumn(cx.startLine, cx.startPos, config.tabSize) + 1 }

      var closed = textAfter && textAfter.charAt(0) == brack;
      var flat = closed && brack != ")" || curLine == cx.startLine;
      return findIndent(cx.parent, closed ? null : textAfter, cx.startLine, config) + (flat ? 0 : 2 * config.indentUnit)
    } else if (cx.name == "indentedSimple" || cx.name == "indentedBody") {
      for (;; cx = cx.parent) {
        if (!cx) { return config.indentUnit }
        if (cx.name == "Statement") { return CodeMirror__namespace.countColumn(cx.startLine, null, config.tabSize) + config.indentUnit }
      }
    } else {
      return findIndent(cx.parent, textAfter, curLine, config) +
        ((cx.name == "DictProp" || cx.name == "Statement") && cx.startLine != curLine ? 2 * config.indentUnit : 0)
    }
  }

  function pythonMarkLocals(token, stream, state) {
    var marked = markLocals(token, scopes, stream, state);
    if (token == "def") {
      var cx = state.context;
      while (cx && scopes.indexOf(cx.name) == -1) { cx = cx.parent; }
      if (cx && cx.name == "ClassDef") { marked = "def property"; }
      else if (marked == "def local") { marked = "variable-2"; }
    }
    return marked
  }

  var PythonMode = /*@__PURE__*/(function (superclass) {
    function PythonMode(conf) {
      superclass.call(this, grammar, {
        predicates: {maySkipNewline: maySkipNewline, stillIndented: stillIndented, isCompLocal: isCompLocal}
      });
      this.conf = conf;
    }

    if ( superclass ) PythonMode.__proto__ = superclass;
    PythonMode.prototype = Object.create( superclass && superclass.prototype );
    PythonMode.prototype.constructor = PythonMode;

    PythonMode.prototype.token = function token (stream, state) {
      return pythonMarkLocals(superclass.prototype.token.call(this, stream, state), stream, state)
    };

    PythonMode.prototype.indent = function indent (state, textAfter, line) {
      return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, null, this.conf)
    };

    return PythonMode;
  }(CodeMirror__namespace.GrammarMode));

  PythonMode.prototype.electricInput = /^\s*[\}\]\)]$/;
  // ` also gets autoclosed since it's often used in comments/docstrings.
  PythonMode.prototype.closeBrackets = {triples: "'\"", pairs: "()[]{}''\"\"``",};
  PythonMode.prototype.lineComment = "#";
  PythonMode.prototype.fold = "indent";

  CodeMirror__namespace.defineMode("google-python", function (conf) { return new PythonMode(conf); });

}));
