(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^if(?![a-zA-Z¡-￿_0-9_])/, /^(?:while|elif)(?![a-zA-Z¡-￿_0-9_])/, /^else(?![a-zA-Z¡-￿_0-9_])/, /^(?:try|finally)(?![a-zA-Z¡-￿_0-9_])/, /^for(?![a-zA-Z¡-￿_0-9_])/, /^except(?![a-zA-Z¡-￿_0-9_])/, /^async(?![a-zA-Z¡-￿_0-9_])/, /^print(?![a-zA-Z¡-￿_0-9_])/, /^in(?![a-zA-Z¡-￿_0-9_])/, /^as(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*/, [0, /^(?![\{\}])/, /^[^]/], /^(?![\{\}])./, /^with(?![a-zA-Z¡-￿_0-9_])/, /^def(?![a-zA-Z¡-￿_0-9_])/, /^class(?![a-zA-Z¡-￿_0-9_])/, /^(?:pass|break|continue)(?![a-zA-Z¡-￿_0-9_])/, /^del(?![a-zA-Z¡-￿_0-9_])/, /^(?:return|assert)(?![a-zA-Z¡-￿_0-9_])/, /^raise(?![a-zA-Z¡-￿_0-9_])/, /^import(?![a-zA-Z¡-￿_0-9_])/, /^from(?![a-zA-Z¡-￿_0-9_])/, /^(?:global|nonlocal)(?![a-zA-Z¡-￿_0-9_])/, /^[\*\+\-\~]/, /^(?:not|await)(?![a-zA-Z¡-￿_0-9_])/, /^(?:(?:0b|OB)[01_]+|(?:0o|0O)[0-7_]+|(?:0x|OX)[0-9a-fA-F_]+|(?:[0-9][0-9_]*(?:l|L|\.[0-9_]+)?|\.[0-9_]+)(?:[eE][\+\-]?[0-9_]+)?[jJ]?)/, /^(?:None|True|False)(?![a-zA-Z¡-￿_0-9_])/, /^self(?![a-zA-Z¡-￿_0-9_])/, /^yield(?![a-zA-Z¡-￿_0-9_])/, /^lambda(?![a-zA-Z¡-￿_0-9_])/, /^(?:abs|all|any|bin|bool|bytearray|callable|chr|classmethod|compile|complex|delattr|dict|dir|divmod|enumerate|eval|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|isinstance|issubclass|iter|len|list|locals|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|vars|zip|__import__|NotImplemented|Ellipsis|__debug__|ascii|bytes|exec|print)(?![a-zA-Z¡-￿_0-9_])/, /^(?:(?:\^|\&|\||\<\<|\>\>|\+|\-|\*\*?|\@|\/|\%|\/)\=?|\=|\<|\>|\=\=|\>\=|\<\=|\<\>|\!\=|\:\=)/, /^(?:or|and|in|is(?: +not)?|not(?: +in)?)(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?=\()/, [7, "stillIndented"], /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\=)/, [0, /^[a-zA-Z¡-￿__]/, /^[a-zA-Z¡-￿_0-9_]*/, [7, "isCompLocal"]], /^(?:\*|\*\*)/];
  var nodes = [
    [1, 6, 2],
    [/^[^]/, 0],
    [1, 6, 3],
    ["\n", 4,
     2, 9, 4, {"name":"Statement"},
     0, 1],
    [1, 6, 3],
    [3, "keyword", e[0], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[17], -1,
     3, "keyword", e[28], -1,
     3, "keyword", e[19], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[22], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[24], -1,
     3, "atom", e[26], -1,
     3, "atom", e[27], -1,
     3, "keyword", e[32], -1,
     3, "builtin", e[30], -1,
     3, "builtin", e[7], -1,
     3, "operator", e[31], -1,
     3, "operator", e[23], -1,
     3, "number", e[25], -1,
     2, 53, -1, {"name":"string","token":"string"},
     1, 55, -1,
     3, "variable", e[10], -1,
     3, "comment", /^\#.*/, -1,
     /^[^]/, -1],
    [/^[ \t]/, 6,
     3, "comment", /^\#.*/, 6,
     "\\", 7,
     [0, /^(?=\n)/, [7, "maySkipNewline"]], 8,
     0, -1],
    ["\n", 6],
    ["\n", 6],
    [3, "keyword", e[0], 10,
     3, "keyword", e[1], 10,
     3, "keyword", e[2], 16,
     3, "keyword", e[3], 16,
     3, "keyword", e[4], 20,
     3, "keyword", e[5], 30,
     3, "keyword", e[6], 40,
     1, 67, -1,
     2, 80, 42, {"name":"Annotation","token":"meta"},
     3, "builtin", e[7], 46,
     1, 88, 48],
    [1, 6, 11],
    [1, 119, 12],
    [1, 6, 13],
    [":", 14],
    [1, 6, 15],
    [1, 126, -1],
    [1, 6, 17],
    [":", 18],
    [1, 6, 19],
    [1, 126, -1],
    [1, 6, 21],
    [1, 132, 22],
    [1, 6, 23],
    [3, "keyword", e[8], 24],
    [1, 6, 25],
    [1, 119, 26],
    [1, 6, 27],
    [":", 28],
    [1, 6, 29],
    [1, 126, -1],
    [1, 6, 31],
    [1, 119, 32,
     0, 33],
    [1, 6, 34],
    [1, 6, 35],
    [3, "keyword", e[9], 36,
     0, 33],
    [":", 37],
    [1, 6, 38],
    [1, 6, 39],
    [3, "def", e[10], 33],
    [1, 126, -1],
    [1, 6, 41],
    [1, 67, -1],
    [1, 6, 43],
    [2, 140, 44, {"name":"ArgList"},
     0, 44],
    [1, 6, 45],
    ["\n", -1],
    [1, 6, 47],
    [2, 140, -1, {"name":"ArgList"},
     1, 119, -1],
    [1, 6, 49],
    [";", 50,
     "\n", -1],
    [1, 6, 51],
    [1, 88, 52,
     0, 52],
    [1, 6, 49],
    [/^[uUrRbB]+(?=[\'\"])/, 54,
     1, 145, -1],
    [1, 145, -1],
    [3, "string", /^[uUrR]*[fF][uUrR]*(?=[\'\"])/, 56],
    [3, "string", "'''", 57,
     3, "string", "\"\"\"", 58,
     3, "string", "'", 59,
     3, "string", "\"", 60],
    [/^(?!\'\'\')/, 61,
     3, "string", "{{", 57,
     3, "string", "}}", 57,
     1, 154, 57,
     3, "string", "'''", -1],
    [/^(?!\"\"\")/, 62,
     3, "string", "{{", 58,
     3, "string", "}}", 58,
     1, 154, 58,
     3, "string", "\"\"\"", -1],
    [3, "string", "\\", 63,
     /^(?!\')/, 64,
     3, "string", "{{", 59,
     3, "string", "}}", 59,
     1, 154, 59,
     3, "string", "'", -1],
    [3, "string", "\\", 65,
     /^(?!\")/, 66,
     3, "string", "{{", 60,
     3, "string", "}}", 60,
     1, 154, 60,
     3, "string", "\"", -1],
    [3, "string", e[11], 57],
    [3, "string", e[11], 58],
    [3, "string", e[11], 59],
    [3, "string", e[12], 59],
    [3, "string", e[11], 60],
    [3, "string", e[12], 60],
    [3, "keyword", e[13], 68,
     3, "keyword", e[14], 74,
     3, "keyword", e[15], 78],
    [1, 6, 69],
    [1, 162, 70],
    [1, 6, 71],
    [":", 72],
    [1, 6, 73],
    [1, 126, -1],
    [1, 6, 75],
    [3, "def", e[10], 76],
    [1, 6, 77],
    [2, 176, -1, {"name":"FuncDef"}],
    [1, 6, 79],
    [2, 185, -1, {"name":"ClassDef"}],
    ["@", 81],
    [1, 6, 82],
    [e[10], 83],
    [1, 6, 84],
    [".", 85,
     0, -1],
    [1, 6, 86],
    [e[10], 87],
    [1, 6, 84],
    [3, "keyword", e[16], -1,
     3, "keyword", e[17], 89,
     3, "keyword", e[18], 91,
     3, "keyword", e[19], 93,
     3, "keyword", e[20], 99,
     3, "keyword", e[21], 101,
     3, "keyword", e[22], 112,
     [5, 192], 114,
     1, 119, -1],
    [1, 6, 90],
    [1, 119, -1],
    [1, 6, 92],
    [1, 119, -1,
     0, -1],
    [1, 6, 94],
    [1, 119, 95,
     0, 95],
    [1, 6, 96],
    [3, "keyword", e[21], 97,
     0, -1],
    [1, 6, 98],
    [1, 119, -1],
    [1, 6, 100],
    [1, 162, -1],
    [1, 6, 102],
    [".", 103,
     1, 119, 104,
     0, 104],
    [1, 6, 102],
    [1, 6, 105],
    [3, "keyword", e[20], 106],
    [1, 6, 107],
    ["*", -1,
     "(", 108,
     1, 195, -1],
    [1, 6, 109],
    [1, 209, 110,
     0, 110],
    [1, 6, 111],
    [")", -1],
    [1, 6, 113],
    [1, 223, -1],
    [1, 229, 115],
    [1, 6, 116],
    [3, "operator", "=", 117],
    [1, 6, 118],
    [1, 119, -1],
    [3, "operator", e[23], 120,
     3, "keyword", e[24], 120,
     1, 230, 121],
    [1, 6, 119],
    [1, 6, 122],
    [1, 240, 123,
     3, "keyword", e[8], 124,
     ",", 124,
     0, -1],
    [1, 6, 122],
    [1, 6, 125],
    [1, 251, 123],
    [1, 88, 127,
     2, 258, -1, {"name":"indentedBody"}],
    [1, 6, 128],
    [";", 129,
     "\n", -1],
    [1, 6, 130],
    [1, 88, 131,
     0, 131],
    [1, 6, 128],
    [[5, 264], 133,
     1, 267, 134],
    [1, 229, 134],
    [1, 6, 135],
    [",", 136,
     0, -1],
    [1, 6, 137],
    [[5, 264], 138,
     1, 267, 139,
     0, 139],
    [1, 229, 139],
    [1, 6, 135],
    ["(", 141],
    [1, 6, 142],
    [1, 272, 143,
     0, 143],
    [1, 6, 144],
    [")", -1],
    ["'''", 146,
     "\"\"\"", 148,
     "'", 150,
     "\"", 152],
    ["\\", 147,
     [0, /^(?!\'\'\')/, /^[^]/], 146,
     "'''", -1],
    [/^[^]/, 146],
    ["\\", 149,
     [0, /^(?!\"\"\")/, /^[^]/], 148,
     "\"\"\"", -1],
    [/^[^]/, 148],
    ["\\", 151,
     /^(?!\')./, 150,
     "'", -1],
    [/^[^]/, 150],
    ["\\", 153,
     /^(?!\")./, 152,
     "\"", -1],
    [/^[^]/, 152],
    [3, "operator", "{", 155],
    [1, 119, 156,
     0, 156],
    [3, "operator", "=", 157,
     0, 157],
    [3, "operator", "!", 158,
     0, 159],
    [3, "keyword", /^(?:(?![\:\} \t]).)*/, 159],
    [3, "operator", ":", 160,
     0, 161],
    [3, "string", e[12], 160,
     1, 154, 160,
     0, 161],
    [3, "operator", "}", -1],
    [1, 251, 163],
    [1, 6, 164],
    [3, "keyword", e[9], 165,
     0, 167],
    [1, 6, 166],
    [3, "def", e[10], 167],
    [1, 6, 168],
    [",", 169,
     0, -1],
    [1, 6, 170],
    [1, 251, 171,
     0, 172],
    [1, 6, 173],
    [1, 6, 168],
    [3, "keyword", e[9], 174,
     0, 172],
    [1, 6, 175],
    [3, "def", e[10], 172],
    [2, 284, 177, {"name":"ParamList"}],
    [1, 6, 178],
    ["->", 179,
     0, 181],
    [1, 6, 180],
    [1, 119, 181],
    [1, 6, 182],
    [":", 183],
    [1, 6, 184],
    [1, 126, -1],
    [3, "type def", e[10], 186],
    [1, 6, 187],
    [2, 140, 188, {"name":"ArgList"},
     0, 188],
    [1, 6, 189],
    [":", 190],
    [1, 6, 191],
    [1, 126, -1],
    [1, 229, 193],
    [1, 6, 194],
    ["=", -1],
    [e[10], 196],
    [1, 6, 197],
    [3, "keyword", e[9], 198,
     0, 200],
    [1, 6, 199],
    [3, "def", e[10], 200],
    [1, 6, 201],
    [",", 202,
     0, -1],
    [1, 6, 203],
    [e[10], 204,
     0, 205],
    [1, 6, 206],
    [1, 6, 201],
    [3, "keyword", e[9], 207,
     0, 205],
    [1, 6, 208],
    [3, "def", e[10], 205],
    [e[10], 210],
    [1, 6, 211],
    [3, "keyword", e[9], 212],
    [1, 6, 213],
    [3, "def", e[10], 214,
     0, 214],
    [1, 6, 215],
    [",", 216,
     0, -1],
    [1, 6, 217],
    [e[10], 218,
     0, 219],
    [1, 6, 220],
    [1, 6, 215],
    [3, "keyword", e[9], 221],
    [1, 6, 222],
    [3, "def", e[10], 219,
     0, 219],
    [3, "variable", e[10], 224],
    [1, 6, 225],
    [",", 226,
     0, -1],
    [1, 6, 227],
    [3, "variable", e[10], 228,
     0, 228],
    [1, 6, 225],
    [1, 289, -1],
    [2, 305, -1, {"name":"ParenExpr"},
     2, 310, -1, {"name":"ArrayLiteral"},
     2, 315, -1, {"name":"ObjectLiteral"},
     3, "number", e[25], -1,
     0, 231,
     3, "operator", "...", -1,
     3, "atom", e[26], -1,
     3, "atom", e[27], -1,
     3, "keyword", e[28], 234,
     3, "keyword", e[29], 238,
     3, "builtin", e[30], -1,
     3, "variable callee", e[33], -1,
     3, "variable", e[10], -1],
    [2, 53, 232, {"name":"string","token":"string"},
     1, 55, 232],
    [1, 6, 233],
    [0, 231,
     0, -1],
    [1, 6, 235],
    [3, "keyword", e[21], 236,
     1, 119, -1,
     0, -1],
    [1, 6, 237],
    [1, 119, -1],
    [1, 6, 239],
    [2, 322, -1, {"name":"LambdaDef"}],
    [3, "operator", e[31], 241,
     3, "keyword", e[32], 241,
     2, 140, -1, {"name":"ArgList"},
     2, 327, -1, {"name":"Subscript"},
     ".", 243,
     3, "keyword", e[0], 245],
    [1, 6, 242],
    [1, 119, -1],
    [1, 6, 244],
    [3, "property callee", e[33], -1,
     3, "property", e[10], -1],
    [1, 6, 246],
    [1, 119, 247],
    [1, 6, 248],
    [3, "keyword", e[2], 249,
     0, -1],
    [1, 6, 250],
    [1, 119, -1],
    [3, "operator", e[23], 252,
     3, "keyword", e[24], 252,
     1, 230, 253],
    [1, 6, 251],
    [1, 6, 254],
    [1, 332, 255,
     3, "keyword", e[8], 256,
     0, -1],
    [1, 6, 254],
    [1, 6, 257],
    [1, 119, 255],
    ["\n", 259],
    [/^[ \t]/, 259,
     3, "comment", /^\#.*/, 259,
     "\n", 259,
     e[34], 260],
    [2, 9, 261, {"name":"Statement"}],
    [/^[ \t]/, 261,
     3, "comment", /^\#.*/, 261,
     "\n", 261,
     0, 262],
    [0, 263,
     0, -1],
    [e[34], 260],
    [1, 229, 265],
    [1, 6, 266],
    [3, "keyword", e[8], -1],
    [3, "operator", e[23], 268,
     3, "keyword", e[24], 268,
     1, 230, 269],
    [1, 6, 267],
    [1, 6, 270],
    [1, 343, 271,
     0, -1],
    [1, 6, 270],
    [3, "variable-2", e[36], 273,
     3, "operator", "**", 274,
     3, "meta", e[35], 275,
     0, 274],
    [1, 6, 276],
    [1, 6, 277],
    [1, 6, 278],
    [1, 332, 279,
     0, 280],
    [1, 251, 280],
    ["=", 274],
    [1, 6, 276],
    [1, 6, 281],
    [",", 282,
     1, 354, -1,
     0, -1],
    [1, 6, 283],
    [1, 366, -1,
     0, -1],
    ["(", 285],
    [1, 6, 286],
    [1, 380, 287,
     0, 287],
    [1, 6, 288],
    [")", -1],
    [[6, 406], 290,
     2, 407, 295, {"name":"ParenPattern"},
     2, 412, 295, {"name":"BracketPattern"}],
    [3, "def", e[10], 291],
    [1, 6, 292],
    [":", 293,
     0, 295],
    [1, 6, 294],
    [3, "variable", e[10], 295],
    [1, 6, 296],
    [",", 297,
     0, -1],
    [1, 6, 298],
    [[6, 406], 299,
     2, 407, 300, {"name":"ParenPattern"},
     2, 412, 300, {"name":"BracketPattern"},
     0, 300],
    [3, "def", e[10], 301],
    [1, 6, 296],
    [1, 6, 302],
    [":", 303,
     0, 300],
    [1, 6, 304],
    [3, "variable", e[10], 300],
    ["(", 306],
    [1, 6, 307],
    [1, 417, 308,
     0, 308],
    [1, 6, 309],
    [")", -1],
    ["[", 311],
    [1, 6, 312],
    [1, 417, 313,
     0, 313],
    [1, 6, 314],
    ["]", -1],
    ["{", 316],
    [1, 6, 317],
    [1, 425, 318,
     0, 320],
    [1, 6, 319],
    [1, 354, 320,
     0, 320],
    [1, 6, 321],
    ["}", -1],
    [1, 431, 323,
     0, 323],
    [1, 6, 324],
    [":", 325],
    [1, 6, 326],
    [1, 251, -1],
    ["[", 328],
    [1, 6, 329],
    [1, 449, 330],
    [1, 6, 331],
    ["]", -1],
    [3, "operator", e[31], 333,
     3, "keyword", e[32], 333,
     2, 140, -1, {"name":"ArgList"},
     2, 327, -1, {"name":"Subscript"},
     ".", 335,
     3, "keyword", e[0], 337],
    [1, 6, 334],
    [1, 251, -1],
    [1, 6, 336],
    [3, "property callee", e[33], -1,
     3, "property", e[10], -1],
    [1, 6, 338],
    [1, 251, 339],
    [1, 6, 340],
    [3, "keyword", e[2], 341,
     0, -1],
    [1, 6, 342],
    [1, 251, -1],
    [3, "operator", e[31], 344,
     3, "keyword", e[32], 344,
     2, 140, -1, {"name":"ArgList"},
     2, 327, -1, {"name":"Subscript"},
     ".", 346,
     3, "keyword", e[0], 348],
    [1, 6, 345],
    [1, 267, -1],
    [1, 6, 347],
    [3, "property callee", e[33], -1,
     3, "property", e[10], -1],
    [1, 6, 349],
    [1, 267, 350],
    [1, 6, 351],
    [3, "keyword", e[2], 352,
     0, -1],
    [1, 6, 353],
    [1, 267, -1],
    [3, "keyword", e[6], 355,
     0, 355],
    [1, 6, 356],
    [3, "keyword", e[4], 357],
    [1, 6, 358],
    [[5, 264], 359,
     1, 267, 360],
    [1, 229, 360],
    [1, 6, 361],
    [3, "keyword", e[8], 362],
    [1, 6, 363],
    [1, 119, 364],
    [1, 6, 365],
    [1, 354, -1,
     1, 475, -1,
     0, -1],
    [3, "operator", "**", 367,
     3, "meta", e[35], 368,
     0, 367],
    [1, 6, 369],
    [1, 6, 370],
    [1, 251, 371],
    ["=", 367],
    [1, 6, 372],
    [",", 373,
     0, -1],
    [1, 6, 374],
    [3, "operator", "**", 375,
     3, "meta", e[35], 376,
     0, 375,
     0, 377],
    [1, 6, 378],
    [1, 6, 379],
    [1, 6, 372],
    [1, 251, 377],
    ["=", 375],
    [2, 480, 381, {"name":"op","token":"operator"},
     0, 381],
    [1, 6, 382],
    [3, "atom", e[27], 383,
     3, "def", e[10], 383],
    [1, 6, 384],
    [":", 385,
     0, 386],
    [1, 6, 387],
    [1, 6, 388],
    [1, 251, 386],
    [3, "operator", "=", 389,
     0, 391],
    [1, 6, 390],
    [1, 251, 391],
    [1, 6, 392],
    [",", 393,
     0, -1],
    [1, 6, 394],
    [2, 480, 395, {"name":"op","token":"operator"},
     0, 395,
     0, 396],
    [1, 6, 397],
    [1, 6, 392],
    [3, "atom", e[27], 398,
     3, "def", e[10], 398],
    [1, 6, 399],
    [":", 400,
     0, 401],
    [1, 6, 402],
    [1, 6, 403],
    [1, 251, 401],
    [3, "operator", "=", 404,
     0, 396],
    [1, 6, 405],
    [1, 251, 396],
    [3, "keyword", e[8], -1],
    ["(", 408],
    [1, 6, 409],
    [1, 229, 410],
    [1, 6, 411],
    [")", -1],
    ["[", 413],
    [1, 6, 414],
    [1, 229, 415],
    [1, 6, 416],
    ["]", -1],
    [3, "variable-2", e[36], 418,
     1, 251, 421],
    [1, 6, 419],
    [1, 332, 420,
     0, 421],
    [1, 6, 419],
    [1, 6, 422],
    [",", 423,
     1, 354, -1,
     0, -1],
    [1, 6, 424],
    [1, 483, -1,
     0, -1],
    [2, 489, 426, {"name":"DictProp"}],
    [1, 6, 427],
    [",", 428,
     0, -1],
    [1, 6, 429],
    [2, 489, 430, {"name":"DictProp"},
     0, 430],
    [1, 6, 427],
    [3, "operator", e[37], 432,
     0, 432],
    [1, 6, 433],
    [3, "def", e[10], 434],
    [1, 6, 435],
    [3, "operator", "=", 436,
     0, 438],
    [1, 6, 437],
    [1, 251, 438],
    [1, 6, 439],
    [",", 440,
     0, -1],
    [1, 6, 441],
    [3, "operator", e[37], 442,
     0, 442,
     0, 443],
    [1, 6, 444],
    [1, 6, 439],
    [3, "def", e[10], 445],
    [1, 6, 446],
    [3, "operator", "=", 447,
     0, 443],
    [1, 6, 448],
    [1, 251, 443],
    [1, 251, 450,
     ":", 451],
    [1, 6, 452],
    [1, 6, 453],
    [":", 454,
     0, 460],
    [1, 251, 455,
     0, 455],
    [1, 6, 456],
    [1, 6, 457],
    [1, 251, 460,
     0, 460],
    [":", 458,
     0, 460],
    [1, 6, 459],
    [1, 251, 460,
     0, 460],
    [1, 6, 461],
    [",", 462,
     0, -1],
    [1, 6, 463],
    [1, 251, 464,
     ":", 465,
     0, 466],
    [1, 6, 467],
    [1, 6, 468],
    [1, 6, 461],
    [":", 469,
     0, 466],
    [1, 251, 470,
     0, 470],
    [1, 6, 471],
    [1, 6, 472],
    [1, 251, 466,
     0, 466],
    [":", 473,
     0, 466],
    [1, 6, 474],
    [1, 251, 466,
     0, 466],
    [3, "keyword", e[0], 476],
    [1, 6, 477],
    [1, 119, 478],
    [1, 6, 479],
    [1, 354, -1,
     1, 475, -1,
     0, -1],
    ["*", 481],
    [1, 6, 482],
    [/^\*?/, -1],
    [1, 251, 484],
    [1, 6, 485],
    [",", 486,
     0, -1],
    [1, 6, 487],
    [1, 251, 488,
     0, 488],
    [1, 6, 485],
    [3, "operator", "**", 490,
     1, 251, 492],
    [1, 6, 491],
    [1, 251, -1],
    [1, 6, 493],
    [":", 494,
     0, -1],
    [1, 6, 495],
    [1, 251, -1]
  ];
  var start = 0;
  var token = 5;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var scopes = ["LambdaDef", "FuncDef", "ClassDef"];
  var allowNewline = ["ArgList", "ParamList", "ParenExpr", "ArrayLiteral", "ObjectLiteral", "Subscript", "DictProp", "ParenPattern", "BracketPattern"];

  function maySkipNewline(_line, _pos, cx) {
    return cx && allowNewline.indexOf(cx.name) > -1
  }

  function countIndent(line, pos) {
    var count = 0;
    for (var i = pos - 1; i >= 0; i--) {
      var ch = line.charCodeAt(i);
      if (ch === 32) { count++; }
      else if (ch === 9) { count += 4; }
      else { break }
    }
    return count
  }

  function stillIndented(line, pos, cx) {
    while (cx && cx.name != "Statement") { cx = cx.parent; }
    return cx && countIndent(line, pos) > countIndent(cx.startLine, cx.startPos)
  }

  function isCompLocal(line, pos) {
    var id = /\w*$/.exec(line.slice(0, pos))[0];
    var forDecl = /\s+for\s+(\w+)/.exec(line.slice(pos));
    return forDecl ? forDecl[1] == id : false
  }

  function aligned(cx) {
    return !/^\s*((#.*)?$)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    ObjectLiteral: "}",
    ArrayLiteral: "]", SubScript: "]", BracketPattern: "]",
    ParamList: ")", ArgList: ")", ParenExpr: ")", ParenPattern: ")"
  };

  function findIndent(cx, textAfter, curLine, config) {
    if (!cx) { return 0 }
    if (cx.name == "string") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    if (brack) {
      if (curLine != cx.startLine && aligned(cx))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 1 }

      var closed = textAfter && textAfter.charAt(0) == brack;
      var flat = closed && brack != ")" || curLine == cx.startLine;
      return findIndent(cx.parent, closed ? null : textAfter, cx.startLine, config) + (flat ? 0 : 2 * config.indentUnit)
    } else if (cx.name == "indentedBody") {
      for (;; cx = cx.parent) {
        if (!cx) { return config.indentUnit }
        if (cx.name == "Statement") { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) + config.indentUnit }
      }
    } else {
      return findIndent(cx.parent, textAfter, curLine, config) +
        ((cx.name == "DictProp" || cx.name == "Statement") && cx.startLine != curLine ? 2 * config.indentUnit : 0)
    }
  }

  function pythonMarkLocals(token$$1, stream, state) {
    var marked = markLocals(token$$1, scopes, stream, state);
    if (token$$1 == "def") {
      var cx = state.context;
      while (cx && scopes.indexOf(cx.name) == -1) { cx = cx.parent; }
      if (cx && cx.name == "ClassDef") { marked = "def property"; }
      else if (marked == "def local") { marked = "variable-2"; }
    }
    return marked
  }  

  var PythonMode = /*@__PURE__*/(function (superclass) {
    function PythonMode(conf) {
      superclass.call(this, grammar, {
        predicates: {maySkipNewline: maySkipNewline, stillIndented: stillIndented, isCompLocal: isCompLocal}
      });
      this.conf = conf;
    }

    if ( superclass ) PythonMode.__proto__ = superclass;
    PythonMode.prototype = Object.create( superclass && superclass.prototype );
    PythonMode.prototype.constructor = PythonMode;

    PythonMode.prototype.token = function token$$1 (stream, state) {
      return pythonMarkLocals(superclass.prototype.token.call(this, stream, state), stream, state)
    };

    PythonMode.prototype.indent = function indent (state, textAfter, line) {
      return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, null, this.conf)
    };

    return PythonMode;
  }(CodeMirror.GrammarMode));

  PythonMode.prototype.electricInput = /^\s*[\}\]\)]$/;
  // ` also gets autoclosed since it's often used in comments/docstrings.
  PythonMode.prototype.closeBrackets = {triples: "'\"", pairs: "()[]{}''\"\"``",};
  PythonMode.prototype.lineComment = "#";
  PythonMode.prototype.fold = "indent";

  CodeMirror.defineMode("google-python", function (conf) { return new PythonMode(conf); });

})));
