(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^if(?![a-zA-Z¡-￿_0-9_])/, /^(?:while|elif)(?![a-zA-Z¡-￿_0-9_])/, /^else(?![a-zA-Z¡-￿_0-9_])/, /^(?:try|finally)(?![a-zA-Z¡-￿_0-9_])/, /^for(?![a-zA-Z¡-￿_0-9_])/, /^except(?![a-zA-Z¡-￿_0-9_])/, /^async(?![a-zA-Z¡-￿_0-9_])/, /^print(?![a-zA-Z¡-￿_0-9_])/, /^in(?![a-zA-Z¡-￿_0-9_])/, /^as(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*/, [0, /^(?![\{\}])/, /^[^]/], /^(?![\{\}])./, /^with(?![a-zA-Z¡-￿_0-9_])/, /^def(?![a-zA-Z¡-￿_0-9_])/, /^class(?![a-zA-Z¡-￿_0-9_])/, /^(?:pass|break|continue)(?![a-zA-Z¡-￿_0-9_])/, /^del(?![a-zA-Z¡-￿_0-9_])/, /^(?:return|assert)(?![a-zA-Z¡-￿_0-9_])/, /^raise(?![a-zA-Z¡-￿_0-9_])/, /^import(?![a-zA-Z¡-￿_0-9_])/, /^from(?![a-zA-Z¡-￿_0-9_])/, /^(?:global|nonlocal)(?![a-zA-Z¡-￿_0-9_])/, /^[\*\+\-\~]/, /^(?:not|await)(?![a-zA-Z¡-￿_0-9_])/, /^(?:(?:0b|OB)[01_]+|(?:0o|0O)[0-7_]+|(?:0x|OX)[0-9a-fA-F_]+|(?:[0-9][0-9_]*(?:l|L|\.[0-9_]+)?|\.[0-9_]+)(?:[eE][\+\-]?[0-9_]+)?[jJ]?)/, /^(?:None|True|False)(?![a-zA-Z¡-￿_0-9_])/, /^self(?![a-zA-Z¡-￿_0-9_])/, /^yield(?![a-zA-Z¡-￿_0-9_])/, /^lambda(?![a-zA-Z¡-￿_0-9_])/, /^(?:abs|all|any|bin|bool|bytearray|callable|chr|classmethod|compile|complex|delattr|dict|dir|divmod|enumerate|eval|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|isinstance|issubclass|iter|len|list|locals|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|vars|zip|__import__|NotImplemented|Ellipsis|__debug__|ascii|bytes|exec|print)(?![a-zA-Z¡-￿_0-9_])/, /^(?:(?:\^|\&|\||\<\<|\>\>|\+|\-|\*\*?|\@|\/|\%|\/)\=?|\=|\<|\>|\=\=|\>\=|\<\=|\<\>|\!\=|\:\=)/, /^(?:or|and|in|is(?: +not)?|not(?: +in)?)(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?=\()/, [7, "stillIndented"], /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\=)/, [0, /^[a-zA-Z¡-￿__]/, /^[a-zA-Z¡-￿_0-9_]*/, [7, "isCompLocal"]], /^(?:\*|\*\*)/];
  var nodes = [
    [1, 6, 2],
    [/^[^]/, 0],
    [1, 6, 3],
    ["\n", 4,
     2, 9, 4, {"name":"Statement"},
     0, 1],
    [1, 6, 3],
    [3, "keyword", e[0], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[29], -1,
     3, "keyword", e[17], -1,
     3, "keyword", e[28], -1,
     3, "keyword", e[19], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[22], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[24], -1,
     3, "atom", e[26], -1,
     3, "atom", e[27], -1,
     3, "keyword", e[32], -1,
     3, "builtin", e[30], -1,
     3, "builtin", e[7], -1,
     3, "operator", e[31], -1,
     3, "operator", e[23], -1,
     3, "number", e[25], -1,
     2, 53, -1, {"name":"string","token":"string"},
     1, 55, -1,
     3, "variable", e[10], -1,
     3, "comment", /^\#.*/, -1,
     /^[^]/, -1],
    [/^[ \t]/, 6,
     3, "comment", /^\#.*/, 6,
     "\\", 7,
     [0, /^(?=\n)/, [7, "maySkipNewline"]], 8,
     0, -1],
    ["\n", 6],
    ["\n", 6],
    [3, "keyword", e[0], 10,
     3, "keyword", e[1], 10,
     3, "keyword", e[2], 16,
     3, "keyword", e[3], 16,
     3, "keyword", e[4], 20,
     3, "keyword", e[5], 30,
     3, "keyword", e[6], 40,
     1, 67, -1,
     2, 80, 42, {"name":"Annotation","token":"meta"},
     3, "builtin", e[7], 46,
     1, 88, 48],
    [1, 6, 11],
    [1, 123, 12],
    [1, 6, 13],
    [":", 14],
    [1, 6, 15],
    [1, 130, -1],
    [1, 6, 17],
    [":", 18],
    [1, 6, 19],
    [1, 130, -1],
    [1, 6, 21],
    [1, 136, 22],
    [1, 6, 23],
    [3, "keyword", e[8], 24],
    [1, 6, 25],
    [1, 123, 26],
    [1, 6, 27],
    [":", 28],
    [1, 6, 29],
    [1, 130, -1],
    [1, 6, 31],
    [1, 123, 32,
     0, 33],
    [1, 6, 34],
    [1, 6, 35],
    [3, "keyword", e[9], 36,
     0, 33],
    [":", 37],
    [1, 6, 38],
    [1, 6, 39],
    [3, "def", e[10], 33],
    [1, 130, -1],
    [1, 6, 41],
    [1, 67, -1],
    [1, 6, 43],
    [2, 144, 44, {"name":"ArgList"},
     0, 44],
    [1, 6, 45],
    ["\n", -1],
    [1, 6, 47],
    [2, 144, -1, {"name":"ArgList"},
     1, 123, -1],
    [1, 6, 49],
    [";", 50,
     "\n", -1],
    [1, 6, 51],
    [1, 88, 52,
     0, 52],
    [1, 6, 49],
    [/^[uUrRbB]+(?=[\'\"])/, 54,
     1, 149, -1],
    [1, 149, -1],
    [3, "string", /^[uUrR]*[fF][uUrR]*(?=[\'\"])/, 56],
    [3, "string", "'''", 57,
     3, "string", "\"\"\"", 58,
     3, "string", "'", 59,
     3, "string", "\"", 60],
    [/^(?!\'\'\')/, 61,
     3, "string", "{{", 57,
     3, "string", "}}", 57,
     1, 158, 57,
     3, "string", "'''", -1],
    [/^(?!\"\"\")/, 62,
     3, "string", "{{", 58,
     3, "string", "}}", 58,
     1, 158, 58,
     3, "string", "\"\"\"", -1],
    [3, "string", "\\", 63,
     /^(?!\')/, 64,
     3, "string", "{{", 59,
     3, "string", "}}", 59,
     1, 158, 59,
     3, "string", "'", -1],
    [3, "string", "\\", 65,
     /^(?!\")/, 66,
     3, "string", "{{", 60,
     3, "string", "}}", 60,
     1, 158, 60,
     3, "string", "\"", -1],
    [3, "string", e[11], 57],
    [3, "string", e[11], 58],
    [3, "string", e[11], 59],
    [3, "string", e[12], 59],
    [3, "string", e[11], 60],
    [3, "string", e[12], 60],
    [3, "keyword", e[13], 68,
     3, "keyword", e[14], 74,
     3, "keyword", e[15], 78],
    [1, 6, 69],
    [1, 166, 70],
    [1, 6, 71],
    [":", 72],
    [1, 6, 73],
    [1, 130, -1],
    [1, 6, 75],
    [3, "def", e[10], 76],
    [1, 6, 77],
    [2, 180, -1, {"name":"FuncDef"}],
    [1, 6, 79],
    [2, 189, -1, {"name":"ClassDef"}],
    ["@", 81],
    [1, 6, 82],
    [e[10], 83],
    [1, 6, 84],
    [".", 85,
     0, -1],
    [1, 6, 86],
    [e[10], 87],
    [1, 6, 84],
    [3, "keyword", e[16], -1,
     3, "keyword", e[17], 89,
     3, "keyword", e[18], 91,
     3, "keyword", e[19], 93,
     3, "keyword", e[20], 99,
     3, "keyword", e[21], 101,
     3, "keyword", e[22], 112,
     [5, 196], 114,
     1, 123, -1],
    [1, 6, 90],
    [1, 123, -1],
    [1, 6, 92],
    [1, 123, -1,
     0, -1],
    [1, 6, 94],
    [1, 123, 95,
     0, 95],
    [1, 6, 96],
    [3, "keyword", e[21], 97,
     0, -1],
    [1, 6, 98],
    [1, 123, -1],
    [1, 6, 100],
    [1, 199, -1],
    [1, 6, 102],
    [".", 103,
     1, 123, 104,
     0, 104],
    [1, 6, 102],
    [1, 6, 105],
    [3, "keyword", e[20], 106],
    [1, 6, 107],
    ["*", -1,
     "(", 108,
     1, 213, -1],
    [1, 6, 109],
    [1, 227, 110,
     0, 110],
    [1, 6, 111],
    [")", -1],
    [1, 6, 113],
    [1, 241, -1],
    [1, 247, 115],
    [1, 6, 116],
    [":", 117,
     0, 118],
    [1, 6, 119],
    [1, 6, 120],
    [1, 123, 118],
    [3, "operator", "=", 121,
     0, -1],
    [1, 6, 122],
    [1, 123, -1],
    [3, "operator", e[23], 124,
     3, "keyword", e[24], 124,
     1, 248, 125],
    [1, 6, 123],
    [1, 6, 126],
    [1, 258, 127,
     3, "keyword", e[8], 128,
     ",", 128,
     0, -1],
    [1, 6, 126],
    [1, 6, 129],
    [1, 269, 127],
    [1, 88, 131,
     2, 276, -1, {"name":"indentedBody"}],
    [1, 6, 132],
    [";", 133,
     "\n", -1],
    [1, 6, 134],
    [1, 88, 135,
     0, 135],
    [1, 6, 132],
    [[5, 282], 137,
     1, 285, 138],
    [1, 247, 138],
    [1, 6, 139],
    [",", 140,
     0, -1],
    [1, 6, 141],
    [[5, 282], 142,
     1, 285, 143,
     0, 143],
    [1, 247, 143],
    [1, 6, 139],
    ["(", 145],
    [1, 6, 146],
    [1, 290, 147,
     0, 147],
    [1, 6, 148],
    [")", -1],
    ["'''", 150,
     "\"\"\"", 152,
     "'", 154,
     "\"", 156],
    ["\\", 151,
     [0, /^(?!\'\'\')/, /^[^]/], 150,
     "'''", -1],
    [/^[^]/, 150],
    ["\\", 153,
     [0, /^(?!\"\"\")/, /^[^]/], 152,
     "\"\"\"", -1],
    [/^[^]/, 152],
    ["\\", 155,
     /^(?!\')./, 154,
     "'", -1],
    [/^[^]/, 154],
    ["\\", 157,
     /^(?!\")./, 156,
     "\"", -1],
    [/^[^]/, 156],
    [3, "operator", "{", 159],
    [1, 123, 160,
     0, 160],
    [3, "operator", "=", 161,
     0, 161],
    [3, "operator", "!", 162,
     0, 163],
    [3, "keyword", /^(?:(?![\:\} \t]).)*/, 163],
    [3, "operator", ":", 164,
     0, 165],
    [3, "string", e[12], 164,
     1, 158, 164,
     0, 165],
    [3, "operator", "}", -1],
    [1, 269, 167],
    [1, 6, 168],
    [3, "keyword", e[9], 169,
     0, 171],
    [1, 6, 170],
    [3, "def", e[10], 171,
     2, 302, 171, {"name":"ParenPattern"},
     2, 307, 171, {"name":"BracketPattern"}],
    [1, 6, 172],
    [",", 173,
     0, -1],
    [1, 6, 174],
    [1, 269, 175,
     0, 176],
    [1, 6, 177],
    [1, 6, 172],
    [3, "keyword", e[9], 178,
     0, 176],
    [1, 6, 179],
    [3, "def", e[10], 176,
     2, 302, 176, {"name":"ParenPattern"},
     2, 307, 176, {"name":"BracketPattern"}],
    [2, 312, 181, {"name":"ParamList"}],
    [1, 6, 182],
    ["->", 183,
     0, 185],
    [1, 6, 184],
    [1, 123, 185],
    [1, 6, 186],
    [":", 187],
    [1, 6, 188],
    [1, 130, -1],
    [3, "type def", e[10], 190],
    [1, 6, 191],
    [2, 144, 192, {"name":"ArgList"},
     0, 192],
    [1, 6, 193],
    [":", 194],
    [1, 6, 195],
    [1, 130, -1],
    [1, 247, 197],
    [1, 6, 198],
    [/^[\=\:]/, -1],
    [1, 269, 200],
    [1, 6, 201],
    [3, "keyword", e[9], 202,
     0, 204],
    [1, 6, 203],
    [3, "def", e[10], 204],
    [1, 6, 205],
    [",", 206,
     0, -1],
    [1, 6, 207],
    [1, 269, 208,
     0, 209],
    [1, 6, 210],
    [1, 6, 205],
    [3, "keyword", e[9], 211,
     0, 209],
    [1, 6, 212],
    [3, "def", e[10], 209],
    [e[10], 214],
    [1, 6, 215],
    [3, "keyword", e[9], 216,
     0, 218],
    [1, 6, 217],
    [3, "def", e[10], 218],
    [1, 6, 219],
    [",", 220,
     0, -1],
    [1, 6, 221],
    [e[10], 222,
     0, 223],
    [1, 6, 224],
    [1, 6, 219],
    [3, "keyword", e[9], 225,
     0, 223],
    [1, 6, 226],
    [3, "def", e[10], 223],
    [e[10], 228],
    [1, 6, 229],
    [3, "keyword", e[9], 230],
    [1, 6, 231],
    [3, "def", e[10], 232,
     0, 232],
    [1, 6, 233],
    [",", 234,
     0, -1],
    [1, 6, 235],
    [e[10], 236,
     0, 237],
    [1, 6, 238],
    [1, 6, 233],
    [3, "keyword", e[9], 239],
    [1, 6, 240],
    [3, "def", e[10], 237,
     0, 237],
    [3, "variable", e[10], 242],
    [1, 6, 243],
    [",", 244,
     0, -1],
    [1, 6, 245],
    [3, "variable", e[10], 246,
     0, 246],
    [1, 6, 243],
    [1, 317, -1],
    [2, 325, -1, {"name":"ParenExpr"},
     2, 330, -1, {"name":"ArrayLiteral"},
     2, 335, -1, {"name":"ObjectLiteral"},
     3, "number", e[25], -1,
     0, 249,
     3, "operator", "...", -1,
     3, "atom", e[26], -1,
     3, "atom", e[27], -1,
     3, "keyword", e[28], 252,
     3, "keyword", e[29], 256,
     3, "builtin", e[30], -1,
     3, "variable callee", e[33], -1,
     3, "variable", e[10], -1],
    [2, 53, 250, {"name":"string","token":"string"},
     1, 55, 250],
    [1, 6, 251],
    [0, 249,
     0, -1],
    [1, 6, 253],
    [3, "keyword", e[21], 254,
     1, 123, -1,
     0, -1],
    [1, 6, 255],
    [1, 123, -1],
    [1, 6, 257],
    [2, 342, -1, {"name":"LambdaDef"}],
    [3, "operator", e[31], 259,
     3, "keyword", e[32], 259,
     2, 144, -1, {"name":"ArgList"},
     2, 347, -1, {"name":"Subscript"},
     ".", 261,
     3, "keyword", e[0], 263],
    [1, 6, 260],
    [1, 123, -1],
    [1, 6, 262],
    [3, "property callee", e[33], -1,
     3, "property", e[10], -1],
    [1, 6, 264],
    [1, 123, 265],
    [1, 6, 266],
    [3, "keyword", e[2], 267,
     0, -1],
    [1, 6, 268],
    [1, 123, -1],
    [3, "operator", e[23], 270,
     3, "keyword", e[24], 270,
     1, 248, 271],
    [1, 6, 269],
    [1, 6, 272],
    [1, 352, 273,
     3, "keyword", e[8], 274,
     0, -1],
    [1, 6, 272],
    [1, 6, 275],
    [1, 123, 273],
    ["\n", 277],
    [/^[ \t]/, 277,
     3, "comment", /^\#.*/, 277,
     "\n", 277,
     e[34], 278],
    [2, 9, 279, {"name":"Statement"}],
    [/^[ \t]/, 279,
     3, "comment", /^\#.*/, 279,
     "\n", 279,
     0, 280],
    [0, 281,
     0, -1],
    [e[34], 278],
    [1, 247, 283],
    [1, 6, 284],
    [3, "keyword", e[8], -1],
    [3, "operator", e[23], 286,
     3, "keyword", e[24], 286,
     1, 248, 287],
    [1, 6, 285],
    [1, 6, 288],
    [1, 363, 289,
     0, -1],
    [1, 6, 288],
    [3, "variable-2", e[36], 291,
     3, "operator", "**", 292,
     3, "meta", e[35], 293,
     0, 292],
    [1, 6, 294],
    [1, 6, 295],
    [1, 6, 296],
    [1, 352, 297,
     0, 298],
    [1, 269, 298],
    ["=", 292],
    [1, 6, 294],
    [1, 6, 299],
    [",", 300,
     1, 374, -1,
     0, -1],
    [1, 6, 301],
    [1, 386, -1,
     0, -1],
    ["(", 303],
    [1, 6, 304],
    [1, 247, 305],
    [1, 6, 306],
    [")", -1],
    ["[", 308],
    [1, 6, 309],
    [1, 247, 310],
    [1, 6, 311],
    ["]", -1],
    ["(", 313],
    [1, 6, 314],
    [1, 400, 315,
     0, 315],
    [1, 6, 316],
    [")", -1],
    [[6, 426], 318,
     2, 302, 319, {"name":"ParenPattern"},
     2, 307, 319, {"name":"BracketPattern"}],
    [3, "def", e[10], 319],
    [1, 6, 320],
    [",", 321,
     0, -1],
    [1, 6, 322],
    [[6, 426], 323,
     2, 302, 324, {"name":"ParenPattern"},
     2, 307, 324, {"name":"BracketPattern"},
     0, 324],
    [3, "def", e[10], 324],
    [1, 6, 320],
    ["(", 326],
    [1, 6, 327],
    [1, 427, 328,
     0, 328],
    [1, 6, 329],
    [")", -1],
    ["[", 331],
    [1, 6, 332],
    [1, 427, 333,
     0, 333],
    [1, 6, 334],
    ["]", -1],
    ["{", 336],
    [1, 6, 337],
    [1, 435, 338,
     0, 340],
    [1, 6, 339],
    [1, 374, 340,
     0, 340],
    [1, 6, 341],
    ["}", -1],
    [1, 441, 343,
     0, 343],
    [1, 6, 344],
    [":", 345],
    [1, 6, 346],
    [1, 269, -1],
    ["[", 348],
    [1, 6, 349],
    [1, 459, 350],
    [1, 6, 351],
    ["]", -1],
    [3, "operator", e[31], 353,
     3, "keyword", e[32], 353,
     2, 144, -1, {"name":"ArgList"},
     2, 347, -1, {"name":"Subscript"},
     ".", 355,
     3, "keyword", e[0], 357],
    [1, 6, 354],
    [1, 269, -1],
    [1, 6, 356],
    [3, "property callee", e[33], -1,
     3, "property", e[10], -1],
    [1, 6, 358],
    [1, 269, 359],
    [1, 6, 360],
    [3, "keyword", e[2], 361,
     0, -1],
    [1, 6, 362],
    [1, 269, -1],
    [3, "operator", e[31], 364,
     3, "keyword", e[32], 364,
     2, 144, -1, {"name":"ArgList"},
     2, 347, -1, {"name":"Subscript"},
     ".", 366,
     3, "keyword", e[0], 368],
    [1, 6, 365],
    [1, 285, -1],
    [1, 6, 367],
    [3, "property callee", e[33], -1,
     3, "property", e[10], -1],
    [1, 6, 369],
    [1, 285, 370],
    [1, 6, 371],
    [3, "keyword", e[2], 372,
     0, -1],
    [1, 6, 373],
    [1, 285, -1],
    [3, "keyword", e[6], 375,
     0, 375],
    [1, 6, 376],
    [3, "keyword", e[4], 377],
    [1, 6, 378],
    [[5, 282], 379,
     1, 285, 380],
    [1, 247, 380],
    [1, 6, 381],
    [3, "keyword", e[8], 382],
    [1, 6, 383],
    [1, 123, 384],
    [1, 6, 385],
    [1, 374, -1,
     1, 493, -1,
     0, -1],
    [3, "operator", "**", 387,
     3, "meta", e[35], 388,
     0, 387],
    [1, 6, 389],
    [1, 6, 390],
    [1, 269, 391],
    ["=", 387],
    [1, 6, 392],
    [",", 393,
     0, -1],
    [1, 6, 394],
    [3, "operator", "**", 395,
     3, "meta", e[35], 396,
     0, 395,
     0, 397],
    [1, 6, 398],
    [1, 6, 399],
    [1, 6, 392],
    [1, 269, 397],
    ["=", 395],
    [2, 498, 401, {"name":"op","token":"operator"},
     0, 401],
    [1, 6, 402],
    [3, "atom", e[27], 403,
     3, "def", e[10], 403],
    [1, 6, 404],
    [":", 405,
     0, 406],
    [1, 6, 407],
    [1, 6, 408],
    [1, 269, 406],
    [3, "operator", "=", 409,
     0, 411],
    [1, 6, 410],
    [1, 269, 411],
    [1, 6, 412],
    [",", 413,
     0, -1],
    [1, 6, 414],
    [2, 498, 415, {"name":"op","token":"operator"},
     0, 415,
     0, 416],
    [1, 6, 417],
    [1, 6, 412],
    [3, "atom", e[27], 418,
     3, "def", e[10], 418],
    [1, 6, 419],
    [":", 420,
     0, 421],
    [1, 6, 422],
    [1, 6, 423],
    [1, 269, 421],
    [3, "operator", "=", 424,
     0, 416],
    [1, 6, 425],
    [1, 269, 416],
    [3, "keyword", e[8], -1],
    [3, "variable-2", e[36], 428,
     1, 269, 431],
    [1, 6, 429],
    [1, 352, 430,
     0, 431],
    [1, 6, 429],
    [1, 6, 432],
    [",", 433,
     1, 374, -1,
     0, -1],
    [1, 6, 434],
    [1, 501, -1,
     0, -1],
    [2, 507, 436, {"name":"DictProp"}],
    [1, 6, 437],
    [",", 438,
     0, -1],
    [1, 6, 439],
    [2, 507, 440, {"name":"DictProp"},
     0, 440],
    [1, 6, 437],
    [3, "operator", e[37], 442,
     0, 442],
    [1, 6, 443],
    [3, "def", e[10], 444],
    [1, 6, 445],
    [3, "operator", "=", 446,
     0, 448],
    [1, 6, 447],
    [1, 269, 448],
    [1, 6, 449],
    [",", 450,
     0, -1],
    [1, 6, 451],
    [3, "operator", e[37], 452,
     0, 452,
     0, 453],
    [1, 6, 454],
    [1, 6, 449],
    [3, "def", e[10], 455],
    [1, 6, 456],
    [3, "operator", "=", 457,
     0, 453],
    [1, 6, 458],
    [1, 269, 453],
    [1, 269, 460,
     ":", 461],
    [1, 6, 462],
    [1, 6, 463],
    [":", 464,
     0, 474],
    [1, 269, 465,
     0, 465],
    [1, 6, 466],
    [1, 6, 467],
    [1, 269, 468,
     0, 468],
    [":", 469,
     0, 474],
    [1, 6, 470],
    [1, 6, 471],
    [":", 472,
     0, 474],
    [1, 269, 474,
     0, 474],
    [1, 6, 473],
    [1, 269, 474,
     0, 474],
    [1, 6, 475],
    [",", 476,
     0, -1],
    [1, 6, 477],
    [1, 269, 478,
     ":", 479,
     0, 480],
    [1, 6, 481],
    [1, 6, 482],
    [1, 6, 475],
    [":", 483,
     0, 480],
    [1, 269, 484,
     0, 484],
    [1, 6, 485],
    [1, 6, 486],
    [1, 269, 487,
     0, 487],
    [":", 488,
     0, 480],
    [1, 6, 489],
    [1, 6, 490],
    [":", 491,
     0, 480],
    [1, 269, 480,
     0, 480],
    [1, 6, 492],
    [1, 269, 480,
     0, 480],
    [3, "keyword", e[0], 494],
    [1, 6, 495],
    [1, 123, 496],
    [1, 6, 497],
    [1, 374, -1,
     1, 493, -1,
     0, -1],
    ["*", 499],
    [1, 6, 500],
    [/^\*?/, -1],
    [1, 269, 502],
    [1, 6, 503],
    [",", 504,
     0, -1],
    [1, 6, 505],
    [1, 269, 506,
     0, 506],
    [1, 6, 503],
    [3, "operator", "**", 508,
     1, 269, 510],
    [1, 6, 509],
    [1, 269, -1],
    [1, 6, 511],
    [":", 512,
     0, -1],
    [1, 6, 513],
    [1, 269, -1]
  ];
  var start = 0;
  var token = 5;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var scopes = ["LambdaDef", "FuncDef", "ClassDef"];
  var allowNewline = ["ArgList", "ParamList", "ParenExpr", "ArrayLiteral", "ObjectLiteral", "Subscript", "DictProp", "ParenPattern", "BracketPattern"];

  function maySkipNewline(_line, _pos, cx) {
    return cx && allowNewline.indexOf(cx.name) > -1
  }

  function countIndent(line, pos) {
    var count = 0;
    for (var i = pos - 1; i >= 0; i--) {
      var ch = line.charCodeAt(i);
      if (ch === 32) { count++; }
      else if (ch === 9) { count += 4; }
      else { break }
    }
    return count
  }

  function stillIndented(line, pos, cx) {
    while (cx && cx.name != "Statement") { cx = cx.parent; }
    return cx && countIndent(line, pos) > countIndent(cx.startLine, cx.startPos)
  }

  function isCompLocal(line, pos) {
    var id = /\w*$/.exec(line.slice(0, pos))[0];
    var forDecl = /\s+for\s+(\w+)/.exec(line.slice(pos));
    return forDecl ? forDecl[1] == id : false
  }

  function aligned(cx) {
    return !/^\s*((#.*)?$)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    ObjectLiteral: "}",
    ArrayLiteral: "]", SubScript: "]", BracketPattern: "]",
    ParamList: ")", ArgList: ")", ParenExpr: ")", ParenPattern: ")"
  };

  function findIndent(cx, textAfter, curLine, config) {
    if (!cx) { return 0 }
    if (cx.name == "string") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    if (brack) {
      if (curLine != cx.startLine && aligned(cx))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 1 }

      var closed = textAfter && textAfter.charAt(0) == brack;
      var flat = closed && brack != ")" || curLine == cx.startLine;
      return findIndent(cx.parent, closed ? null : textAfter, cx.startLine, config) + (flat ? 0 : 2 * config.indentUnit)
    } else if (cx.name == "indentedBody") {
      for (;; cx = cx.parent) {
        if (!cx) { return config.indentUnit }
        if (cx.name == "Statement") { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) + config.indentUnit }
      }
    } else {
      return findIndent(cx.parent, textAfter, curLine, config) +
        ((cx.name == "DictProp" || cx.name == "Statement") && cx.startLine != curLine ? 2 * config.indentUnit : 0)
    }
  }

  function pythonMarkLocals(token$$1, stream, state) {
    var marked = markLocals(token$$1, scopes, stream, state);
    if (token$$1 == "def") {
      var cx = state.context;
      while (cx && scopes.indexOf(cx.name) == -1) { cx = cx.parent; }
      if (cx && cx.name == "ClassDef") { marked = "def property"; }
      else if (marked == "def local") { marked = "variable-2"; }
    }
    return marked
  }  

  var PythonMode = /*@__PURE__*/(function (superclass) {
    function PythonMode(conf) {
      superclass.call(this, grammar, {
        predicates: {maySkipNewline: maySkipNewline, stillIndented: stillIndented, isCompLocal: isCompLocal}
      });
      this.conf = conf;
    }

    if ( superclass ) PythonMode.__proto__ = superclass;
    PythonMode.prototype = Object.create( superclass && superclass.prototype );
    PythonMode.prototype.constructor = PythonMode;

    PythonMode.prototype.token = function token$$1 (stream, state) {
      return pythonMarkLocals(superclass.prototype.token.call(this, stream, state), stream, state)
    };

    PythonMode.prototype.indent = function indent (state, textAfter, line) {
      return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, null, this.conf)
    };

    return PythonMode;
  }(CodeMirror.GrammarMode));

  PythonMode.prototype.electricInput = /^\s*[\}\]\)]$/;
  // ` also gets autoclosed since it's often used in comments/docstrings.
  PythonMode.prototype.closeBrackets = {triples: "'\"", pairs: "()[]{}''\"\"``",};
  PythonMode.prototype.lineComment = "#";
  PythonMode.prototype.fold = "indent";

  CodeMirror.defineMode("google-python", function (conf) { return new PythonMode(conf); });

})));
