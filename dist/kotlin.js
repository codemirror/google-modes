(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/, /^as(?![a-zA-Z¡-￿_0-9])/, /^package(?![a-zA-Z¡-￿_0-9])/, /^import(?![a-zA-Z¡-￿_0-9])/, /^[ \t\r]+/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^in(?![a-zA-Z¡-￿_0-9])/, [0, /^(?!\*\/)/, /^[^]/], /^class(?![a-zA-Z¡-￿_0-9])/, /^interface(?![a-zA-Z¡-￿_0-9])/, /^fun(?![a-zA-Z¡-￿_0-9])/, /^typealias(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)\@/, /^(?:\.\.|\?\:|[\+\-\*\/\%\<\>]\=?|[\!\=]\=\=?|\=|\&\&|\|\|)/, /^is(?![a-zA-Z¡-￿_0-9])/, [1, "\n", "\t", " "], /^[a-zA-Z0-9¡-￿_\.]+/, /^\@[a-zA-Z0-9¡-￿_]+/, [0, [6, 144], /^[^]/], /^(?:enum|sealed|annotation|data|inner|override|lateinit|public|private|internal|protected|tailrec|operator|infix|inline|external|extend|const|abstract|final|open|vararg|noinline|crossinline|reified|expect|actual|suspend)(?![a-zA-Z¡-￿_0-9])/, /^object(?![a-zA-Z¡-￿_0-9])/, /^(?:val|var)(?![a-zA-Z¡-￿_0-9])/, /^where(?![a-zA-Z¡-￿_0-9])/, /^(?:true|false|null)(?![a-zA-Z¡-￿_0-9])/, /^(?:(?:0x|0X)[0-9_a-fA-F]+|(?:0b|0B)[01_]+|(?:[0-9][0-9_]*(?:\.[0-9_]*)?|\.[0-9_]+)(?:[eE][\+\-]?[0-9_]+)?)[uU]?L?/, /^\'(?:\\.(?:(?!\').)*|.)\'/, /^this(?![a-zA-Z¡-￿_0-9])/, /^it(?![a-zA-Z¡-￿_0-9])/, /^super(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^when(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *[\(\{])/, /^else(?![a-zA-Z¡-￿_0-9])/, /^dynamic(?![a-zA-Z¡-￿_0-9])/, /^by(?![a-zA-Z¡-￿_0-9])/, /^constructor(?![a-zA-Z¡-￿_0-9])/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^finally(?![a-zA-Z¡-￿_0-9])/, /^(?:in|out)(?![a-zA-Z¡-￿_0-9])/, /^companion(?![a-zA-Z¡-￿_0-9])/, /^init(?![a-zA-Z¡-￿_0-9])/];
  var nodes = [
    [3, "meta", /^\#\!.*/, 2,
     0, 2],
    [/^[^]/, 0],
    [1, 25, 3],
    [3, "keyword", e[2], 4,
     3, "keyword", e[3], 5,
     2, 26, 6, {"name":"Statement"}],
    [1, 25, 7],
    [1, 25, 8],
    [e[4], 6,
     2, 52, 6, {"name":"comment","token":"comment"},
     "\n", 6,
     0, 9],
    [3, "variable package", e[0], 10],
    [3, "variable package", /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *\.)/, 11,
     "*", 12,
     3, "def", e[0], 13],
    [0, 3,
     0, 1],
    [1, 58, 14],
    [1, 58, 15],
    [/^\;?/, 6],
    [1, 58, 16],
    [".", 17,
     /^\;?/, 6],
    [".", 18],
    [3, "keyword", e[1], 19,
     0, 12],
    [1, 25, 20],
    [1, 25, 8],
    [1, 25, 21],
    [3, "variable package", e[0], 22],
    [3, "def", e[0], 23],
    [1, 58, 14],
    [1, 58, 12],
    [3, "keyword", e[10], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[22], -1,
     3, "keyword", e[41], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[46], -1,
     3, "keyword", e[45], -1,
     3, "keyword", e[24], -1,
     3, "keyword", e[35], -1,
     3, "keyword", e[31], -1,
     3, "keyword", e[38], -1,
     3, "keyword", e[32], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[36], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[39], -1,
     3, "keyword", e[21], -1,
     3, "keyword", e[28], -1,
     3, "variable-2", e[29], -1,
     3, "keyword", e[30], -1,
     3, "keyword", e[34], -1,
     3, "keyword", e[33], -1,
     3, "keyword", e[42], -1,
     3, "keyword", e[43], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[23], -1,
     3, "atom", e[25], -1,
     3, "number", e[26], -1,
     1, 59, -1,
     3, "string-2", e[27], -1,
     3, "operator", e[15], -1,
     1, 74, -1,
     2, 52, -1, {"name":"comment","token":"comment"},
     /^[^]/, -1],
    [e[4], 25,
     2, 52, 25, {"name":"comment","token":"comment"},
     "\n", 25,
     0, -1],
    [3, "meta", e[14], -1,
     1, 76, -1,
     1, 83, -1,
     3, "keyword", e[5], 27,
     3, "keyword", e[6], 40,
     3, "keyword", e[7], 44,
     1, 99, 50,
     ";", -1],
    [1, 25, 28],
    ["(", 29],
    [1, 25, 30],
    [1, 76, 31,
     1, 121, 32],
    [1, 25, 30],
    [1, 25, 33],
    [3, "keyword", e[8], 34],
    [1, 25, 35],
    [1, 99, 36],
    [1, 25, 37],
    [")", 38],
    [1, 25, 39],
    [2, 132, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"}],
    [1, 25, 41],
    [2, 136, 42, {"name":"ParenthesizedExpression"}],
    [1, 25, 43],
    [2, 132, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"},
     ";", -1],
    [1, 25, 45],
    [2, 132, 46, {"name":"Block"},
     2, 26, 46, {"name":"Statement"}],
    [1, 25, 47],
    [3, "keyword", e[6], 48],
    [1, 25, 49],
    [2, 136, -1, {"name":"ParenthesizedExpression"}],
    [1, 58, 51],
    [/^\;?/, -1],
    [/^\/\*\*(?!\/)/, 53,
     1, 74, -1,
     /^\/\/.*/, -1],
    ["/*", 54,
     0, 55,
     2, 141, 53, {"name":"doccomment.link","token":"link"},
     0, 56],
    [e[9], 54,
     "*/", 53],
    [e[20], 57],
    [2, 145, 56, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [0, 55,
     0, 53],
    [e[4], 58,
     2, 52, 58, {"name":"comment","token":"comment"},
     0, -1],
    [3, "string", "\"\"\"", 60,
     3, "string", "\"", 67],
    [2, 158, 60, {"name":"str","token":"string"},
     3, "string", "${", 61,
     3, "string", "$", 62,
     2, 160, 60, {"name":"str","token":"string"},
     3, "string", "\"\"\"", -1],
    [1, 25, 63],
    [1, 25, 64],
    [1, 99, 65],
    [3, "variable", e[0], 60],
    [1, 25, 66],
    [3, "string", "}", 60],
    [2, 158, 67, {"name":"str","token":"string"},
     3, "string", "${", 68,
     3, "string", "$", 69,
     3, "string", /^(?:(?![\"\$\\]).)+/, 67,
     3, "string", "\"", -1],
    [1, 25, 70],
    [1, 25, 71],
    [1, 99, 72],
    [3, "variable", e[0], 67],
    [1, 25, 73],
    [3, "string", "}", 67],
    ["/*", 75],
    [1, 74, 75,
     e[9], 75,
     "*/", -1],
    [2, 162, 77, {"name":"AnnotationHead","token":"meta"}],
    [1, 25, 78],
    [1, 167, -1,
     "[", 79],
    [1, 25, 80],
    [1, 167, 81],
    [1, 25, 82],
    [0, 80,
     "]", -1],
    [1, 177, 84,
     3, "keyword", e[10], 85,
     3, "keyword", e[11], 85,
     1, 178, -1,
     3, "keyword", e[12], 86,
     1, 187, -1,
     1, 204, -1,
     1, 219, -1,
     3, "keyword", e[13], 87],
    [1, 25, 83],
    [1, 25, 88],
    [1, 25, 89],
    [1, 25, 90],
    [3, "type def", e[0], 91],
    [3, "keyword", e[11], 92,
     2, 232, -1, {"name":"FunctionDeclaration"}],
    [3, "type def", e[0], 93],
    [1, 25, 94],
    [1, 25, 95],
    [1, 25, 96],
    [2, 237, -1, {"name":"ClassSpec"}],
    [3, "type def", e[0], 97],
    [2, 250, -1, {"name":"TypeAliasSpec"}],
    [1, 25, 98],
    [2, 237, -1, {"name":"ClassSpec"}],
    [3, "operator", /^(?:\+\+|\-\-|\+|\-|\!)/, 100,
     3, "meta", e[14], 100,
     1, 76, 100,
     1, 257, 101],
    [1, 25, 99],
    [1, 58, 102],
    [3, "operator", /^(?:\+\+|\-\-|\!\!)/, 103,
     [5, 315], 104,
     3, "operator", e[15], 105,
     "!", 106,
     0, 107,
     3, "keyword", e[1], 108,
     2, 316, 103, {"name":"ArgList"},
     0, 109,
     /^(?:\?\.|\.|\:\:)/, 110,
     "[", 111,
     3, "variable callee", [0, [6, 321], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 112,
     0, -1],
    [1, 58, 102],
    [2, 322, 103, {"name":"TypeArgs"}],
    [1, 25, 113],
    [1, 58, 107],
    [3, "keyword", e[8], 105,
     3, "keyword", e[16], 105],
    [1, 58, 114],
    [1, 76, 109,
     2, 327, 103, {"name":"LambdaBlock"}],
    [1, 25, 115],
    [1, 25, 116],
    [1, 25, 117],
    [1, 257, 103],
    ["?", 118,
     0, 105],
    [3, "keyword", e[10], 103,
     3, "property callee", e[37], 103,
     3, "property", e[0], 103,
     2, 136, 103, {"name":"ParenthesizedExpression"}],
    [1, 336, 119],
    [1, 257, 103],
    [1, 58, 105],
    [1, 25, 120],
    ["]", 103],
    ["(", 122,
     0, 126],
    [1, 25, 123],
    [1, 342, 124],
    [1, 25, 125],
    [")", -1],
    [1, 76, 127,
     3, "def", e[0], 128],
    [1, 25, 126],
    [1, 25, 129],
    [":", 130,
     0, -1],
    [1, 25, 131],
    [1, 348, -1],
    ["{", 133],
    [1, 25, 134],
    [2, 26, 135, {"name":"Statement"},
     "}", -1],
    [1, 25, 134],
    ["(", 137],
    [1, 25, 138],
    [1, 99, 139],
    [1, 25, 140],
    [")", -1],
    ["[", 142],
    [[0, /^(?!\])/, /^[^]/], 143],
    [0, 142,
     "]", -1],
    [/^(?:\*\/|\{?\@[a-zA-Z0-9¡-￿_])/, -1,
     2, 141, -1, {"name":"doccomment.link","token":"link"}],
    [3, "tag", /^\@param(?![a-zA-Z0-9¡-￿_])/, 146,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z0-9¡-￿_])/, 147,
     3, "tag", e[19], 154,
     "{", 148],
    [e[17], 146,
     3, "def", e[18], 154,
     "<", 149,
     0, 154],
    [e[17], 147,
     3, "type", e[18], 154,
     0, 154],
    [3, "tag", e[19], 150],
    [3, "type def", /^[a-zA-Z0-9¡-￿_]+/, 151],
    [/^[\t ]*/, 152],
    [">", 154],
    [1, 371, 153],
    ["}", 154],
    ["/*", 155,
     0, 156,
     2, 141, 154, {"name":"doccomment.link","token":"link"},
     0, -1],
    [e[9], 155,
     "*/", 154],
    [e[20], 157],
    [0, 156,
     0, 154],
    ["\\", 159],
    [/^[^]/, -1],
    [[0, /^(?!\"\"\"|\$|\\)/, /^[^]/], 161],
    [0, 160,
     0, -1],
    ["@", 163],
    [1, 58, 164],
    [[0, [5, 375], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 165,
     0, -1],
    [1, 58, 166],
    [":", -1],
    [3, "meta", e[0], 168],
    [1, 25, 169],
    [2, 322, 170, {"name":"TypeArgs"},
     0, 170],
    [1, 25, 171],
    [".", 172,
     2, 316, -1, {"name":"ArgList"},
     0, -1],
    [1, 25, 173],
    [3, "meta", e[0], 174],
    [1, 25, 175],
    [2, 322, 176, {"name":"TypeArgs"},
     0, 176],
    [1, 25, 171],
    [3, "keyword", e[21], -1,
     1, 76, -1],
    [3, "keyword", e[22], 179],
    [1, 25, 180],
    [3, "def", e[0], 181],
    [1, 25, 182],
    [":", 183,
     0, 185],
    [1, 25, 184],
    [1, 378, 185],
    [1, 25, 186],
    [2, 394, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[23], 188],
    [1, 25, 189],
    [2, 398, 190, {"name":"TypeParams"},
     0, 190],
    [1, 25, 191],
    [1, 121, 192],
    [1, 25, 193],
    [3, "keyword", e[24], 194,
     0, 196],
    [1, 25, 195],
    [1, 403, 196],
    [1, 25, 197],
    [3, "operator", "=", 198,
     3, "keyword", e[40], 199,
     0, 202],
    [1, 25, 200],
    [1, 25, 201],
    [1, 99, 202],
    [1, 99, 202],
    [1, 25, 203],
    [/^\;?/, -1],
    [3, "keyword", /^get(?![a-zA-Z¡-￿_0-9])/, 205],
    [1, 25, 206],
    ["(", 207,
     0, 209],
    [1, 25, 208],
    [")", 209],
    [1, 25, 210],
    [":", 211,
     0, 213],
    [1, 25, 212],
    [1, 348, 213],
    [1, 25, 214],
    [2, 132, 217, {"name":"Block"},
     3, "operator", "=", 215],
    [1, 25, 216],
    [1, 99, 217],
    [1, 25, 218],
    [/^\;?/, -1],
    [3, "keyword", /^set(?![a-zA-Z¡-￿_0-9])/, 220],
    [1, 25, 221],
    [2, 419, 222, {"name":"ParamList"},
     0, 222],
    [1, 25, 223],
    [":", 224,
     0, 226],
    [1, 25, 225],
    [1, 348, 226],
    [1, 25, 227],
    [2, 132, 230, {"name":"Block"},
     3, "operator", "=", 228],
    [1, 25, 229],
    [1, 99, 230],
    [1, 25, 231],
    [/^\;?/, -1],
    [2, 398, 233, {"name":"TypeParams"},
     0, 233],
    [1, 25, 234],
    [3, "def", e[0], 235],
    [1, 25, 236],
    [2, 424, -1, {"name":"FunctionSpec"}],
    [2, 398, 238, {"name":"TypeParams"},
     0, 238],
    [1, 25, 239],
    [2, 437, 240, {"name":"Constructor"},
     0, 240],
    [1, 25, 241],
    [":", 242,
     0, 244],
    [1, 25, 243],
    [1, 378, 244],
    [1, 25, 245],
    [3, "keyword", e[24], 246,
     0, 248],
    [1, 25, 247],
    [1, 403, 248],
    [1, 25, 249],
    [2, 394, -1, {"name":"ClassBody"},
     0, -1],
    [2, 398, 251, {"name":"TypeParams"},
     0, 251],
    [1, 25, 252],
    [3, "operator", "=", 253],
    [1, 25, 254],
    [1, 348, 255],
    [1, 25, 256],
    [/^\;?/, -1],
    [2, 136, -1, {"name":"ParenthesizedExpression"},
     3, "atom", e[25], -1,
     3, "number", e[26], -1,
     1, 59, -1,
     3, "string-2", e[27], -1,
     2, 327, -1, {"name":"LambdaBlock"},
     3, "keyword", e[22], 258,
     3, "keyword", e[12], 264,
     3, "keyword", e[28], 266,
     3, "variable-2", e[29], -1,
     3, "keyword", e[30], 270,
     3, "keyword", e[31], 280,
     3, "keyword", e[32], 285,
     3, "keyword", e[33], 300,
     3, "keyword", e[34], 303,
     3, "keyword", e[35], 305,
     3, "keyword", e[36], 311,
     2, 441, -1, {"name":"calleeClassName","token":"callee"},
     3, "type", /^[A-Z][a-zA-Z¡-￿_0-9]*/, -1,
     3, "variable callee", e[37], -1,
     3, "variable", e[0], -1],
    [1, 25, 259],
    [":", 260,
     0, 261],
    [1, 25, 262],
    [2, 394, -1, {"name":"ClassBody"}],
    [1, 378, 263],
    [1, 25, 261],
    [1, 25, 265],
    [2, 424, -1, {"name":"FunctionSpec"}],
    [1, 58, 267],
    ["@", 268,
     0, -1],
    [1, 58, 269],
    [e[0], -1],
    [1, 58, 271],
    ["<", 272,
     0, 273],
    [1, 25, 274],
    ["@", 275,
     0, -1],
    [1, 348, 276],
    [1, 58, 277],
    [1, 25, 278],
    [e[0], -1],
    [">", 279],
    [1, 58, 273],
    [1, 25, 281],
    [2, 136, 282, {"name":"ParenthesizedExpression"}],
    [1, 25, 283],
    [2, 132, 284, {"name":"Block"},
     2, 26, 284, {"name":"Statement"},
     ";", 284],
    [2, 442, -1, {"name":"Alternative"}],
    [1, 25, 286],
    ["(", 287],
    [1, 25, 288],
    [1, 76, 289,
     3, "keyword", /^val(?![a-zA-Z¡-￿_0-9])/, 290,
     0, 291],
    [1, 25, 288],
    [1, 25, 292],
    [1, 25, 293],
    [1, 121, 294],
    [1, 99, 295],
    [1, 25, 296],
    [1, 25, 297],
    [3, "operator", "=", 291],
    [")", 298],
    [1, 25, 299],
    [2, 447, -1, {"name":"WhenBody"}],
    [1, 25, 301],
    [2, 132, 302, {"name":"Block"}],
    [2, 456, -1, {"name":"CatchFinally"}],
    [1, 58, 304],
    [1, 99, -1],
    [1, 58, 306],
    ["@", 307,
     0, 308],
    [1, 58, 309],
    [1, 99, -1,
     0, -1],
    [e[0], 310],
    [1, 58, 308],
    [1, 58, 312],
    ["@", 313,
     0, -1],
    [1, 58, 314],
    [e[0], -1],
    [2, 322, -1, {"name":"TypeArgs"}],
    ["(", 317],
    [1, 25, 318],
    [1, 476, 319,
     0, 319],
    [1, 25, 320],
    [")", -1],
    [3, "keyword", e[38], -1],
    ["<", 323],
    [1, 25, 324],
    [1, 496, 325],
    [1, 25, 326],
    [">", -1],
    ["{", 328],
    [1, 25, 329],
    [[5, 506], 330,
     0, 333],
    [1, 509, 331],
    [1, 25, 332],
    [3, "operator", "->", 333],
    [1, 25, 334],
    [2, 26, 335, {"name":"Statement"},
     "}", -1],
    [1, 25, 334],
    [1, 99, 337],
    [1, 58, 338],
    [",", 339,
     0, -1],
    [1, 25, 340],
    [1, 99, 341,
     0, 338],
    [1, 58, 338],
    [1, 121, 343],
    [1, 58, 344],
    [",", 345,
     0, -1],
    [1, 25, 346],
    [1, 121, 347,
     0, 344],
    [1, 58, 344],
    [1, 76, 349,
     3, "keyword", /^suspend(?![a-zA-Z¡-￿_0-9])/, 349,
     3, "keyword", e[39], 368,
     3, "type", e[0], 350,
     [5, 523], 351,
     "(", 352],
    [1, 25, 348],
    [1, 58, 353],
    [2, 530, 354, {"name":"ParamTypeList"}],
    [1, 25, 355],
    [2, 322, 356, {"name":"TypeArgs"},
     0, 357],
    [1, 25, 358],
    [1, 348, 359],
    [1, 58, 357],
    [".", 360,
     0, 368],
    [3, "operator", "->", 361],
    [1, 25, 362],
    [1, 25, 363],
    [1, 25, 364],
    [")", 368],
    [3, "type", e[0], 365],
    [1, 348, 368],
    [1, 58, 366],
    [2, 322, 367, {"name":"TypeArgs"},
     0, 357],
    [1, 58, 357],
    [1, 58, 369],
    ["?", 370,
     0, -1],
    [1, 58, 369],
    [3, "attribute", "{", 372,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 371,
     "\n", 373,
     0, -1],
    [1, 371, 374],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 371],
    [/^(?=\*\/)/, 371,
     3, "attribute", "}", 371],
    [e[0], 376],
    [1, 58, 377],
    [":", -1],
    [1, 177, 379,
     1, 348, 380],
    [1, 25, 378],
    [1, 25, 381],
    [3, "keyword", e[40], 382,
     2, 316, 384, {"name":"ArgList"},
     0, 384],
    [1, 25, 383],
    [1, 99, 384],
    [1, 58, 385],
    [",", 386,
     0, -1],
    [1, 25, 387],
    [1, 177, 388,
     1, 348, 389,
     0, 385],
    [1, 25, 387],
    [1, 25, 390],
    [3, "keyword", e[40], 391,
     2, 316, 392, {"name":"ArgList"},
     0, 392],
    [1, 25, 393],
    [1, 58, 385],
    [1, 99, 392],
    ["{", 395],
    [1, 25, 396],
    [2, 535, 397, {"name":"ClassItem"},
     "}", -1],
    [1, 25, 396],
    ["<", 399],
    [1, 25, 400],
    [1, 566, 401],
    [1, 25, 402],
    [">", -1],
    [1, 76, 404,
     3, "variable", e[0], 405],
    [1, 25, 403],
    [1, 25, 406],
    [":", 407],
    [1, 25, 408],
    [1, 348, 409],
    [1, 58, 410],
    [",", 411,
     0, -1],
    [1, 25, 412],
    [1, 76, 413,
     3, "variable", e[0], 414,
     0, 410],
    [1, 25, 412],
    [1, 25, 415],
    [":", 416],
    [1, 25, 417],
    [1, 348, 418],
    [1, 58, 410],
    ["(", 420],
    [1, 25, 421],
    [1, 582, 422,
     0, 422],
    [1, 25, 423],
    [")", -1],
    [2, 419, 425, {"name":"ParamList"}],
    [1, 25, 426],
    [":", 427,
     0, 429],
    [1, 25, 428],
    [1, 348, 429],
    [1, 25, 430],
    [3, "keyword", e[24], 431,
     0, 433],
    [1, 25, 432],
    [1, 403, 433],
    [1, 25, 434],
    [2, 132, -1, {"name":"Block"},
     3, "operator", "=", 435,
     0, -1],
    [1, 25, 436],
    [1, 99, -1],
    [1, 177, 438,
     3, "keyword", e[41], 439,
     0, 439],
    [1, 25, 437],
    [1, 25, 440],
    [2, 606, -1, {"name":"ConstructorParamList"}],
    [3, "type", /^[A-Z][a-zA-Z¡-￿_0-9]*(?= *[\(\{])/, -1],
    [[5, 611], 443,
     0, -1],
    [1, 25, 444],
    [3, "keyword", e[38], 445],
    [1, 25, 446],
    [2, 132, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"},
     ";", -1],
    ["{", 448],
    [1, 25, 449],
    [3, "keyword", e[38], 450,
     1, 613, 450],
    [1, 25, 451],
    [3, "operator", "->", 452],
    [1, 25, 453],
    [2, 132, 454, {"name":"Block"},
     2, 26, 454, {"name":"Statement"},
     ";", 454],
    [1, 25, 455],
    ["}", -1],
    [[5, 639], 457,
     [5, 641], 472,
     0, -1],
    [1, 25, 458],
    [3, "keyword", e[42], 459],
    [1, 25, 460],
    ["(", 461],
    [1, 25, 462],
    [1, 76, 463,
     3, "def", e[0], 464],
    [1, 25, 462],
    [1, 25, 465],
    [":", 466],
    [1, 25, 467],
    [1, 348, 468],
    [1, 25, 469],
    [")", 470],
    [1, 25, 471],
    [2, 132, 456, {"name":"Block"}],
    [1, 25, 473],
    [3, "keyword", e[43], 474],
    [1, 25, 475],
    [2, 132, -1, {"name":"Block"}],
    [1, 76, 477,
     [0, [5, 643], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 478,
     0, 479],
    [1, 25, 476],
    [1, 25, 480],
    [1, 25, 481],
    [3, "operator", "=", 479],
    [/^\*?/, 482],
    [1, 25, 483],
    [1, 99, 484],
    [1, 58, 485],
    [",", 486,
     0, -1],
    [1, 25, 487],
    [1, 76, 488,
     [0, [5, 646], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 489,
     0, 490,
     0, 485],
    [1, 25, 487],
    [1, 25, 491],
    [1, 25, 492],
    [3, "operator", "=", 490],
    [/^\*?/, 493],
    [1, 25, 494],
    [1, 99, 495],
    [1, 58, 485],
    ["*", 499,
     0, 497],
    [1, 76, 498,
     3, "keyword", e[44], 498,
     1, 348, 499],
    [1, 25, 497],
    [1, 58, 500],
    [",", 501,
     0, -1],
    [1, 25, 502],
    ["*", 503,
     0, 504,
     0, 500],
    [1, 58, 500],
    [1, 76, 505,
     3, "keyword", e[44], 505,
     1, 348, 503],
    [1, 25, 504],
    [1, 509, 507],
    [1, 25, 508],
    [3, "operator", "->", -1],
    [3, "def", e[0], 510],
    [1, 25, 511],
    [":", 512,
     0, 514],
    [1, 25, 513],
    [1, 348, 514],
    [1, 58, 515],
    [",", 516,
     0, -1],
    [1, 25, 517],
    [3, "def", e[0], 518,
     0, 515],
    [1, 25, 519],
    [":", 520,
     0, 521],
    [1, 25, 522],
    [1, 58, 515],
    [1, 348, 521],
    ["(", 524],
    [1, 25, 525],
    [2, 162, -1, {"name":"AnnotationHead","token":"meta"},
     e[0], 526],
    [1, 25, 527],
    [")", 528,
     ":", -1],
    [1, 25, 529],
    ["->", -1],
    ["(", 531],
    [1, 25, 532],
    [1, 649, 533,
     0, 533],
    [1, 25, 534],
    [")", -1],
    [1, 76, -1,
     1, 663, -1,
     3, "keyword", e[45], 536,
     3, "keyword", e[46], 546,
     3, "keyword", e[41], 548,
     0, 558],
    [1, 25, 537],
    [3, "keyword", e[22], 538],
    [1, 25, 539],
    [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)?/, 540],
    [1, 25, 541],
    [":", 542,
     0, 543],
    [1, 25, 544],
    [1, 25, 545],
    [1, 378, 543],
    [2, 394, -1, {"name":"ClassBody"},
     0, -1],
    [1, 25, 547],
    [2, 132, -1, {"name":"Block"}],
    [1, 25, 549],
    [2, 419, 550, {"name":"ParamList"}],
    [1, 25, 551],
    [":", 552,
     0, 553],
    [1, 25, 554],
    [1, 25, 555],
    [3, "keyword", e[28], 556,
     3, "keyword", e[30], 556],
    [2, 132, -1, {"name":"Block"},
     0, -1],
    [1, 25, 557],
    [2, 316, 553, {"name":"ArgList"}],
    [1, 177, 559,
     3, "def property", e[0], 560],
    [1, 25, 558],
    [1, 25, 561],
    [2, 316, 562, {"name":"ArgList"},
     0, 562],
    [1, 25, 563],
    [2, 394, 564, {"name":"ClassBody"},
     0, 564],
    [1, 25, 565],
    [/^[\,\;]/, -1],
    [1, 177, 567,
     3, "type def", e[0], 568],
    [1, 25, 566],
    [1, 25, 569],
    [":", 570,
     0, 572],
    [1, 25, 571],
    [1, 348, 572],
    [1, 58, 573],
    [",", 574,
     0, -1],
    [1, 25, 575],
    [1, 177, 576,
     3, "type def", e[0], 577,
     0, 573],
    [1, 25, 575],
    [1, 25, 578],
    [":", 579,
     0, 580],
    [1, 25, 581],
    [1, 58, 573],
    [1, 348, 580],
    [1, 177, 583,
     3, "def", e[0], 584],
    [1, 25, 582],
    [1, 25, 585],
    [":", 586,
     0, 587],
    [1, 25, 588],
    [1, 25, 589],
    [1, 348, 587],
    [3, "operator", "=", 590,
     0, 592],
    [1, 25, 591],
    [1, 99, 592],
    [1, 58, 593],
    [",", 594,
     0, -1],
    [1, 25, 595],
    [1, 177, 596,
     3, "def", e[0], 597,
     0, 593],
    [1, 25, 595],
    [1, 25, 598],
    [":", 599,
     0, 600],
    [1, 25, 601],
    [1, 25, 602],
    [1, 348, 600],
    [3, "operator", "=", 603,
     0, 604],
    [1, 25, 605],
    [1, 58, 593],
    [1, 99, 604],
    ["(", 607],
    [1, 25, 608],
    [1, 679, 609,
     0, 609],
    [1, 25, 610],
    [")", -1],
    [1, 25, 612],
    [3, "keyword", e[38], -1],
    [[5, 707], 614,
     [5, 710], 615,
     1, 99, 624],
    [3, "operator", "!", 616,
     0, 616],
    [3, "operator", "!", 617,
     0, 617],
    [1, 25, 618],
    [1, 25, 619],
    [3, "keyword", e[8], 620],
    [3, "keyword", e[16], 621],
    [1, 25, 622],
    [1, 25, 623],
    [1, 99, 624],
    [1, 348, 624],
    [1, 58, 625],
    [",", 626,
     0, -1],
    [1, 25, 627],
    [[5, 713], 628,
     [5, 716], 629,
     1, 99, 630,
     0, 625],
    [3, "operator", "!", 631,
     0, 631],
    [3, "operator", "!", 632,
     0, 632],
    [1, 58, 625],
    [1, 25, 633],
    [1, 25, 634],
    [3, "keyword", e[8], 635],
    [3, "keyword", e[16], 636],
    [1, 25, 637],
    [1, 25, 638],
    [1, 99, 630],
    [1, 348, 630],
    [1, 25, 640],
    [3, "keyword", e[42], -1],
    [1, 25, 642],
    [3, "keyword", e[43], -1],
    [e[0], 644],
    [1, 25, 645],
    ["=", -1],
    [e[0], 647],
    [1, 25, 648],
    ["=", -1],
    [[0, [5, 719], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 650,
     0, 651],
    [1, 25, 652],
    [1, 25, 653],
    [":", 651],
    [1, 348, 654],
    [1, 58, 655],
    [",", 656,
     0, -1],
    [1, 25, 657],
    [[0, [5, 722], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 658,
     0, 659,
     0, 655],
    [1, 25, 660],
    [1, 25, 661],
    [":", 659],
    [1, 348, 662],
    [1, 58, 655],
    [1, 177, 664,
     3, "keyword", e[10], 665,
     3, "keyword", e[11], 665,
     1, 725, -1,
     3, "keyword", e[12], 666,
     1, 734, -1,
     1, 204, -1,
     1, 219, -1,
     3, "keyword", e[13], 667],
    [1, 25, 663],
    [1, 25, 668],
    [1, 25, 669],
    [1, 25, 670],
    [3, "type def", e[0], 671],
    [3, "keyword", e[11], 672,
     2, 751, -1, {"name":"FunctionDeclaration"}],
    [3, "type def", e[0], 673],
    [1, 25, 674],
    [1, 25, 675],
    [1, 25, 676],
    [2, 237, -1, {"name":"ClassSpec"}],
    [3, "type def", e[0], 677],
    [2, 250, -1, {"name":"TypeAliasSpec"}],
    [1, 25, 678],
    [2, 237, -1, {"name":"ClassSpec"}],
    [1, 177, 680,
     3, "keyword", e[23], 681,
     3, "def", e[0], 682],
    [1, 25, 679],
    [1, 25, 683],
    [1, 25, 684],
    [3, "def property", e[0], 682],
    [":", 685,
     0, 686],
    [1, 25, 687],
    [1, 25, 688],
    [1, 348, 686],
    [3, "operator", "=", 689,
     0, 691],
    [1, 25, 690],
    [1, 99, 691],
    [1, 58, 692],
    [",", 693,
     0, -1],
    [1, 25, 694],
    [1, 177, 695,
     3, "keyword", e[23], 696,
     3, "def", e[0], 697,
     0, 692],
    [1, 25, 694],
    [1, 25, 698],
    [1, 25, 699],
    [3, "def property", e[0], 697],
    [":", 700,
     0, 701],
    [1, 25, 702],
    [1, 25, 703],
    [1, 348, 701],
    [3, "operator", "=", 704,
     0, 705],
    [1, 25, 706],
    [1, 58, 692],
    [1, 99, 705],
    [/^\!?/, 708],
    [1, 25, 709],
    [3, "keyword", e[8], -1],
    [/^\!?/, 711],
    [1, 25, 712],
    [3, "keyword", e[16], -1],
    [/^\!?/, 714],
    [1, 25, 715],
    [3, "keyword", e[8], -1],
    [/^\!?/, 717],
    [1, 25, 718],
    [3, "keyword", e[16], -1],
    [e[0], 720],
    [1, 25, 721],
    [":", -1],
    [e[0], 723],
    [1, 25, 724],
    [":", -1],
    [3, "keyword", e[22], 726],
    [1, 25, 727],
    [3, "def property", e[0], 728],
    [1, 25, 729],
    [":", 730,
     0, 732],
    [1, 25, 731],
    [1, 378, 732],
    [1, 25, 733],
    [2, 394, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[23], 735],
    [1, 25, 736],
    [2, 398, 737, {"name":"TypeParams"},
     0, 737],
    [1, 25, 738],
    [1, 756, 739],
    [1, 25, 740],
    [3, "keyword", e[24], 741,
     0, 743],
    [1, 25, 742],
    [1, 403, 743],
    [1, 25, 744],
    [3, "operator", "=", 745,
     3, "keyword", e[40], 746,
     0, 749],
    [1, 25, 747],
    [1, 25, 748],
    [1, 99, 749],
    [1, 99, 749],
    [1, 25, 750],
    [/^\;?/, -1],
    [2, 398, 752, {"name":"TypeParams"},
     0, 752],
    [1, 25, 753],
    [3, "def property", e[0], 754],
    [1, 25, 755],
    [2, 424, -1, {"name":"FunctionSpec"}],
    ["(", 757,
     0, 761],
    [1, 25, 758],
    [1, 767, 759],
    [1, 25, 760],
    [")", -1],
    [1, 76, 762,
     3, "def property", e[0], 763],
    [1, 25, 761],
    [1, 25, 764],
    [":", 765,
     0, -1],
    [1, 25, 766],
    [1, 348, -1],
    [1, 756, 768],
    [1, 58, 769],
    [",", 770,
     0, -1],
    [1, 25, 771],
    [1, 756, 772,
     0, 769],
    [1, 58, 769]
  ];
  var start = 0;
  var token = 24;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }
  function isLocalType(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var typeRE = /(^|\s)type($|\s)/;

  function markTypeLocals(type, scopes, stream, state) {
    if (type == "type def") {
      var scope = getScope(state.context, scopes);
      if (scope) {
        if (!scope.localTypes) { scope.localTypes = []; }
        scope.localTypes.push(stream.current());
      }
    } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
               isLocalType(state.context, stream.current())) {
      type += " local";
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}",
    ObjectPattern: "}", EnumBody: "}", LambdaBlock: "}", WhenBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    ParenthesizedExpression: ")", ConstructorParamList: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && (!config.dontAlign || config.dontAlign.indexOf(cx.name) < 0) && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && (config.dontCloseBrackets || "").indexOf(brack) < 0) { return base }
      return base + config.indentUnit * ((config.doubleIndentBrackets || "").indexOf(brack) < 0 ? 1 : 2)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^((else|catch|finally)\b|\/[\/\*])/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template" || top == "str")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    var passLine = config.forceContent && /^\s*(\/\/.*)?$/.test(line) ? "x" : line;
    return findIndent(state.contextAt(passLine, line.length - textAfter.length), textAfter, config)
  }

  var scopes = ["Block", "FunctionSpec", "LambdaBlock", "ClassSpec", "TypeAliasSpec", "ForStatement", "CatchFinally"];
  var typeScopes = ["FunctionDeclaration", "ClassSpec", "TypeAliasSpec"];

  var KotlinMode = /*@__PURE__*/(function (superclass) {
    function KotlinMode(conf, modeConf) {
      superclass.call(this, grammar);
      this.indentConf = {tabSize: conf.tabSize, indentUnit: conf.indentUnit, forceContent: true, dontAlign: ["LambdaBlock"]};
    }

    if ( superclass ) KotlinMode.__proto__ = superclass;
    KotlinMode.prototype = Object.create( superclass && superclass.prototype );
    KotlinMode.prototype.constructor = KotlinMode;

    KotlinMode.prototype.token = function token$$1 (stream, state) {
      return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
    };

    KotlinMode.prototype.indent = function indent$1 (state, textAfter, line) {
      return indent(state, textAfter, line, this.indentConf)
    };

    return KotlinMode;
  }(CodeMirror.GrammarMode));

  var meta = {
    electricInput: /^\s*[{}]$/,
    blockCommentStart: "/*",
    blockCommentEnd: "*/",
    blockCommentContinue: " * ",
    lineComment: "//",
    fold: "brace",
    closeBrackets: "()[]{}''\"\"``"
  };
  for (var prop in meta) { KotlinMode.prototype[prop] = meta[prop]; }

  CodeMirror.defineMode("google-kotlin", function (conf, modeConf) { return new KotlinMode(conf, modeConf); });

})));
