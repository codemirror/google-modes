(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () {
              return e[k];
            }
          });
        }
      });
    }
    n['default'] = e;
    return Object.freeze(n);
  }

  var CodeMirror__namespace = /*#__PURE__*/_interopNamespace(CodeMirror);

  var e = [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/, /^as(?![a-zA-Z¡-￿_0-9])/, /^package(?![a-zA-Z¡-￿_0-9])/, /^import(?![a-zA-Z¡-￿_0-9])/, /^[ \t\r]+/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^in(?![a-zA-Z¡-￿_0-9])/, [0, /^(?!\*\/)/, /^[^]/], /^interface(?![a-zA-Z¡-￿_0-9])/, /^fun(?![a-zA-Z¡-￿_0-9])/, /^typealias(?![a-zA-Z¡-￿_0-9])/, /^class(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)\@/, /^(?:\.\.|\?\:|[\+\-\*\/\%\<\>]\=?|[\!\=]\=\=?|\=|\&\&|\|\|)/, [0, "\n", [5, 317]], /^is(?![a-zA-Z¡-￿_0-9])/, [1, "\n", "\t", " "], /^[a-zA-Z0-9¡-￿_\.]+/, /^\@[a-zA-Z0-9¡-￿_]+/, [0, [6, 146], /^[^]/], /^(?:enum|sealed|annotation|data|inner|override|lateinit|public|private|internal|protected|tailrec|operator|infix|inline|external|extend|const|abstract|final|open|vararg|noinline|crossinline|reified|expect|actual|suspend)(?![a-zA-Z¡-￿_0-9])/, /^object(?![a-zA-Z¡-￿_0-9])/, /^(?:val|var)(?![a-zA-Z¡-￿_0-9])/, /^where(?![a-zA-Z¡-￿_0-9])/, /^(?:true|false|null)(?![a-zA-Z¡-￿_0-9])/, /^(?:(?:0x|0X)[0-9_a-fA-F]+|(?:0b|0B)[01_]+|(?:[0-9][0-9_]*(?:\.[0-9_]*)?|\.[0-9_]+)(?:[eE][\+\-]?[0-9_]+)?)[uU]?L?/, /^\'(?:\\.(?:(?!\').)*|.)\'/, /^this(?![a-zA-Z¡-￿_0-9])/, /^it(?![a-zA-Z¡-￿_0-9])/, /^super(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^when(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *[\(\{])/, /^(?:\?\.|\.|\:\:)/, /^else(?![a-zA-Z¡-￿_0-9])/, /^dynamic(?![a-zA-Z¡-￿_0-9])/, /^by(?![a-zA-Z¡-￿_0-9])/, /^constructor(?![a-zA-Z¡-￿_0-9])/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^finally(?![a-zA-Z¡-￿_0-9])/, /^(?:in|out)(?![a-zA-Z¡-￿_0-9])/, /^companion(?![a-zA-Z¡-￿_0-9])/, /^init(?![a-zA-Z¡-￿_0-9])/, /^value(?![a-zA-Z¡-￿_0-9])/];
  var nodes = [
    [3, "meta", /^\#\!.*/, 2,
     0, 2],
    [/^[^]/, 0],
    [1, 25, 3],
    [3, "keyword", e[2], 4,
     3, "keyword", e[3], 5,
     2, 26, 6, {"name":"Statement"}],
    [1, 25, 7],
    [1, 25, 8],
    [e[4], 6,
     2, 52, 6, {"name":"comment","token":"comment"},
     "\n", 6,
     0, 9],
    [3, "variable package", e[0], 10],
    [3, "variable package", /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *\.)/, 11,
     "*", 12,
     3, "def", e[0], 13],
    [0, 3,
     0, 1],
    [1, 58, 14],
    [1, 58, 15],
    [/^\;?/, 6],
    [1, 58, 16],
    [".", 17,
     /^\;?/, 6],
    [".", 18],
    [3, "keyword", e[1], 19,
     0, 12],
    [1, 25, 20],
    [1, 25, 8],
    [1, 25, 21],
    [3, "variable package", e[0], 22],
    [3, "def", e[0], 23],
    [1, 58, 14],
    [1, 58, 12],
    [3, "keyword", e[13], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[23], -1,
     3, "keyword", e[43], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[48], -1,
     3, "keyword", e[47], -1,
     3, "keyword", e[25], -1,
     3, "keyword", e[36], -1,
     3, "keyword", e[32], -1,
     3, "keyword", e[40], -1,
     3, "keyword", e[33], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[17], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[41], -1,
     3, "keyword", e[22], -1,
     3, "keyword", e[29], -1,
     3, "variable-2", e[30], -1,
     3, "keyword", e[31], -1,
     3, "keyword", e[35], -1,
     3, "keyword", e[34], -1,
     3, "keyword", e[44], -1,
     3, "keyword", e[45], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[24], -1,
     3, "atom", e[26], -1,
     3, "number", e[27], -1,
     1, 59, -1,
     3, "string-2", e[28], -1,
     3, "operator", e[15], -1,
     1, 74, -1,
     2, 52, -1, {"name":"comment","token":"comment"},
     /^[^]/, -1],
    [e[4], 25,
     2, 52, 25, {"name":"comment","token":"comment"},
     "\n", 25,
     0, -1],
    [3, "meta", e[14], -1,
     1, 76, -1,
     1, 83, -1,
     3, "keyword", e[5], 27,
     3, "keyword", e[6], 40,
     3, "keyword", e[7], 44,
     1, 101, 50,
     ";", -1],
    [1, 25, 28],
    ["(", 29],
    [1, 25, 30],
    [1, 76, 31,
     1, 123, 32],
    [1, 25, 30],
    [1, 25, 33],
    [3, "keyword", e[8], 34],
    [1, 25, 35],
    [1, 101, 36],
    [1, 25, 37],
    [")", 38],
    [1, 25, 39],
    [2, 134, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"}],
    [1, 25, 41],
    [2, 138, 42, {"name":"ParenthesizedExpression"}],
    [1, 25, 43],
    [2, 134, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"},
     ";", -1],
    [1, 25, 45],
    [2, 134, 46, {"name":"Block"},
     2, 26, 46, {"name":"Statement"}],
    [1, 25, 47],
    [3, "keyword", e[6], 48],
    [1, 25, 49],
    [2, 138, -1, {"name":"ParenthesizedExpression"}],
    [1, 58, 51],
    [/^\;?/, -1],
    [/^\/\*\*(?!\/)/, 53,
     1, 74, -1,
     /^\/\/.*/, -1],
    ["/*", 54,
     0, 55,
     2, 143, 53, {"name":"doccomment.link","token":"link"},
     0, 56],
    [e[9], 54,
     "*/", 53],
    [e[21], 57],
    [2, 147, 56, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [0, 55,
     0, 53],
    [e[4], 58,
     2, 52, 58, {"name":"comment","token":"comment"},
     0, -1],
    [3, "string", "\"\"\"", 60,
     3, "string", "\"", 67],
    [2, 160, 60, {"name":"str","token":"string"},
     3, "string", "${", 61,
     3, "string", "$", 62,
     2, 162, 60, {"name":"str","token":"string"},
     3, "string", "\"\"\"", -1],
    [1, 25, 63],
    [1, 25, 64],
    [1, 101, 65],
    [3, "variable", e[0], 60],
    [1, 25, 66],
    [3, "string", "}", 60],
    [2, 160, 67, {"name":"str","token":"string"},
     3, "string", "${", 68,
     3, "string", "$", 69,
     3, "string", /^(?:(?![\"\$\\]).)+/, 67,
     3, "string", "\"", -1],
    [1, 25, 70],
    [1, 25, 71],
    [1, 101, 72],
    [3, "variable", e[0], 67],
    [1, 25, 73],
    [3, "string", "}", 67],
    ["/*", 75],
    [1, 74, 75,
     e[9], 75,
     "*/", -1],
    [2, 164, 77, {"name":"AnnotationHead","token":"meta"}],
    [1, 25, 78],
    [1, 169, -1,
     "[", 79],
    [1, 25, 80],
    [1, 169, 81],
    [1, 25, 82],
    [0, 80,
     "]", -1],
    [1, 179, 84,
     3, "keyword", e[49], 85,
     0, 85,
     3, "keyword", e[10], 86,
     1, 180, -1,
     3, "keyword", e[11], 87,
     1, 189, -1,
     1, 206, -1,
     1, 221, -1,
     3, "keyword", e[12], 88],
    [1, 25, 83],
    [1, 25, 89],
    [1, 25, 90],
    [1, 25, 91],
    [1, 25, 92],
    [3, "keyword", e[13], 86],
    [3, "type def", e[0], 93],
    [3, "keyword", e[10], 94,
     2, 234, -1, {"name":"FunctionDeclaration"}],
    [3, "type def", e[0], 95],
    [1, 25, 96],
    [1, 25, 97],
    [1, 25, 98],
    [2, 239, -1, {"name":"ClassSpec"}],
    [3, "type def", e[0], 99],
    [2, 252, -1, {"name":"TypeAliasSpec"}],
    [1, 25, 100],
    [2, 239, -1, {"name":"ClassSpec"}],
    [3, "operator", /^(?:\+\+|\-\-|\+|\-|\!)/, 102,
     3, "meta", e[14], 102,
     1, 76, 102,
     1, 259, 103],
    [1, 25, 101],
    [e[4], 103,
     2, 52, 103, {"name":"comment","token":"comment"},
     e[16], 103,
     0, 104],
    [3, "operator", /^(?:\+\+|\-\-|\!\!)/, 105,
     [5, 319], 106,
     3, "operator", e[15], 107,
     "!", 108,
     0, 109,
     3, "keyword", e[1], 110,
     2, 320, 105, {"name":"ArgList"},
     0, 111,
     e[39], 112,
     "[", 113,
     3, "variable callee", [0, [6, 325], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 114,
     0, -1],
    [e[4], 105,
     2, 52, 105, {"name":"comment","token":"comment"},
     e[16], 105,
     0, 104],
    [2, 326, 105, {"name":"TypeArgs"}],
    [1, 25, 115],
    [1, 58, 109],
    [3, "keyword", e[8], 107,
     3, "keyword", e[17], 107],
    [1, 58, 116],
    [1, 76, 111,
     2, 331, 105, {"name":"LambdaBlock"}],
    [1, 25, 117],
    [1, 25, 118],
    [1, 25, 119],
    [1, 259, 105],
    ["?", 120,
     0, 107],
    [3, "keyword", e[13], 105,
     3, "property callee", e[38], 105,
     3, "property", e[0], 105,
     2, 138, 105, {"name":"ParenthesizedExpression"}],
    [1, 340, 121],
    [1, 259, 105],
    [1, 58, 107],
    [1, 25, 122],
    ["]", 105],
    ["(", 124,
     0, 128],
    [1, 25, 125],
    [1, 346, 126],
    [1, 25, 127],
    [")", -1],
    [1, 76, 129,
     3, "def", e[0], 130],
    [1, 25, 128],
    [1, 25, 131],
    [":", 132,
     0, -1],
    [1, 25, 133],
    [1, 352, -1],
    ["{", 135],
    [1, 25, 136],
    [2, 26, 137, {"name":"Statement"},
     "}", -1],
    [1, 25, 136],
    ["(", 139],
    [1, 25, 140],
    [1, 101, 141],
    [1, 25, 142],
    [")", -1],
    ["[", 144],
    [[0, /^(?!\])/, /^[^]/], 145],
    [0, 144,
     "]", -1],
    [/^(?:\*\/|\{?\@[a-zA-Z0-9¡-￿_])/, -1,
     2, 143, -1, {"name":"doccomment.link","token":"link"}],
    [3, "tag", /^\@param(?![a-zA-Z0-9¡-￿_])/, 148,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z0-9¡-￿_])/, 149,
     3, "tag", e[20], 156,
     "{", 150],
    [e[18], 148,
     3, "def", e[19], 156,
     "<", 151,
     0, 156],
    [e[18], 149,
     3, "type", e[19], 156,
     0, 156],
    [3, "tag", e[20], 152],
    [3, "type def", /^[a-zA-Z0-9¡-￿_]+/, 153],
    [/^[\t ]*/, 154],
    [">", 156],
    [1, 375, 155],
    ["}", 156],
    ["/*", 157,
     0, 158,
     2, 143, 156, {"name":"doccomment.link","token":"link"},
     0, -1],
    [e[9], 157,
     "*/", 156],
    [e[21], 159],
    [0, 158,
     0, 156],
    ["\\", 161],
    [/^[^]/, -1],
    [[0, /^(?!\"\"\"|\$|\\)/, /^[^]/], 163],
    [0, 162,
     0, -1],
    ["@", 165],
    [1, 58, 166],
    [[0, [5, 379], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 167,
     0, -1],
    [1, 58, 168],
    [":", -1],
    [3, "meta", e[0], 170],
    [1, 25, 171],
    [2, 326, 172, {"name":"TypeArgs"},
     0, 172],
    [1, 25, 173],
    [".", 174,
     2, 320, -1, {"name":"ArgList"},
     0, -1],
    [1, 25, 175],
    [3, "meta", e[0], 176],
    [1, 25, 177],
    [2, 326, 178, {"name":"TypeArgs"},
     0, 178],
    [1, 25, 173],
    [3, "keyword", e[22], -1,
     1, 76, -1],
    [3, "keyword", e[23], 181],
    [1, 25, 182],
    [3, "def", e[0], 183],
    [1, 25, 184],
    [":", 185,
     0, 187],
    [1, 25, 186],
    [1, 382, 187],
    [1, 25, 188],
    [2, 398, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[24], 190],
    [1, 25, 191],
    [2, 402, 192, {"name":"TypeParams"},
     0, 192],
    [1, 25, 193],
    [1, 123, 194],
    [1, 25, 195],
    [3, "keyword", e[25], 196,
     0, 198],
    [1, 25, 197],
    [1, 407, 198],
    [1, 25, 199],
    [3, "operator", "=", 200,
     3, "keyword", e[42], 201,
     0, 204],
    [1, 25, 202],
    [1, 25, 203],
    [1, 101, 204],
    [1, 101, 204],
    [1, 25, 205],
    [/^\;?/, -1],
    [3, "keyword", /^get(?![a-zA-Z¡-￿_0-9])/, 207],
    [1, 25, 208],
    ["(", 209,
     0, 211],
    [1, 25, 210],
    [")", 211],
    [1, 25, 212],
    [":", 213,
     0, 215],
    [1, 25, 214],
    [1, 352, 215],
    [1, 25, 216],
    [2, 134, 219, {"name":"Block"},
     3, "operator", "=", 217],
    [1, 25, 218],
    [1, 101, 219],
    [1, 25, 220],
    [/^\;?/, -1],
    [3, "keyword", /^set(?![a-zA-Z¡-￿_0-9])/, 222],
    [1, 25, 223],
    [2, 423, 224, {"name":"ParamList"},
     0, 224],
    [1, 25, 225],
    [":", 226,
     0, 228],
    [1, 25, 227],
    [1, 352, 228],
    [1, 25, 229],
    [2, 134, 232, {"name":"Block"},
     3, "operator", "=", 230],
    [1, 25, 231],
    [1, 101, 232],
    [1, 25, 233],
    [/^\;?/, -1],
    [2, 402, 235, {"name":"TypeParams"},
     0, 235],
    [1, 25, 236],
    [3, "def", e[0], 237],
    [1, 25, 238],
    [2, 428, -1, {"name":"FunctionSpec"}],
    [2, 402, 240, {"name":"TypeParams"},
     0, 240],
    [1, 25, 241],
    [2, 441, 242, {"name":"Constructor"},
     0, 242],
    [1, 25, 243],
    [":", 244,
     0, 246],
    [1, 25, 245],
    [1, 382, 246],
    [1, 25, 247],
    [3, "keyword", e[25], 248,
     0, 250],
    [1, 25, 249],
    [1, 407, 250],
    [1, 25, 251],
    [2, 398, -1, {"name":"ClassBody"},
     0, -1],
    [2, 402, 253, {"name":"TypeParams"},
     0, 253],
    [1, 25, 254],
    [3, "operator", "=", 255],
    [1, 25, 256],
    [1, 352, 257],
    [1, 25, 258],
    [/^\;?/, -1],
    [2, 138, -1, {"name":"ParenthesizedExpression"},
     3, "atom", e[26], -1,
     3, "number", e[27], -1,
     1, 59, -1,
     3, "string-2", e[28], -1,
     2, 331, -1, {"name":"LambdaBlock"},
     3, "keyword", e[23], 260,
     3, "keyword", e[11], 266,
     3, "keyword", e[29], 268,
     3, "variable-2", e[30], -1,
     3, "keyword", e[31], 272,
     3, "keyword", e[32], 282,
     3, "keyword", e[33], 287,
     3, "keyword", e[34], 302,
     3, "keyword", e[35], 305,
     3, "keyword", e[36], 307,
     3, "keyword", e[37], 313,
     2, 445, -1, {"name":"calleeClassName","token":"callee"},
     3, "type", /^[A-Z][a-zA-Z¡-￿_0-9]*/, -1,
     3, "variable callee", e[38], -1,
     3, "variable", e[0], -1],
    [1, 25, 261],
    [":", 262,
     0, 263],
    [1, 25, 264],
    [2, 398, -1, {"name":"ClassBody"}],
    [1, 382, 265],
    [1, 25, 263],
    [1, 25, 267],
    [2, 428, -1, {"name":"FunctionSpec"}],
    [1, 58, 269],
    ["@", 270,
     0, -1],
    [1, 58, 271],
    [e[0], -1],
    [1, 58, 273],
    ["<", 274,
     0, 275],
    [1, 25, 276],
    ["@", 277,
     0, -1],
    [1, 352, 278],
    [1, 58, 279],
    [1, 25, 280],
    [e[0], -1],
    [">", 281],
    [1, 58, 275],
    [1, 25, 283],
    [2, 138, 284, {"name":"ParenthesizedExpression"}],
    [1, 25, 285],
    [2, 134, 286, {"name":"Block"},
     2, 26, 286, {"name":"Statement"},
     ";", 286],
    [2, 446, -1, {"name":"Alternative"}],
    [1, 25, 288],
    ["(", 289],
    [1, 25, 290],
    [1, 76, 291,
     3, "keyword", /^val(?![a-zA-Z¡-￿_0-9])/, 292,
     0, 293],
    [1, 25, 290],
    [1, 25, 294],
    [1, 25, 295],
    [1, 123, 296],
    [1, 101, 297],
    [1, 25, 298],
    [1, 25, 299],
    [3, "operator", "=", 293],
    [")", 300],
    [1, 25, 301],
    [2, 451, -1, {"name":"WhenBody"}],
    [1, 25, 303],
    [2, 134, 304, {"name":"Block"}],
    [2, 460, -1, {"name":"CatchFinally"}],
    [1, 58, 306],
    [1, 101, -1],
    [1, 58, 308],
    ["@", 309,
     0, 310],
    [1, 58, 311],
    [1, 101, -1,
     0, -1],
    [e[0], 312],
    [1, 58, 310],
    [1, 58, 314],
    ["@", 315,
     0, -1],
    [1, 58, 316],
    [e[0], -1],
    [1, 25, 318],
    [e[39], -1],
    [2, 326, -1, {"name":"TypeArgs"}],
    ["(", 321],
    [1, 25, 322],
    [1, 480, 323,
     0, 323],
    [1, 25, 324],
    [")", -1],
    [3, "keyword", e[40], -1],
    ["<", 327],
    [1, 25, 328],
    [1, 500, 329],
    [1, 25, 330],
    [">", -1],
    ["{", 332],
    [1, 25, 333],
    [[5, 510], 334,
     0, 337],
    [1, 513, 335],
    [1, 25, 336],
    [3, "operator", "->", 337],
    [1, 25, 338],
    [2, 26, 339, {"name":"Statement"},
     "}", -1],
    [1, 25, 338],
    [1, 101, 341],
    [1, 58, 342],
    [",", 343,
     0, -1],
    [1, 25, 344],
    [1, 101, 345,
     0, 342],
    [1, 58, 342],
    [1, 123, 347],
    [1, 58, 348],
    [",", 349,
     0, -1],
    [1, 25, 350],
    [1, 123, 351,
     0, 348],
    [1, 58, 348],
    [1, 76, 353,
     3, "keyword", /^suspend(?![a-zA-Z¡-￿_0-9])/, 353,
     3, "keyword", e[41], 372,
     3, "type", e[0], 354,
     [5, 527], 355,
     "(", 356],
    [1, 25, 352],
    [1, 58, 357],
    [2, 534, 358, {"name":"ParamTypeList"}],
    [1, 25, 359],
    [2, 326, 360, {"name":"TypeArgs"},
     0, 361],
    [1, 25, 362],
    [1, 352, 363],
    [1, 58, 361],
    [".", 364,
     0, 372],
    [3, "operator", "->", 365],
    [1, 25, 366],
    [1, 25, 367],
    [1, 25, 368],
    [")", 372],
    [3, "type", e[0], 369],
    [1, 352, 372],
    [1, 58, 370],
    [2, 326, 371, {"name":"TypeArgs"},
     0, 361],
    [1, 58, 361],
    [1, 58, 373],
    ["?", 374,
     0, -1],
    [1, 58, 373],
    [3, "attribute", "{", 376,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 375,
     "\n", 377,
     0, -1],
    [1, 375, 378],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 375],
    [/^(?=\*\/)/, 375,
     3, "attribute", "}", 375],
    [e[0], 380],
    [1, 58, 381],
    [":", -1],
    [1, 179, 383,
     1, 352, 384],
    [1, 25, 382],
    [1, 25, 385],
    [3, "keyword", e[42], 386,
     2, 320, 388, {"name":"ArgList"},
     0, 388],
    [1, 25, 387],
    [1, 101, 388],
    [1, 58, 389],
    [",", 390,
     0, -1],
    [1, 25, 391],
    [1, 179, 392,
     1, 352, 393,
     0, 389],
    [1, 25, 391],
    [1, 25, 394],
    [3, "keyword", e[42], 395,
     2, 320, 396, {"name":"ArgList"},
     0, 396],
    [1, 25, 397],
    [1, 58, 389],
    [1, 101, 396],
    ["{", 399],
    [1, 25, 400],
    [2, 539, 401, {"name":"ClassItem"},
     "}", -1],
    [1, 25, 400],
    ["<", 403],
    [1, 25, 404],
    [1, 570, 405],
    [1, 25, 406],
    [">", -1],
    [1, 76, 408,
     3, "variable", e[0], 409],
    [1, 25, 407],
    [1, 25, 410],
    [":", 411],
    [1, 25, 412],
    [1, 352, 413],
    [1, 58, 414],
    [",", 415,
     0, -1],
    [1, 25, 416],
    [1, 76, 417,
     3, "variable", e[0], 418,
     0, 414],
    [1, 25, 416],
    [1, 25, 419],
    [":", 420],
    [1, 25, 421],
    [1, 352, 422],
    [1, 58, 414],
    ["(", 424],
    [1, 25, 425],
    [1, 586, 426,
     0, 426],
    [1, 25, 427],
    [")", -1],
    [2, 423, 429, {"name":"ParamList"}],
    [1, 25, 430],
    [":", 431,
     0, 433],
    [1, 25, 432],
    [1, 352, 433],
    [1, 25, 434],
    [3, "keyword", e[25], 435,
     0, 437],
    [1, 25, 436],
    [1, 407, 437],
    [1, 25, 438],
    [2, 134, -1, {"name":"Block"},
     3, "operator", "=", 439,
     0, -1],
    [1, 25, 440],
    [1, 101, -1],
    [1, 179, 442,
     3, "keyword", e[43], 443,
     0, 443],
    [1, 25, 441],
    [1, 25, 444],
    [2, 610, -1, {"name":"ConstructorParamList"}],
    [3, "type", /^[A-Z][a-zA-Z¡-￿_0-9]*(?= *[\(\{])/, -1],
    [[5, 615], 447,
     0, -1],
    [1, 25, 448],
    [3, "keyword", e[40], 449],
    [1, 25, 450],
    [2, 134, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"},
     ";", -1],
    ["{", 452],
    [1, 25, 453],
    [3, "keyword", e[40], 454,
     1, 617, 454],
    [1, 25, 455],
    [3, "operator", "->", 456],
    [1, 25, 457],
    [2, 134, 458, {"name":"Block"},
     2, 26, 458, {"name":"Statement"},
     ";", 458],
    [1, 25, 459],
    ["}", -1],
    [[5, 643], 461,
     [5, 645], 476,
     0, -1],
    [1, 25, 462],
    [3, "keyword", e[44], 463],
    [1, 25, 464],
    ["(", 465],
    [1, 25, 466],
    [1, 76, 467,
     3, "def", e[0], 468],
    [1, 25, 466],
    [1, 25, 469],
    [":", 470],
    [1, 25, 471],
    [1, 352, 472],
    [1, 25, 473],
    [")", 474],
    [1, 25, 475],
    [2, 134, 460, {"name":"Block"}],
    [1, 25, 477],
    [3, "keyword", e[45], 478],
    [1, 25, 479],
    [2, 134, -1, {"name":"Block"}],
    [1, 76, 481,
     [0, [5, 647], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 482,
     0, 483],
    [1, 25, 480],
    [1, 25, 484],
    [1, 25, 485],
    [3, "operator", "=", 483],
    [/^\*?/, 486],
    [1, 25, 487],
    [1, 101, 488],
    [1, 58, 489],
    [",", 490,
     0, -1],
    [1, 25, 491],
    [1, 76, 492,
     [0, [5, 650], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 493,
     0, 494,
     0, 489],
    [1, 25, 491],
    [1, 25, 495],
    [1, 25, 496],
    [3, "operator", "=", 494],
    [/^\*?/, 497],
    [1, 25, 498],
    [1, 101, 499],
    [1, 58, 489],
    ["*", 503,
     0, 501],
    [1, 76, 502,
     3, "keyword", e[46], 502,
     1, 352, 503],
    [1, 25, 501],
    [1, 58, 504],
    [",", 505,
     0, -1],
    [1, 25, 506],
    ["*", 507,
     0, 508,
     0, 504],
    [1, 58, 504],
    [1, 76, 509,
     3, "keyword", e[46], 509,
     1, 352, 507],
    [1, 25, 508],
    [1, 513, 511],
    [1, 25, 512],
    [3, "operator", "->", -1],
    [3, "def", e[0], 514],
    [1, 25, 515],
    [":", 516,
     0, 518],
    [1, 25, 517],
    [1, 352, 518],
    [1, 58, 519],
    [",", 520,
     0, -1],
    [1, 25, 521],
    [3, "def", e[0], 522,
     0, 519],
    [1, 25, 523],
    [":", 524,
     0, 525],
    [1, 25, 526],
    [1, 58, 519],
    [1, 352, 525],
    ["(", 528],
    [1, 25, 529],
    [2, 164, -1, {"name":"AnnotationHead","token":"meta"},
     e[0], 530],
    [1, 25, 531],
    [")", 532,
     ":", -1],
    [1, 25, 533],
    ["->", -1],
    ["(", 535],
    [1, 25, 536],
    [1, 653, 537,
     0, 537],
    [1, 25, 538],
    [")", -1],
    [1, 76, -1,
     1, 667, -1,
     3, "keyword", e[47], 540,
     3, "keyword", e[48], 550,
     3, "keyword", e[43], 552,
     0, 562],
    [1, 25, 541],
    [3, "keyword", e[23], 542],
    [1, 25, 543],
    [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)?/, 544],
    [1, 25, 545],
    [":", 546,
     0, 547],
    [1, 25, 548],
    [1, 25, 549],
    [1, 382, 547],
    [2, 398, -1, {"name":"ClassBody"},
     0, -1],
    [1, 25, 551],
    [2, 134, -1, {"name":"Block"}],
    [1, 25, 553],
    [2, 423, 554, {"name":"ParamList"}],
    [1, 25, 555],
    [":", 556,
     0, 557],
    [1, 25, 558],
    [1, 25, 559],
    [3, "keyword", e[29], 560,
     3, "keyword", e[31], 560],
    [2, 134, -1, {"name":"Block"},
     0, -1],
    [1, 25, 561],
    [2, 320, 557, {"name":"ArgList"}],
    [1, 179, 563,
     3, "def property", e[0], 564],
    [1, 25, 562],
    [1, 25, 565],
    [2, 320, 566, {"name":"ArgList"},
     0, 566],
    [1, 25, 567],
    [2, 398, 568, {"name":"ClassBody"},
     0, 568],
    [1, 25, 569],
    [/^[\,\;]/, -1],
    [1, 179, 571,
     3, "type def", e[0], 572],
    [1, 25, 570],
    [1, 25, 573],
    [":", 574,
     0, 576],
    [1, 25, 575],
    [1, 352, 576],
    [1, 58, 577],
    [",", 578,
     0, -1],
    [1, 25, 579],
    [1, 179, 580,
     3, "type def", e[0], 581,
     0, 577],
    [1, 25, 579],
    [1, 25, 582],
    [":", 583,
     0, 584],
    [1, 25, 585],
    [1, 58, 577],
    [1, 352, 584],
    [1, 179, 587,
     3, "def", e[0], 588],
    [1, 25, 586],
    [1, 25, 589],
    [":", 590,
     0, 591],
    [1, 25, 592],
    [1, 25, 593],
    [1, 352, 591],
    [3, "operator", "=", 594,
     0, 596],
    [1, 25, 595],
    [1, 101, 596],
    [1, 58, 597],
    [",", 598,
     0, -1],
    [1, 25, 599],
    [1, 179, 600,
     3, "def", e[0], 601,
     0, 597],
    [1, 25, 599],
    [1, 25, 602],
    [":", 603,
     0, 604],
    [1, 25, 605],
    [1, 25, 606],
    [1, 352, 604],
    [3, "operator", "=", 607,
     0, 608],
    [1, 25, 609],
    [1, 58, 597],
    [1, 101, 608],
    ["(", 611],
    [1, 25, 612],
    [1, 685, 613,
     0, 613],
    [1, 25, 614],
    [")", -1],
    [1, 25, 616],
    [3, "keyword", e[40], -1],
    [[5, 713], 618,
     [5, 716], 619,
     1, 101, 628],
    [3, "operator", "!", 620,
     0, 620],
    [3, "operator", "!", 621,
     0, 621],
    [1, 25, 622],
    [1, 25, 623],
    [3, "keyword", e[8], 624],
    [3, "keyword", e[17], 625],
    [1, 25, 626],
    [1, 25, 627],
    [1, 101, 628],
    [1, 352, 628],
    [1, 58, 629],
    [",", 630,
     0, -1],
    [1, 25, 631],
    [[5, 719], 632,
     [5, 722], 633,
     1, 101, 634,
     0, 629],
    [3, "operator", "!", 635,
     0, 635],
    [3, "operator", "!", 636,
     0, 636],
    [1, 58, 629],
    [1, 25, 637],
    [1, 25, 638],
    [3, "keyword", e[8], 639],
    [3, "keyword", e[17], 640],
    [1, 25, 641],
    [1, 25, 642],
    [1, 101, 634],
    [1, 352, 634],
    [1, 25, 644],
    [3, "keyword", e[44], -1],
    [1, 25, 646],
    [3, "keyword", e[45], -1],
    [e[0], 648],
    [1, 25, 649],
    ["=", -1],
    [e[0], 651],
    [1, 25, 652],
    ["=", -1],
    [[0, [5, 725], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 654,
     0, 655],
    [1, 25, 656],
    [1, 25, 657],
    [":", 655],
    [1, 352, 658],
    [1, 58, 659],
    [",", 660,
     0, -1],
    [1, 25, 661],
    [[0, [5, 728], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 662,
     0, 663,
     0, 659],
    [1, 25, 664],
    [1, 25, 665],
    [":", 663],
    [1, 352, 666],
    [1, 58, 659],
    [1, 179, 668,
     3, "keyword", e[49], 669,
     0, 669,
     3, "keyword", e[10], 670,
     1, 731, -1,
     3, "keyword", e[11], 671,
     1, 740, -1,
     1, 206, -1,
     1, 221, -1,
     3, "keyword", e[12], 672],
    [1, 25, 667],
    [1, 25, 673],
    [1, 25, 674],
    [1, 25, 675],
    [1, 25, 676],
    [3, "keyword", e[13], 670],
    [3, "type def", e[0], 677],
    [3, "keyword", e[10], 678,
     2, 757, -1, {"name":"FunctionDeclaration"}],
    [3, "type def", e[0], 679],
    [1, 25, 680],
    [1, 25, 681],
    [1, 25, 682],
    [2, 239, -1, {"name":"ClassSpec"}],
    [3, "type def", e[0], 683],
    [2, 252, -1, {"name":"TypeAliasSpec"}],
    [1, 25, 684],
    [2, 239, -1, {"name":"ClassSpec"}],
    [1, 179, 686,
     3, "keyword", e[24], 687,
     3, "def", e[0], 688],
    [1, 25, 685],
    [1, 25, 689],
    [1, 25, 690],
    [3, "def property", e[0], 688],
    [":", 691,
     0, 692],
    [1, 25, 693],
    [1, 25, 694],
    [1, 352, 692],
    [3, "operator", "=", 695,
     0, 697],
    [1, 25, 696],
    [1, 101, 697],
    [1, 58, 698],
    [",", 699,
     0, -1],
    [1, 25, 700],
    [1, 179, 701,
     3, "keyword", e[24], 702,
     3, "def", e[0], 703,
     0, 698],
    [1, 25, 700],
    [1, 25, 704],
    [1, 25, 705],
    [3, "def property", e[0], 703],
    [":", 706,
     0, 707],
    [1, 25, 708],
    [1, 25, 709],
    [1, 352, 707],
    [3, "operator", "=", 710,
     0, 711],
    [1, 25, 712],
    [1, 58, 698],
    [1, 101, 711],
    [/^\!?/, 714],
    [1, 25, 715],
    [3, "keyword", e[8], -1],
    [/^\!?/, 717],
    [1, 25, 718],
    [3, "keyword", e[17], -1],
    [/^\!?/, 720],
    [1, 25, 721],
    [3, "keyword", e[8], -1],
    [/^\!?/, 723],
    [1, 25, 724],
    [3, "keyword", e[17], -1],
    [e[0], 726],
    [1, 25, 727],
    [":", -1],
    [e[0], 729],
    [1, 25, 730],
    [":", -1],
    [3, "keyword", e[23], 732],
    [1, 25, 733],
    [3, "def property", e[0], 734],
    [1, 25, 735],
    [":", 736,
     0, 738],
    [1, 25, 737],
    [1, 382, 738],
    [1, 25, 739],
    [2, 398, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[24], 741],
    [1, 25, 742],
    [2, 402, 743, {"name":"TypeParams"},
     0, 743],
    [1, 25, 744],
    [1, 762, 745],
    [1, 25, 746],
    [3, "keyword", e[25], 747,
     0, 749],
    [1, 25, 748],
    [1, 407, 749],
    [1, 25, 750],
    [3, "operator", "=", 751,
     3, "keyword", e[42], 752,
     0, 755],
    [1, 25, 753],
    [1, 25, 754],
    [1, 101, 755],
    [1, 101, 755],
    [1, 25, 756],
    [/^\;?/, -1],
    [2, 402, 758, {"name":"TypeParams"},
     0, 758],
    [1, 25, 759],
    [3, "def property", e[0], 760],
    [1, 25, 761],
    [2, 428, -1, {"name":"FunctionSpec"}],
    ["(", 763,
     0, 767],
    [1, 25, 764],
    [1, 773, 765],
    [1, 25, 766],
    [")", -1],
    [1, 76, 768,
     3, "def property", e[0], 769],
    [1, 25, 767],
    [1, 25, 770],
    [":", 771,
     0, -1],
    [1, 25, 772],
    [1, 352, -1],
    [1, 762, 774],
    [1, 58, 775],
    [",", 776,
     0, -1],
    [1, 25, 777],
    [1, 762, 778,
     0, 775],
    [1, 58, 775]
  ];
  var start = 0;
  var token = 24;

  var grammar = /*#__PURE__*/Object.freeze({
    __proto__: null,
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }
  function isLocalType(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var typeRE = /(^|\s)type($|\s)/;

  function markTypeLocals(type, scopes, stream, state) {
    if (type == "type def") {
      var scope = getScope(state.context, scopes);
      if (scope) {
        if (!scope.localTypes) { scope.localTypes = []; }
        scope.localTypes.push(stream.current());
      }
    } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
               isLocalType(state.context, stream.current())) {
      type += " local";
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}",
    ObjectPattern: "}", EnumBody: "}", LambdaBlock: "}", WhenBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    ParenthesizedExpression: ")", ConstructorParamList: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror__namespace.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror__namespace.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror__namespace.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror__namespace.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && (!config.dontAlign || config.dontAlign.indexOf(cx.name) < 0) && aligned(cx))
      { return CodeMirror__namespace.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config);
    if (brack) {
      if (closed && (config.dontCloseBrackets || "").indexOf(brack) < 0) { return base }
      return base + config.indentUnit * ((config.doubleIndentBrackets || "").indexOf(brack) < 0 ? 1 : 2)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config);
      if (!textAfter || /^((else|catch|finally)\b|\/[\/\*])/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror__namespace.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror__namespace.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template" || top == "str")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror__namespace.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    var passLine = config.forceContent && /^\s*(\/\/.*)?$/.test(line) ? "x" : line;
    return findIndent(state.contextAt(passLine, line.length - textAfter.length), textAfter, config)
  }

  var scopes = ["Block", "FunctionSpec", "LambdaBlock", "ClassSpec", "TypeAliasSpec", "ForStatement", "CatchFinally"];
  var typeScopes = ["FunctionDeclaration", "ClassSpec", "TypeAliasSpec"];

  var KotlinMode = /*@__PURE__*/(function (superclass) {
    function KotlinMode(conf, modeConf) {
      superclass.call(this, grammar);
      this.indentConf = {tabSize: conf.tabSize, indentUnit: conf.indentUnit, forceContent: true, dontAlign: ["LambdaBlock"]};
    }

    if ( superclass ) KotlinMode.__proto__ = superclass;
    KotlinMode.prototype = Object.create( superclass && superclass.prototype );
    KotlinMode.prototype.constructor = KotlinMode;

    KotlinMode.prototype.token = function token (stream, state) {
      return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
    };

    KotlinMode.prototype.indent = function indent$1 (state, textAfter, line) {
      return indent(state, textAfter, line, this.indentConf)
    };

    return KotlinMode;
  }(CodeMirror__namespace.GrammarMode));

  var meta = {
    electricInput: /^\s*[{}]$/,
    blockCommentStart: "/*",
    blockCommentEnd: "*/",
    blockCommentContinue: " * ",
    lineComment: "//",
    fold: "brace",
    closeBrackets: "()[]{}''\"\"``"
  };
  for (var prop in meta) { KotlinMode.prototype[prop] = meta[prop]; }

  CodeMirror__namespace.defineMode("google-kotlin", function (conf, modeConf) { return new KotlinMode(conf, modeConf); });

})));
