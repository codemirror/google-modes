(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () {
              return e[k];
            }
          });
        }
      });
    }
    n['default'] = e;
    return Object.freeze(n);
  }

  var CodeMirror__namespace = /*#__PURE__*/_interopNamespace(CodeMirror);

  var e = [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/, /^as(?![a-zA-Z¡-￿_0-9])/, /^package(?![a-zA-Z¡-￿_0-9])/, /^import(?![a-zA-Z¡-￿_0-9])/, /^[ \t\r]+/, /^for(?![a-zA-Z¡-￿_0-9])/, /^while(?![a-zA-Z¡-￿_0-9])/, /^do(?![a-zA-Z¡-￿_0-9])/, /^in(?![a-zA-Z¡-￿_0-9])/, [0, /^(?!\*\/)/, /^[^]/], /^class(?![a-zA-Z¡-￿_0-9])/, /^interface(?![a-zA-Z¡-￿_0-9])/, /^fun(?![a-zA-Z¡-￿_0-9])/, /^typealias(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)\@/, /^(?:\.\.|\?\:|[\+\-\*\/\%\<\>]\=?|[\!\=]\=\=?|\=|\&\&|\|\|)/, [0, "\n", [5, 315]], /^is(?![a-zA-Z¡-￿_0-9])/, [1, "\n", "\t", " "], /^[a-zA-Z0-9¡-￿_\.]+/, /^\@[a-zA-Z0-9¡-￿_]+/, [0, [6, 144], /^[^]/], /^(?:enum|sealed|annotation|data|inner|override|lateinit|public|private|internal|protected|tailrec|operator|infix|inline|external|extend|const|abstract|final|open|vararg|noinline|crossinline|reified|expect|actual|suspend)(?![a-zA-Z¡-￿_0-9])/, /^object(?![a-zA-Z¡-￿_0-9])/, /^(?:val|var)(?![a-zA-Z¡-￿_0-9])/, /^where(?![a-zA-Z¡-￿_0-9])/, /^(?:true|false|null)(?![a-zA-Z¡-￿_0-9])/, /^(?:(?:0x|0X)[0-9_a-fA-F]+|(?:0b|0B)[01_]+|(?:[0-9][0-9_]*(?:\.[0-9_]*)?|\.[0-9_]+)(?:[eE][\+\-]?[0-9_]+)?)[uU]?L?/, /^\'(?:\\.(?:(?!\').)*|.)\'/, /^this(?![a-zA-Z¡-￿_0-9])/, /^it(?![a-zA-Z¡-￿_0-9])/, /^super(?![a-zA-Z¡-￿_0-9])/, /^if(?![a-zA-Z¡-￿_0-9])/, /^when(?![a-zA-Z¡-￿_0-9])/, /^try(?![a-zA-Z¡-￿_0-9])/, /^throw(?![a-zA-Z¡-￿_0-9])/, /^return(?![a-zA-Z¡-￿_0-9])/, /^(?:break|continue)(?![a-zA-Z¡-￿_0-9])/, /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *[\(\{])/, /^(?:\?\.|\.|\:\:)/, /^else(?![a-zA-Z¡-￿_0-9])/, /^dynamic(?![a-zA-Z¡-￿_0-9])/, /^by(?![a-zA-Z¡-￿_0-9])/, /^constructor(?![a-zA-Z¡-￿_0-9])/, /^catch(?![a-zA-Z¡-￿_0-9])/, /^finally(?![a-zA-Z¡-￿_0-9])/, /^(?:in|out)(?![a-zA-Z¡-￿_0-9])/, /^companion(?![a-zA-Z¡-￿_0-9])/, /^init(?![a-zA-Z¡-￿_0-9])/];
  var nodes = [
    [3, "meta", /^\#\!.*/, 2,
     0, 2],
    [/^[^]/, 0],
    [1, 25, 3],
    [3, "keyword", e[2], 4,
     3, "keyword", e[3], 5,
     2, 26, 6, {"name":"Statement"}],
    [1, 25, 7],
    [1, 25, 8],
    [e[4], 6,
     2, 52, 6, {"name":"comment","token":"comment"},
     "\n", 6,
     0, 9],
    [3, "variable package", e[0], 10],
    [3, "variable package", /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)(?= *\.)/, 11,
     "*", 12,
     3, "def", e[0], 13],
    [0, 3,
     0, 1],
    [1, 58, 14],
    [1, 58, 15],
    [/^\;?/, 6],
    [1, 58, 16],
    [".", 17,
     /^\;?/, 6],
    [".", 18],
    [3, "keyword", e[1], 19,
     0, 12],
    [1, 25, 20],
    [1, 25, 8],
    [1, 25, 21],
    [3, "variable package", e[0], 22],
    [3, "def", e[0], 23],
    [1, 58, 14],
    [1, 58, 12],
    [3, "keyword", e[10], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[23], -1,
     3, "keyword", e[43], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[48], -1,
     3, "keyword", e[47], -1,
     3, "keyword", e[25], -1,
     3, "keyword", e[36], -1,
     3, "keyword", e[32], -1,
     3, "keyword", e[40], -1,
     3, "keyword", e[33], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     3, "keyword", e[37], -1,
     3, "keyword", e[8], -1,
     3, "keyword", e[17], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[41], -1,
     3, "keyword", e[22], -1,
     3, "keyword", e[29], -1,
     3, "variable-2", e[30], -1,
     3, "keyword", e[31], -1,
     3, "keyword", e[35], -1,
     3, "keyword", e[34], -1,
     3, "keyword", e[44], -1,
     3, "keyword", e[45], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[24], -1,
     3, "atom", e[26], -1,
     3, "number", e[27], -1,
     1, 59, -1,
     3, "string-2", e[28], -1,
     3, "operator", e[15], -1,
     1, 74, -1,
     2, 52, -1, {"name":"comment","token":"comment"},
     /^[^]/, -1],
    [e[4], 25,
     2, 52, 25, {"name":"comment","token":"comment"},
     "\n", 25,
     0, -1],
    [3, "meta", e[14], -1,
     1, 76, -1,
     1, 83, -1,
     3, "keyword", e[5], 27,
     3, "keyword", e[6], 40,
     3, "keyword", e[7], 44,
     1, 99, 50,
     ";", -1],
    [1, 25, 28],
    ["(", 29],
    [1, 25, 30],
    [1, 76, 31,
     1, 121, 32],
    [1, 25, 30],
    [1, 25, 33],
    [3, "keyword", e[8], 34],
    [1, 25, 35],
    [1, 99, 36],
    [1, 25, 37],
    [")", 38],
    [1, 25, 39],
    [2, 132, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"}],
    [1, 25, 41],
    [2, 136, 42, {"name":"ParenthesizedExpression"}],
    [1, 25, 43],
    [2, 132, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"},
     ";", -1],
    [1, 25, 45],
    [2, 132, 46, {"name":"Block"},
     2, 26, 46, {"name":"Statement"}],
    [1, 25, 47],
    [3, "keyword", e[6], 48],
    [1, 25, 49],
    [2, 136, -1, {"name":"ParenthesizedExpression"}],
    [1, 58, 51],
    [/^\;?/, -1],
    [/^\/\*\*(?!\/)/, 53,
     1, 74, -1,
     /^\/\/.*/, -1],
    ["/*", 54,
     0, 55,
     2, 141, 53, {"name":"doccomment.link","token":"link"},
     0, 56],
    [e[9], 54,
     "*/", 53],
    [e[21], 57],
    [2, 145, 56, {"name":"doccomment.tagGroup"},
     "*/", -1],
    [0, 55,
     0, 53],
    [e[4], 58,
     2, 52, 58, {"name":"comment","token":"comment"},
     0, -1],
    [3, "string", "\"\"\"", 60,
     3, "string", "\"", 67],
    [2, 158, 60, {"name":"str","token":"string"},
     3, "string", "${", 61,
     3, "string", "$", 62,
     2, 160, 60, {"name":"str","token":"string"},
     3, "string", "\"\"\"", -1],
    [1, 25, 63],
    [1, 25, 64],
    [1, 99, 65],
    [3, "variable", e[0], 60],
    [1, 25, 66],
    [3, "string", "}", 60],
    [2, 158, 67, {"name":"str","token":"string"},
     3, "string", "${", 68,
     3, "string", "$", 69,
     3, "string", /^(?:(?![\"\$\\]).)+/, 67,
     3, "string", "\"", -1],
    [1, 25, 70],
    [1, 25, 71],
    [1, 99, 72],
    [3, "variable", e[0], 67],
    [1, 25, 73],
    [3, "string", "}", 67],
    ["/*", 75],
    [1, 74, 75,
     e[9], 75,
     "*/", -1],
    [2, 162, 77, {"name":"AnnotationHead","token":"meta"}],
    [1, 25, 78],
    [1, 167, -1,
     "[", 79],
    [1, 25, 80],
    [1, 167, 81],
    [1, 25, 82],
    [0, 80,
     "]", -1],
    [1, 177, 84,
     3, "keyword", e[10], 85,
     3, "keyword", e[11], 85,
     1, 178, -1,
     3, "keyword", e[12], 86,
     1, 187, -1,
     1, 204, -1,
     1, 219, -1,
     3, "keyword", e[13], 87],
    [1, 25, 83],
    [1, 25, 88],
    [1, 25, 89],
    [1, 25, 90],
    [3, "type def", e[0], 91],
    [3, "keyword", e[11], 92,
     2, 232, -1, {"name":"FunctionDeclaration"}],
    [3, "type def", e[0], 93],
    [1, 25, 94],
    [1, 25, 95],
    [1, 25, 96],
    [2, 237, -1, {"name":"ClassSpec"}],
    [3, "type def", e[0], 97],
    [2, 250, -1, {"name":"TypeAliasSpec"}],
    [1, 25, 98],
    [2, 237, -1, {"name":"ClassSpec"}],
    [3, "operator", /^(?:\+\+|\-\-|\+|\-|\!)/, 100,
     3, "meta", e[14], 100,
     1, 76, 100,
     1, 257, 101],
    [1, 25, 99],
    [e[4], 101,
     2, 52, 101, {"name":"comment","token":"comment"},
     e[16], 101,
     0, 102],
    [3, "operator", /^(?:\+\+|\-\-|\!\!)/, 103,
     [5, 317], 104,
     3, "operator", e[15], 105,
     "!", 106,
     0, 107,
     3, "keyword", e[1], 108,
     2, 318, 103, {"name":"ArgList"},
     0, 109,
     e[39], 110,
     "[", 111,
     3, "variable callee", [0, [6, 323], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 112,
     0, -1],
    [e[4], 103,
     2, 52, 103, {"name":"comment","token":"comment"},
     e[16], 103,
     0, 102],
    [2, 324, 103, {"name":"TypeArgs"}],
    [1, 25, 113],
    [1, 58, 107],
    [3, "keyword", e[8], 105,
     3, "keyword", e[17], 105],
    [1, 58, 114],
    [1, 76, 109,
     2, 329, 103, {"name":"LambdaBlock"}],
    [1, 25, 115],
    [1, 25, 116],
    [1, 25, 117],
    [1, 257, 103],
    ["?", 118,
     0, 105],
    [3, "keyword", e[10], 103,
     3, "property callee", e[38], 103,
     3, "property", e[0], 103,
     2, 136, 103, {"name":"ParenthesizedExpression"}],
    [1, 338, 119],
    [1, 257, 103],
    [1, 58, 105],
    [1, 25, 120],
    ["]", 103],
    ["(", 122,
     0, 126],
    [1, 25, 123],
    [1, 344, 124],
    [1, 25, 125],
    [")", -1],
    [1, 76, 127,
     3, "def", e[0], 128],
    [1, 25, 126],
    [1, 25, 129],
    [":", 130,
     0, -1],
    [1, 25, 131],
    [1, 350, -1],
    ["{", 133],
    [1, 25, 134],
    [2, 26, 135, {"name":"Statement"},
     "}", -1],
    [1, 25, 134],
    ["(", 137],
    [1, 25, 138],
    [1, 99, 139],
    [1, 25, 140],
    [")", -1],
    ["[", 142],
    [[0, /^(?!\])/, /^[^]/], 143],
    [0, 142,
     "]", -1],
    [/^(?:\*\/|\{?\@[a-zA-Z0-9¡-￿_])/, -1,
     2, 141, -1, {"name":"doccomment.link","token":"link"}],
    [3, "tag", /^\@param(?![a-zA-Z0-9¡-￿_])/, 146,
     3, "tag", /^\@(?:throws|exception)(?![a-zA-Z0-9¡-￿_])/, 147,
     3, "tag", e[20], 154,
     "{", 148],
    [e[18], 146,
     3, "def", e[19], 154,
     "<", 149,
     0, 154],
    [e[18], 147,
     3, "type", e[19], 154,
     0, 154],
    [3, "tag", e[20], 150],
    [3, "type def", /^[a-zA-Z0-9¡-￿_]+/, 151],
    [/^[\t ]*/, 152],
    [">", 154],
    [1, 373, 153],
    ["}", 154],
    ["/*", 155,
     0, 156,
     2, 141, 154, {"name":"doccomment.link","token":"link"},
     0, -1],
    [e[9], 155,
     "*/", 154],
    [e[21], 157],
    [0, 156,
     0, 154],
    ["\\", 159],
    [/^[^]/, -1],
    [[0, /^(?!\"\"\"|\$|\\)/, /^[^]/], 161],
    [0, 160,
     0, -1],
    ["@", 163],
    [1, 58, 164],
    [[0, [5, 377], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 165,
     0, -1],
    [1, 58, 166],
    [":", -1],
    [3, "meta", e[0], 168],
    [1, 25, 169],
    [2, 324, 170, {"name":"TypeArgs"},
     0, 170],
    [1, 25, 171],
    [".", 172,
     2, 318, -1, {"name":"ArgList"},
     0, -1],
    [1, 25, 173],
    [3, "meta", e[0], 174],
    [1, 25, 175],
    [2, 324, 176, {"name":"TypeArgs"},
     0, 176],
    [1, 25, 171],
    [3, "keyword", e[22], -1,
     1, 76, -1],
    [3, "keyword", e[23], 179],
    [1, 25, 180],
    [3, "def", e[0], 181],
    [1, 25, 182],
    [":", 183,
     0, 185],
    [1, 25, 184],
    [1, 380, 185],
    [1, 25, 186],
    [2, 396, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[24], 188],
    [1, 25, 189],
    [2, 400, 190, {"name":"TypeParams"},
     0, 190],
    [1, 25, 191],
    [1, 121, 192],
    [1, 25, 193],
    [3, "keyword", e[25], 194,
     0, 196],
    [1, 25, 195],
    [1, 405, 196],
    [1, 25, 197],
    [3, "operator", "=", 198,
     3, "keyword", e[42], 199,
     0, 202],
    [1, 25, 200],
    [1, 25, 201],
    [1, 99, 202],
    [1, 99, 202],
    [1, 25, 203],
    [/^\;?/, -1],
    [3, "keyword", /^get(?![a-zA-Z¡-￿_0-9])/, 205],
    [1, 25, 206],
    ["(", 207,
     0, 209],
    [1, 25, 208],
    [")", 209],
    [1, 25, 210],
    [":", 211,
     0, 213],
    [1, 25, 212],
    [1, 350, 213],
    [1, 25, 214],
    [2, 132, 217, {"name":"Block"},
     3, "operator", "=", 215],
    [1, 25, 216],
    [1, 99, 217],
    [1, 25, 218],
    [/^\;?/, -1],
    [3, "keyword", /^set(?![a-zA-Z¡-￿_0-9])/, 220],
    [1, 25, 221],
    [2, 421, 222, {"name":"ParamList"},
     0, 222],
    [1, 25, 223],
    [":", 224,
     0, 226],
    [1, 25, 225],
    [1, 350, 226],
    [1, 25, 227],
    [2, 132, 230, {"name":"Block"},
     3, "operator", "=", 228],
    [1, 25, 229],
    [1, 99, 230],
    [1, 25, 231],
    [/^\;?/, -1],
    [2, 400, 233, {"name":"TypeParams"},
     0, 233],
    [1, 25, 234],
    [3, "def", e[0], 235],
    [1, 25, 236],
    [2, 426, -1, {"name":"FunctionSpec"}],
    [2, 400, 238, {"name":"TypeParams"},
     0, 238],
    [1, 25, 239],
    [2, 439, 240, {"name":"Constructor"},
     0, 240],
    [1, 25, 241],
    [":", 242,
     0, 244],
    [1, 25, 243],
    [1, 380, 244],
    [1, 25, 245],
    [3, "keyword", e[25], 246,
     0, 248],
    [1, 25, 247],
    [1, 405, 248],
    [1, 25, 249],
    [2, 396, -1, {"name":"ClassBody"},
     0, -1],
    [2, 400, 251, {"name":"TypeParams"},
     0, 251],
    [1, 25, 252],
    [3, "operator", "=", 253],
    [1, 25, 254],
    [1, 350, 255],
    [1, 25, 256],
    [/^\;?/, -1],
    [2, 136, -1, {"name":"ParenthesizedExpression"},
     3, "atom", e[26], -1,
     3, "number", e[27], -1,
     1, 59, -1,
     3, "string-2", e[28], -1,
     2, 329, -1, {"name":"LambdaBlock"},
     3, "keyword", e[23], 258,
     3, "keyword", e[12], 264,
     3, "keyword", e[29], 266,
     3, "variable-2", e[30], -1,
     3, "keyword", e[31], 270,
     3, "keyword", e[32], 280,
     3, "keyword", e[33], 285,
     3, "keyword", e[34], 300,
     3, "keyword", e[35], 303,
     3, "keyword", e[36], 305,
     3, "keyword", e[37], 311,
     2, 443, -1, {"name":"calleeClassName","token":"callee"},
     3, "type", /^[A-Z][a-zA-Z¡-￿_0-9]*/, -1,
     3, "variable callee", e[38], -1,
     3, "variable", e[0], -1],
    [1, 25, 259],
    [":", 260,
     0, 261],
    [1, 25, 262],
    [2, 396, -1, {"name":"ClassBody"}],
    [1, 380, 263],
    [1, 25, 261],
    [1, 25, 265],
    [2, 426, -1, {"name":"FunctionSpec"}],
    [1, 58, 267],
    ["@", 268,
     0, -1],
    [1, 58, 269],
    [e[0], -1],
    [1, 58, 271],
    ["<", 272,
     0, 273],
    [1, 25, 274],
    ["@", 275,
     0, -1],
    [1, 350, 276],
    [1, 58, 277],
    [1, 25, 278],
    [e[0], -1],
    [">", 279],
    [1, 58, 273],
    [1, 25, 281],
    [2, 136, 282, {"name":"ParenthesizedExpression"}],
    [1, 25, 283],
    [2, 132, 284, {"name":"Block"},
     2, 26, 284, {"name":"Statement"},
     ";", 284],
    [2, 444, -1, {"name":"Alternative"}],
    [1, 25, 286],
    ["(", 287],
    [1, 25, 288],
    [1, 76, 289,
     3, "keyword", /^val(?![a-zA-Z¡-￿_0-9])/, 290,
     0, 291],
    [1, 25, 288],
    [1, 25, 292],
    [1, 25, 293],
    [1, 121, 294],
    [1, 99, 295],
    [1, 25, 296],
    [1, 25, 297],
    [3, "operator", "=", 291],
    [")", 298],
    [1, 25, 299],
    [2, 449, -1, {"name":"WhenBody"}],
    [1, 25, 301],
    [2, 132, 302, {"name":"Block"}],
    [2, 458, -1, {"name":"CatchFinally"}],
    [1, 58, 304],
    [1, 99, -1],
    [1, 58, 306],
    ["@", 307,
     0, 308],
    [1, 58, 309],
    [1, 99, -1,
     0, -1],
    [e[0], 310],
    [1, 58, 308],
    [1, 58, 312],
    ["@", 313,
     0, -1],
    [1, 58, 314],
    [e[0], -1],
    [1, 25, 316],
    [e[39], -1],
    [2, 324, -1, {"name":"TypeArgs"}],
    ["(", 319],
    [1, 25, 320],
    [1, 478, 321,
     0, 321],
    [1, 25, 322],
    [")", -1],
    [3, "keyword", e[40], -1],
    ["<", 325],
    [1, 25, 326],
    [1, 498, 327],
    [1, 25, 328],
    [">", -1],
    ["{", 330],
    [1, 25, 331],
    [[5, 508], 332,
     0, 335],
    [1, 511, 333],
    [1, 25, 334],
    [3, "operator", "->", 335],
    [1, 25, 336],
    [2, 26, 337, {"name":"Statement"},
     "}", -1],
    [1, 25, 336],
    [1, 99, 339],
    [1, 58, 340],
    [",", 341,
     0, -1],
    [1, 25, 342],
    [1, 99, 343,
     0, 340],
    [1, 58, 340],
    [1, 121, 345],
    [1, 58, 346],
    [",", 347,
     0, -1],
    [1, 25, 348],
    [1, 121, 349,
     0, 346],
    [1, 58, 346],
    [1, 76, 351,
     3, "keyword", /^suspend(?![a-zA-Z¡-￿_0-9])/, 351,
     3, "keyword", e[41], 370,
     3, "type", e[0], 352,
     [5, 525], 353,
     "(", 354],
    [1, 25, 350],
    [1, 58, 355],
    [2, 532, 356, {"name":"ParamTypeList"}],
    [1, 25, 357],
    [2, 324, 358, {"name":"TypeArgs"},
     0, 359],
    [1, 25, 360],
    [1, 350, 361],
    [1, 58, 359],
    [".", 362,
     0, 370],
    [3, "operator", "->", 363],
    [1, 25, 364],
    [1, 25, 365],
    [1, 25, 366],
    [")", 370],
    [3, "type", e[0], 367],
    [1, 350, 370],
    [1, 58, 368],
    [2, 324, 369, {"name":"TypeArgs"},
     0, 359],
    [1, 58, 359],
    [1, 58, 371],
    ["?", 372,
     0, -1],
    [1, 58, 371],
    [3, "attribute", "{", 374,
     3, "attribute", /^(?:(?!\{|\}|\*\/).)+/, 373,
     "\n", 375,
     0, -1],
    [1, 373, 376],
    [/^[\t ]*(?:\*(?!\/)[\t ]*)?/, 373],
    [/^(?=\*\/)/, 373,
     3, "attribute", "}", 373],
    [e[0], 378],
    [1, 58, 379],
    [":", -1],
    [1, 177, 381,
     1, 350, 382],
    [1, 25, 380],
    [1, 25, 383],
    [3, "keyword", e[42], 384,
     2, 318, 386, {"name":"ArgList"},
     0, 386],
    [1, 25, 385],
    [1, 99, 386],
    [1, 58, 387],
    [",", 388,
     0, -1],
    [1, 25, 389],
    [1, 177, 390,
     1, 350, 391,
     0, 387],
    [1, 25, 389],
    [1, 25, 392],
    [3, "keyword", e[42], 393,
     2, 318, 394, {"name":"ArgList"},
     0, 394],
    [1, 25, 395],
    [1, 58, 387],
    [1, 99, 394],
    ["{", 397],
    [1, 25, 398],
    [2, 537, 399, {"name":"ClassItem"},
     "}", -1],
    [1, 25, 398],
    ["<", 401],
    [1, 25, 402],
    [1, 568, 403],
    [1, 25, 404],
    [">", -1],
    [1, 76, 406,
     3, "variable", e[0], 407],
    [1, 25, 405],
    [1, 25, 408],
    [":", 409],
    [1, 25, 410],
    [1, 350, 411],
    [1, 58, 412],
    [",", 413,
     0, -1],
    [1, 25, 414],
    [1, 76, 415,
     3, "variable", e[0], 416,
     0, 412],
    [1, 25, 414],
    [1, 25, 417],
    [":", 418],
    [1, 25, 419],
    [1, 350, 420],
    [1, 58, 412],
    ["(", 422],
    [1, 25, 423],
    [1, 584, 424,
     0, 424],
    [1, 25, 425],
    [")", -1],
    [2, 421, 427, {"name":"ParamList"}],
    [1, 25, 428],
    [":", 429,
     0, 431],
    [1, 25, 430],
    [1, 350, 431],
    [1, 25, 432],
    [3, "keyword", e[25], 433,
     0, 435],
    [1, 25, 434],
    [1, 405, 435],
    [1, 25, 436],
    [2, 132, -1, {"name":"Block"},
     3, "operator", "=", 437,
     0, -1],
    [1, 25, 438],
    [1, 99, -1],
    [1, 177, 440,
     3, "keyword", e[43], 441,
     0, 441],
    [1, 25, 439],
    [1, 25, 442],
    [2, 608, -1, {"name":"ConstructorParamList"}],
    [3, "type", /^[A-Z][a-zA-Z¡-￿_0-9]*(?= *[\(\{])/, -1],
    [[5, 613], 445,
     0, -1],
    [1, 25, 446],
    [3, "keyword", e[40], 447],
    [1, 25, 448],
    [2, 132, -1, {"name":"Block"},
     2, 26, -1, {"name":"Statement"},
     ";", -1],
    ["{", 450],
    [1, 25, 451],
    [3, "keyword", e[40], 452,
     1, 615, 452],
    [1, 25, 453],
    [3, "operator", "->", 454],
    [1, 25, 455],
    [2, 132, 456, {"name":"Block"},
     2, 26, 456, {"name":"Statement"},
     ";", 456],
    [1, 25, 457],
    ["}", -1],
    [[5, 641], 459,
     [5, 643], 474,
     0, -1],
    [1, 25, 460],
    [3, "keyword", e[44], 461],
    [1, 25, 462],
    ["(", 463],
    [1, 25, 464],
    [1, 76, 465,
     3, "def", e[0], 466],
    [1, 25, 464],
    [1, 25, 467],
    [":", 468],
    [1, 25, 469],
    [1, 350, 470],
    [1, 25, 471],
    [")", 472],
    [1, 25, 473],
    [2, 132, 458, {"name":"Block"}],
    [1, 25, 475],
    [3, "keyword", e[45], 476],
    [1, 25, 477],
    [2, 132, -1, {"name":"Block"}],
    [1, 76, 479,
     [0, [5, 645], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 480,
     0, 481],
    [1, 25, 478],
    [1, 25, 482],
    [1, 25, 483],
    [3, "operator", "=", 481],
    [/^\*?/, 484],
    [1, 25, 485],
    [1, 99, 486],
    [1, 58, 487],
    [",", 488,
     0, -1],
    [1, 25, 489],
    [1, 76, 490,
     [0, [5, 648], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 491,
     0, 492,
     0, 487],
    [1, 25, 489],
    [1, 25, 493],
    [1, 25, 494],
    [3, "operator", "=", 492],
    [/^\*?/, 495],
    [1, 25, 496],
    [1, 99, 497],
    [1, 58, 487],
    ["*", 501,
     0, 499],
    [1, 76, 500,
     3, "keyword", e[46], 500,
     1, 350, 501],
    [1, 25, 499],
    [1, 58, 502],
    [",", 503,
     0, -1],
    [1, 25, 504],
    ["*", 505,
     0, 506,
     0, 502],
    [1, 58, 502],
    [1, 76, 507,
     3, "keyword", e[46], 507,
     1, 350, 505],
    [1, 25, 506],
    [1, 511, 509],
    [1, 25, 510],
    [3, "operator", "->", -1],
    [3, "def", e[0], 512],
    [1, 25, 513],
    [":", 514,
     0, 516],
    [1, 25, 515],
    [1, 350, 516],
    [1, 58, 517],
    [",", 518,
     0, -1],
    [1, 25, 519],
    [3, "def", e[0], 520,
     0, 517],
    [1, 25, 521],
    [":", 522,
     0, 523],
    [1, 25, 524],
    [1, 58, 517],
    [1, 350, 523],
    ["(", 526],
    [1, 25, 527],
    [2, 162, -1, {"name":"AnnotationHead","token":"meta"},
     e[0], 528],
    [1, 25, 529],
    [")", 530,
     ":", -1],
    [1, 25, 531],
    ["->", -1],
    ["(", 533],
    [1, 25, 534],
    [1, 651, 535,
     0, 535],
    [1, 25, 536],
    [")", -1],
    [1, 76, -1,
     1, 665, -1,
     3, "keyword", e[47], 538,
     3, "keyword", e[48], 548,
     3, "keyword", e[43], 550,
     0, 560],
    [1, 25, 539],
    [3, "keyword", e[23], 540],
    [1, 25, 541],
    [/^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)?/, 542],
    [1, 25, 543],
    [":", 544,
     0, 545],
    [1, 25, 546],
    [1, 25, 547],
    [1, 380, 545],
    [2, 396, -1, {"name":"ClassBody"},
     0, -1],
    [1, 25, 549],
    [2, 132, -1, {"name":"Block"}],
    [1, 25, 551],
    [2, 421, 552, {"name":"ParamList"}],
    [1, 25, 553],
    [":", 554,
     0, 555],
    [1, 25, 556],
    [1, 25, 557],
    [3, "keyword", e[29], 558,
     3, "keyword", e[31], 558],
    [2, 132, -1, {"name":"Block"},
     0, -1],
    [1, 25, 559],
    [2, 318, 555, {"name":"ArgList"}],
    [1, 177, 561,
     3, "def property", e[0], 562],
    [1, 25, 560],
    [1, 25, 563],
    [2, 318, 564, {"name":"ArgList"},
     0, 564],
    [1, 25, 565],
    [2, 396, 566, {"name":"ClassBody"},
     0, 566],
    [1, 25, 567],
    [/^[\,\;]/, -1],
    [1, 177, 569,
     3, "type def", e[0], 570],
    [1, 25, 568],
    [1, 25, 571],
    [":", 572,
     0, 574],
    [1, 25, 573],
    [1, 350, 574],
    [1, 58, 575],
    [",", 576,
     0, -1],
    [1, 25, 577],
    [1, 177, 578,
     3, "type def", e[0], 579,
     0, 575],
    [1, 25, 577],
    [1, 25, 580],
    [":", 581,
     0, 582],
    [1, 25, 583],
    [1, 58, 575],
    [1, 350, 582],
    [1, 177, 585,
     3, "def", e[0], 586],
    [1, 25, 584],
    [1, 25, 587],
    [":", 588,
     0, 589],
    [1, 25, 590],
    [1, 25, 591],
    [1, 350, 589],
    [3, "operator", "=", 592,
     0, 594],
    [1, 25, 593],
    [1, 99, 594],
    [1, 58, 595],
    [",", 596,
     0, -1],
    [1, 25, 597],
    [1, 177, 598,
     3, "def", e[0], 599,
     0, 595],
    [1, 25, 597],
    [1, 25, 600],
    [":", 601,
     0, 602],
    [1, 25, 603],
    [1, 25, 604],
    [1, 350, 602],
    [3, "operator", "=", 605,
     0, 606],
    [1, 25, 607],
    [1, 58, 595],
    [1, 99, 606],
    ["(", 609],
    [1, 25, 610],
    [1, 681, 611,
     0, 611],
    [1, 25, 612],
    [")", -1],
    [1, 25, 614],
    [3, "keyword", e[40], -1],
    [[5, 709], 616,
     [5, 712], 617,
     1, 99, 626],
    [3, "operator", "!", 618,
     0, 618],
    [3, "operator", "!", 619,
     0, 619],
    [1, 25, 620],
    [1, 25, 621],
    [3, "keyword", e[8], 622],
    [3, "keyword", e[17], 623],
    [1, 25, 624],
    [1, 25, 625],
    [1, 99, 626],
    [1, 350, 626],
    [1, 58, 627],
    [",", 628,
     0, -1],
    [1, 25, 629],
    [[5, 715], 630,
     [5, 718], 631,
     1, 99, 632,
     0, 627],
    [3, "operator", "!", 633,
     0, 633],
    [3, "operator", "!", 634,
     0, 634],
    [1, 58, 627],
    [1, 25, 635],
    [1, 25, 636],
    [3, "keyword", e[8], 637],
    [3, "keyword", e[17], 638],
    [1, 25, 639],
    [1, 25, 640],
    [1, 99, 632],
    [1, 350, 632],
    [1, 25, 642],
    [3, "keyword", e[44], -1],
    [1, 25, 644],
    [3, "keyword", e[45], -1],
    [e[0], 646],
    [1, 25, 647],
    ["=", -1],
    [e[0], 649],
    [1, 25, 650],
    ["=", -1],
    [[0, [5, 721], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 652,
     0, 653],
    [1, 25, 654],
    [1, 25, 655],
    [":", 653],
    [1, 350, 656],
    [1, 58, 657],
    [",", 658,
     0, -1],
    [1, 25, 659],
    [[0, [5, 724], /^(?:[a-zA-Z¡-￿_][a-zA-Z¡-￿_0-9]*|\`(?:(?!\`).)+\`)/], 660,
     0, 661,
     0, 657],
    [1, 25, 662],
    [1, 25, 663],
    [":", 661],
    [1, 350, 664],
    [1, 58, 657],
    [1, 177, 666,
     3, "keyword", e[10], 667,
     3, "keyword", e[11], 667,
     1, 727, -1,
     3, "keyword", e[12], 668,
     1, 736, -1,
     1, 204, -1,
     1, 219, -1,
     3, "keyword", e[13], 669],
    [1, 25, 665],
    [1, 25, 670],
    [1, 25, 671],
    [1, 25, 672],
    [3, "type def", e[0], 673],
    [3, "keyword", e[11], 674,
     2, 753, -1, {"name":"FunctionDeclaration"}],
    [3, "type def", e[0], 675],
    [1, 25, 676],
    [1, 25, 677],
    [1, 25, 678],
    [2, 237, -1, {"name":"ClassSpec"}],
    [3, "type def", e[0], 679],
    [2, 250, -1, {"name":"TypeAliasSpec"}],
    [1, 25, 680],
    [2, 237, -1, {"name":"ClassSpec"}],
    [1, 177, 682,
     3, "keyword", e[24], 683,
     3, "def", e[0], 684],
    [1, 25, 681],
    [1, 25, 685],
    [1, 25, 686],
    [3, "def property", e[0], 684],
    [":", 687,
     0, 688],
    [1, 25, 689],
    [1, 25, 690],
    [1, 350, 688],
    [3, "operator", "=", 691,
     0, 693],
    [1, 25, 692],
    [1, 99, 693],
    [1, 58, 694],
    [",", 695,
     0, -1],
    [1, 25, 696],
    [1, 177, 697,
     3, "keyword", e[24], 698,
     3, "def", e[0], 699,
     0, 694],
    [1, 25, 696],
    [1, 25, 700],
    [1, 25, 701],
    [3, "def property", e[0], 699],
    [":", 702,
     0, 703],
    [1, 25, 704],
    [1, 25, 705],
    [1, 350, 703],
    [3, "operator", "=", 706,
     0, 707],
    [1, 25, 708],
    [1, 58, 694],
    [1, 99, 707],
    [/^\!?/, 710],
    [1, 25, 711],
    [3, "keyword", e[8], -1],
    [/^\!?/, 713],
    [1, 25, 714],
    [3, "keyword", e[17], -1],
    [/^\!?/, 716],
    [1, 25, 717],
    [3, "keyword", e[8], -1],
    [/^\!?/, 719],
    [1, 25, 720],
    [3, "keyword", e[17], -1],
    [e[0], 722],
    [1, 25, 723],
    [":", -1],
    [e[0], 725],
    [1, 25, 726],
    [":", -1],
    [3, "keyword", e[23], 728],
    [1, 25, 729],
    [3, "def property", e[0], 730],
    [1, 25, 731],
    [":", 732,
     0, 734],
    [1, 25, 733],
    [1, 380, 734],
    [1, 25, 735],
    [2, 396, -1, {"name":"ClassBody"},
     0, -1],
    [3, "keyword", e[24], 737],
    [1, 25, 738],
    [2, 400, 739, {"name":"TypeParams"},
     0, 739],
    [1, 25, 740],
    [1, 758, 741],
    [1, 25, 742],
    [3, "keyword", e[25], 743,
     0, 745],
    [1, 25, 744],
    [1, 405, 745],
    [1, 25, 746],
    [3, "operator", "=", 747,
     3, "keyword", e[42], 748,
     0, 751],
    [1, 25, 749],
    [1, 25, 750],
    [1, 99, 751],
    [1, 99, 751],
    [1, 25, 752],
    [/^\;?/, -1],
    [2, 400, 754, {"name":"TypeParams"},
     0, 754],
    [1, 25, 755],
    [3, "def property", e[0], 756],
    [1, 25, 757],
    [2, 426, -1, {"name":"FunctionSpec"}],
    ["(", 759,
     0, 763],
    [1, 25, 760],
    [1, 769, 761],
    [1, 25, 762],
    [")", -1],
    [1, 76, 764,
     3, "def property", e[0], 765],
    [1, 25, 763],
    [1, 25, 766],
    [":", 767,
     0, -1],
    [1, 25, 768],
    [1, 350, -1],
    [1, 758, 770],
    [1, 58, 771],
    [",", 772,
     0, -1],
    [1, 25, 773],
    [1, 758, 774,
     0, 771],
    [1, 58, 771]
  ];
  var start = 0;
  var token = 24;

  var grammar = /*#__PURE__*/Object.freeze({
    __proto__: null,
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }
  function isLocalType(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.localTypes && cx.localTypes.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var typeRE = /(^|\s)type($|\s)/;

  function markTypeLocals(type, scopes, stream, state) {
    if (type == "type def") {
      var scope = getScope(state.context, scopes);
      if (scope) {
        if (!scope.localTypes) { scope.localTypes = []; }
        scope.localTypes.push(stream.current());
      }
    } else if (typeRE.test(type) && !/qualifie[rd]/.test(type) &&
               isLocalType(state.context, stream.current())) {
      type += " local";
    }
    return type
  }

  function hasSubStatement(context) {
    var m = /^(if|for|do|while|try)\b/.exec(context.startLine.slice(context.startPos));
    return m && m[1]
  }

  function isSwitch(context) {
    return context && context.name == "Statement" &&
      /^switch\b/.test(context.startLine.slice(context.startPos))
  }

  function isLabel(text) {
    return text && /^\s*(case|default)\b/.test(text)
  }

  function aligned(cx) {
    return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
  }

  var bracketed = {
    Block: "}", BlockOf: "}", ClassBody: "}", AnnotationTypeBody: "}", ObjectLiteral: "}",
    ObjectPattern: "}", EnumBody: "}", LambdaBlock: "}", WhenBody: "}",
    ObjType: "}", ArrayInitializer: "}", NamespaceBlock: "}", BraceTokens: "}",
    ArrayLiteral: "]", BracketTokens: "]", TupleType: "]",
    ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", ForSpec: ")", ParenTokens: ")",
    ParenthesizedExpression: ")", ConstructorParamList: ")",
    TypeParams: ">", TypeArgs: ">", TemplateArgs: ">", TemplateParams: ">"
  };

  var blockish = ["Block", "NamespaceBlock", "ClassBody", "AnnotationTypeBody", "BlockOf", "EnumBody"];

  var statementish = ["Statement", "ObjectMember", "ClassItem", "EnumConstant", "AnnotationTypeItem", "ArgExpr", "StatementMaybeOf", "NewExpr"];

  function baseIndent(cx, config) {
    for (var startLine = cx.startLine;; cx = cx.parent) {
      if (cx.name == "CondExpr")
        { return CodeMirror__namespace.countColumn(cx.startLine, cx.startPos + 1, config.tabSize) }
      if (statementish.indexOf(cx.name) > -1 && /(^\s*|[\(\{\[])$/.test(cx.startLine.slice(0, cx.startPos)))
        { return CodeMirror__namespace.countColumn(cx.startLine, cx.startPos, config.tabSize) }
      if (!cx.parent || cx.parent.startLine != startLine)
        { return CodeMirror__namespace.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function findIndent(cx, textAfter, config) {
    if (!cx) { return 0 }
    if (cx.name == "string" || cx.name == "comment") { return CodeMirror__namespace.Pass }

    var brack = bracketed[cx.name];
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (brack && config.align !== false && (!config.dontAlign || config.dontAlign.indexOf(cx.name) < 0) && aligned(cx))
      { return CodeMirror__namespace.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (brack && blockish.indexOf(cx.name) > -1) {
      var parent = cx.parent;
      if (parent && parent.name == "Statement" && parent.parent &&
          parent.parent.name == "Statement" && hasSubStatement(parent.parent) && !hasSubStatement(parent))
        { parent = parent.parent; }
      var base$1 = statementIndent(parent, config);

      if (closed || cx.name == "NamespaceBlock") { return base$1 }
      if (/^(public|private|protected)\s*:/.test(textAfter)) { return base$1 + 1 }
      if (isSwitch(cx.parent) && !isLabel(textAfter)) { return base$1 + 2 * config.indentUnit }
      return base$1 + config.indentUnit
    }

    var base = baseIndent(cx, config.tabSize);
    if (brack) {
      if (closed && (config.dontCloseBrackets || "").indexOf(brack) < 0) { return base }
      return base + config.indentUnit * ((config.doubleIndentBrackets || "").indexOf(brack) < 0 ? 1 : 2)
    } else if (statementish.indexOf(cx.name) > -1) {
      if (hasSubStatement(cx)) { return base + config.indentUnit; }
      return base + 2 * config.indentUnit
    } else if (cx.name == "Alternative" || cx.name == "CatchFinally") {
      base = baseIndent(cx.parent, config.tabSize);
      if (!textAfter || /^((else|catch|finally)\b|\/[\/\*])/.test(textAfter)) { return base }
      return base + config.indentUnit
    } else if (cx.name == "ArrowRest") {
      return base + config.indentUnit
    } else if (cx.name == "NewExpression" && cx.startLine.length > cx.startPos + 5) {
      return CodeMirror__namespace.countColumn(cx.startLine, cx.startPos, config.tabSize) + 2 * config.indentUnit
    } else if (cx.name == "InitializerList") {
      return base + 2
    } else if (cx.name == "ThrowsClause" && !/throws\s*$/.test(cx.startLine.slice(cx.startPos))) {
      return base + 2 * config.indentUnit
    } else {
      return findIndent(cx.parent, textAfter, config)
    }
  }

  function statementIndent(cx, config) {
    for (;; cx = cx.parent) {
      if (!cx) { return 0 }
      if (statementish.indexOf(cx.name) > -1 || (cx.parent && bracketed[cx.parent.name]))
        { return CodeMirror__namespace.countColumn(cx.startLine, null, config.tabSize) }
    }
  }

  function indent(state, textAfter, line, config) {
    var top = state.context && state.context.name;
    if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "Template" || top == "str")
      { return statementIndent(state.context, config) }

    if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^[@*]/.test(textAfter))
      { return CodeMirror__namespace.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

    var passLine = config.forceContent && /^\s*(\/\/.*)?$/.test(line) ? "x" : line;
    return findIndent(state.contextAt(passLine, line.length - textAfter.length), textAfter, config)
  }

  var scopes = ["Block", "FunctionSpec", "LambdaBlock", "ClassSpec", "TypeAliasSpec", "ForStatement", "CatchFinally"];
  var typeScopes = ["FunctionDeclaration", "ClassSpec", "TypeAliasSpec"];

  var KotlinMode = /*@__PURE__*/(function (superclass) {
    function KotlinMode(conf, modeConf) {
      superclass.call(this, grammar);
      this.indentConf = {tabSize: conf.tabSize, indentUnit: conf.indentUnit, forceContent: true, dontAlign: ["LambdaBlock"]};
    }

    if ( superclass ) KotlinMode.__proto__ = superclass;
    KotlinMode.prototype = Object.create( superclass && superclass.prototype );
    KotlinMode.prototype.constructor = KotlinMode;

    KotlinMode.prototype.token = function token (stream, state) {
      return markTypeLocals(markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state), typeScopes, stream, state)
    };

    KotlinMode.prototype.indent = function indent$1 (state, textAfter, line) {
      return indent(state, textAfter, line, this.indentConf)
    };

    return KotlinMode;
  }(CodeMirror__namespace.GrammarMode));

  var meta = {
    electricInput: /^\s*[{}]$/,
    blockCommentStart: "/*",
    blockCommentEnd: "*/",
    blockCommentContinue: " * ",
    lineComment: "//",
    fold: "brace",
    closeBrackets: "()[]{}''\"\"``"
  };
  for (var prop in meta) { KotlinMode.prototype[prop] = meta[prop]; }

  CodeMirror__namespace.defineMode("google-kotlin", function (conf, modeConf) { return new KotlinMode(conf, modeConf); });

})));
