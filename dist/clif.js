(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
  typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
  (factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

  var e = [/^from(?![a-zA-Z0-9_])/, /^use(?![a-zA-Z0-9_])/, /^type(?![a-zA-Z0-9_])/, /^import(?![a-zA-Z0-9_])/, /^as(?![a-zA-Z0-9_])/, /^[a-zA-Z_][a-zA-Z0-9_]*/, /^interface(?![a-zA-Z0-9_])/, /^namespace(?![a-zA-Z0-9_])/, [7, "stillIndented"], /^lambda(?![a-zA-Z0-9_])/, /^enum(?![a-zA-Z0-9_])/, /^capsule(?![a-zA-Z0-9_])/, /^const(?![a-zA-Z0-9_])/, /^staticmethods(?![a-zA-Z0-9_])/, /^with(?![a-zA-Z0-9_])/, /^def(?![a-zA-Z0-9_])/, /^property(?![a-zA-Z0-9_])/, /^\`(?:(?!\`).)*\`/, /^class(?![a-zA-Z0-9_])/, /^default(?![a-zA-Z0-9_])/, /^return(?![a-zA-Z0-9_])/];
  var nodes = [
    [1, 6, 2],
    [/^[^]/, 0],
    [1, 6, 3],
    ["\n", 4,
     2, 8, 4, {"name":"Statement"},
     0, 1],
    [1, 6, 3],
    [3, "keyword", e[4], -1,
     3, "keyword", e[11], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[12], -1,
     3, "keyword", e[15], -1,
     3, "keyword", e[19], -1,
     3, "keyword", e[10], -1,
     3, "keyword", e[0], -1,
     3, "keyword", /^implements(?![a-zA-Z0-9_])/, -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[9], -1,
     3, "keyword", e[7], -1,
     2, 47, -1, {"name":"None","token":"atom"},
     3, "keyword", /^pass(?![a-zA-Z0-9_])/, -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[20], -1,
     3, "keyword", e[13], -1,
     3, "keyword", e[2], -1,
     3, "keyword", e[1], -1,
     3, "keyword", e[14], -1,
     2, 48, -1, {"name":"receiver","token":"atom"},
     3, "comment", /^\#.*/, -1,
     /^[^]/, -1],
    [/^[ \t]/, 6,
     3, "comment", /^\#.*/, 6,
     [0, /^(?=\n)/, [7, "maySkipNewline"]], 7,
     0, -1],
    ["\n", 6],
    [[6, 49], 9,
     1, 54, -1,
     [6, 68], 16,
     3, "keyword", e[0], 17,
     3, "keyword", e[1], 18,
     3, "keyword", e[2], 19],
    [3, "keyword", e[0], 10],
    [1, 6, 11],
    [2, 73, 12, {"name":"qstring","token":"string"}],
    [1, 6, 13],
    [":", 14],
    [1, 6, 15],
    [1, 82, -1],
    [3, "keyword", e[0], 20],
    [1, 6, 21],
    [1, 6, 22],
    [1, 6, 23],
    [1, 6, 24],
    [2, 73, 25, {"name":"qstring","token":"string"}],
    [2, 73, 26, {"name":"qstring","token":"string"}],
    [e[5], 27],
    [1, 92, 28],
    [1, 6, 29],
    [1, 6, 30],
    [1, 6, 31],
    [1, 6, 32],
    [3, "keyword", e[3], 33],
    [3, "keyword", e[4], 34],
    ["=", 35],
    [3, "keyword", e[3], 36],
    [1, 6, 37],
    [1, 6, 38],
    [1, 6, 39],
    [1, 6, 40],
    ["*", 41],
    [1, 92, 42],
    [1, 98, 42],
    [e[5], 42],
    [1, 6, 43],
    [1, 6, 44],
    [3, "keyword", e[4], 45,
     0, 42],
    ["\n", -1],
    [1, 6, 46],
    [e[5], 42],
    [3, "keyword", /^None(?![a-zA-Z0-9_])/, -1],
    [3, "keyword", /^(?:self|cls)(?![a-zA-Z0-9_])/, -1],
    [3, "keyword", e[0], 50],
    [1, 6, 51],
    [2, 73, 52, {"name":"qstring","token":"string"}],
    [1, 6, 53],
    [3, "keyword", e[3], -1],
    [3, "keyword", e[6], 55],
    [1, 6, 56],
    [e[5], 57],
    [1, 6, 58],
    ["<", 59],
    [1, 6, 60],
    [e[5], 61],
    [1, 6, 62],
    [",", 63,
     ">", 66],
    [1, 6, 64],
    [e[5], 65],
    [1, 6, 62],
    [1, 6, 67],
    [1, 117, -1],
    [3, "keyword", e[0], 69],
    [1, 6, 70],
    [2, 73, 71, {"name":"qstring","token":"string"}],
    [1, 6, 72],
    [":", -1,
     3, "keyword", e[3], -1],
    ["'''", 74,
     "\"\"\"", 76,
     "'", 78,
     "\"", 80],
    ["\\", 75,
     [0, /^(?!\'\'\')/, /^[^]/], 74,
     "'''", -1],
    [/^[^]/, 74],
    ["\\", 77,
     [0, /^(?!\"\"\")/, /^[^]/], 76,
     "\"\"\"", -1],
    [/^[^]/, 76],
    ["\\", 79,
     /^(?!\')./, 78,
     "'", -1],
    [/^[^]/, 78],
    ["\\", 81,
     /^(?!\")./, 80,
     "\"", -1],
    [/^[^]/, 80],
    ["\n", 83],
    [/^[ \t]/, 83,
     3, "comment", /^\#.*/, 83,
     "\n", 83,
     e[8], 84],
    [1, 123, 85,
     3, "keyword", e[7], 86],
    [/^[ \t]/, 85,
     3, "comment", /^\#.*/, 85,
     "\n", 85,
     0, 87],
    [1, 6, 88],
    [0, 89,
     0, -1],
    [2, 73, 90, {"name":"qstring","token":"string"}],
    [e[8], 84],
    [1, 6, 91],
    [1, 146, 85],
    [e[5], 93],
    [1, 6, 94],
    [".", 95,
     0, -1],
    [1, 6, 96],
    [e[5], 97],
    [1, 6, 94],
    [2, 73, 99, {"name":"qstring","token":"string"},
     0, 100,
     2, 73, 107, {"name":"qstring","token":"string"},
     0, 108],
    [1, 6, 101],
    [1, 6, 102],
    [3, "keyword", e[4], 100],
    [3, "keyword", e[9], 103,
     0, 103],
    [1, 6, 104],
    [1, 152, 105],
    [1, 6, 106],
    [1, 158, -1],
    [1, 6, 109],
    [1, 6, 110],
    [3, "keyword", e[4], 108],
    [1, 92, 111],
    [1, 6, 112],
    ["<", 113,
     0, -1],
    [1, 6, 114],
    [1, 165, 115],
    [1, 6, 116],
    [">", -1],
    ["\n", 118],
    [/^[ \t]/, 118,
     3, "comment", /^\#.*/, 118,
     "\n", 118,
     e[8], 119],
    [1, 171, 120,
     1, 189, 120],
    [/^[ \t]/, 120,
     3, "comment", /^\#.*/, 120,
     "\n", 120,
     0, 121],
    [0, 122,
     0, -1],
    [e[8], 119],
    [2, 208, -1, {"name":"Decorator","token":"meta"},
     1, 211, -1,
     1, 226, -1,
     3, "keyword", e[10], 124,
     3, "keyword", e[11], 132,
     3, "keyword", e[12], 134,
     1, 54, -1,
     3, "keyword", e[13], 140],
    [1, 6, 125],
    [1, 239, 126],
    [1, 6, 127],
    [3, "keyword", e[14], 128,
     0, -1],
    [1, 6, 129],
    [":", 130],
    [1, 6, 131],
    [1, 244, -1],
    [1, 6, 133],
    [1, 239, -1],
    [1, 6, 135],
    [1, 239, 136],
    [1, 6, 137],
    [":", 138],
    [1, 6, 139],
    [1, 98, -1],
    [1, 6, 141],
    [3, "keyword", e[0], 142],
    [1, 6, 143],
    [e[17], 144],
    [1, 6, 145],
    [1, 254, -1],
    ["\n", 147],
    [/^[ \t]/, 147,
     3, "comment", /^\#.*/, 147,
     "\n", 147,
     e[8], 148],
    [1, 123, 149],
    [/^[ \t]/, 149,
     3, "comment", /^\#.*/, 149,
     "\n", 149,
     0, 150],
    [0, 151,
     0, -1],
    [e[8], 148],
    [1, 260, 153,
     0, -1],
    [1, 6, 154],
    [",", 155,
     0, -1],
    [1, 6, 156],
    [1, 260, 157,
     0, 157],
    [1, 6, 154],
    ["->", 159],
    [1, 6, 160],
    [2, 47, -1, {"name":"None","token":"atom"},
     1, 98, -1,
     "(", 161],
    [1, 6, 162],
    [1, 152, 163],
    [1, 6, 164],
    [")", -1],
    [1, 98, 166,
     0, -1],
    [1, 6, 167],
    [",", 168,
     0, -1],
    [1, 6, 169],
    [1, 98, 170,
     0, 170],
    [1, 6, 167],
    [3, "keyword", e[15], 172],
    [1, 6, 173],
    [1, 239, 174],
    [1, 6, 175],
    ["(", 176],
    [1, 6, 177],
    [2, 48, 178, {"name":"receiver","token":"atom"}],
    [1, 6, 179],
    [",", 180,
     ")", 183],
    [1, 6, 181],
    [1, 260, 182],
    [1, 6, 179],
    [1, 6, 184],
    [1, 158, 185,
     0, -1],
    [1, 6, 186],
    [":", 187,
     0, -1],
    [1, 6, 188],
    [1, 269, -1],
    [1, 239, 190],
    [1, 6, 191],
    [":", 192],
    [1, 6, 193],
    [1, 98, 194],
    [1, 6, 195],
    ["=", 196,
     0, -1],
    [1, 6, 197],
    [3, "keyword", e[16], 198],
    [1, 6, 199],
    ["(", 200],
    [1, 6, 201],
    [e[17], 202],
    [1, 6, 203],
    [",", 204,
     0, 205],
    [1, 6, 206],
    [1, 6, 207],
    [e[17], 205],
    [")", -1],
    ["@", 209],
    [1, 6, 210],
    [1, 92, -1],
    [3, "keyword", e[15], 212],
    [1, 6, 213],
    [1, 239, 214],
    [1, 6, 215],
    ["(", 216],
    [1, 6, 217],
    [1, 152, 218],
    [1, 6, 219],
    [")", 220],
    [1, 6, 221],
    [1, 158, 222,
     0, -1],
    [1, 6, 223],
    [":", 224,
     0, -1],
    [1, 6, 225],
    [1, 269, -1],
    [3, "keyword", e[18], 227],
    [1, 6, 228],
    [1, 239, 229],
    [1, 6, 230],
    ["(", 231,
     0, 235],
    [1, 6, 232],
    [1, 279, 233],
    [1, 6, 234],
    [")", 235],
    [1, 6, 236],
    [":", 237],
    [1, 6, 238],
    [1, 293, -1],
    [2, 73, 240, {"name":"qstring","token":"string"},
     0, 242],
    [1, 6, 241],
    [3, "keyword", e[4], 242],
    [1, 6, 243],
    [e[5], -1],
    ["\n", 245],
    [/^[ \t]/, 245,
     3, "comment", /^\#.*/, 245,
     "\n", 245,
     e[8], 246],
    [2, 73, 247, {"name":"qstring","token":"string"}],
    [1, 6, 248],
    [3, "keyword", e[4], 249],
    [1, 6, 250],
    [1, 92, 251],
    [/^[ \t]/, 251,
     3, "comment", /^\#.*/, 251,
     "\n", 251,
     0, 252],
    [0, 253,
     0, -1],
    [e[8], 246],
    ["\n", 255],
    [/^[ \t]/, 255,
     3, "comment", /^\#.*/, 255,
     "\n", 255,
     e[8], 256],
    [1, 211, 257],
    [/^[ \t]/, 257,
     3, "comment", /^\#.*/, 257,
     "\n", 257,
     0, 258],
    [0, 259,
     0, -1],
    [e[8], 256],
    [e[5], 261],
    [1, 6, 262],
    [":", 263],
    [1, 6, 264],
    [1, 98, 265],
    [1, 6, 266],
    ["=", 267,
     0, -1],
    [1, 6, 268],
    [3, "keyword", e[19], -1],
    ["\n", 270],
    [/^[ \t]/, 270,
     3, "comment", /^\#.*/, 270,
     "\n", 270,
     e[8], 271],
    [2, 73, 272, {"name":"qstring","token":"string"},
     3, "keyword", e[20], 273],
    [/^[ \t]/, 272,
     3, "comment", /^\#.*/, 272,
     "\n", 272,
     0, 274],
    [1, 6, 275],
    [0, 276,
     0, -1],
    [e[5], 277],
    [e[8], 271],
    [1, 6, 278],
    ["(...)", 272],
    [2, 73, 280, {"name":"qstring","token":"string"},
     0, 281,
     0, -1],
    [1, 6, 282],
    [1, 6, 283],
    [3, "keyword", e[4], 281],
    [1, 92, 284],
    [1, 6, 285],
    [",", 286,
     0, -1],
    [1, 6, 287],
    [2, 73, 288, {"name":"qstring","token":"string"},
     0, 289,
     0, 290],
    [1, 6, 291],
    [1, 6, 292],
    [1, 6, 285],
    [3, "keyword", e[4], 289],
    [1, 92, 290],
    ["\n", 294],
    [/^[ \t]/, 294,
     3, "comment", /^\#.*/, 294,
     "\n", 294,
     e[8], 295],
    [1, 239, 296],
    [/^[ \t]/, 296,
     3, "comment", /^\#.*/, 296,
     "\n", 296,
     0, 297],
    [0, 298,
     0, -1],
    [e[8], 295]
  ];
  var start = 0;
  var token = 5;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  function getScope(context, scopes) {
    for (var cx = context; cx; cx = cx.parent)
      { if (scopes.indexOf(cx.name) > -1) { return cx } }
  }
  function isLocal(context, name) {
    for (var cx = context; cx; cx = cx.parent)
      { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
    return false
  }

  var varRE = /(^|\s)variable($|\s)/;

  function markLocals(type, scopes, stream, state) {
    if (type == "def") {
      var scope = getScope(state.context, scopes), name = stream.current();
      if (scope) {
        if (!scope.locals) { scope.locals = []; }
        if (scope.locals.indexOf(name) == -1) { scope.locals.push(name); }
        if (state.context.name != "funcName") { return "def local" }
      }
    } else if (varRE.test(type) && !/qualified/.test(type) &&
               isLocal(state.context, stream.current())) {
      type = type.replace(varRE, "$1variable-2$2");
    }
    return type
  }

  var allowNewline = [
    "ParamList" ];

  function maySkipNewline(_line, _pos, cx) {
    return cx && allowNewline.indexOf(cx.name) > -1
  }

  function countIndent(line, pos) {
    var count = 0;
    for (var i = pos - 1; i >= 0; i--) {
      var ch = line.charCodeAt(i);
      if (ch === 32) { count++; }
      else if (ch === 9) { count += 4; }
      else { break }
    }
    return count
  }

  function stillIndented(line, pos, cx) {
    while (cx && cx.name != "Statement") { cx = cx.parent; }
    return cx && countIndent(line, pos) > countIndent(cx.startLine, cx.startPos)
  }

  var ClifMode = /*@__PURE__*/(function (superclass) {
    function ClifMode(conf) {
      superclass.call(this, grammar, {
        predicates: {maySkipNewline: maySkipNewline, stillIndented: stillIndented},
      });
      this.conf = conf;
    }

    if ( superclass ) ClifMode.__proto__ = superclass;
    ClifMode.prototype = Object.create( superclass && superclass.prototype );
    ClifMode.prototype.constructor = ClifMode;

    ClifMode.prototype.token = function token$$1 (stream, state) {
      return markLocals(superclass.prototype.token.call(this, stream, state), stream, state)
    };

    ClifMode.prototype.indent = function indent (state, textAfter, line) {
      // TODO(slebedev): Not currently supported.
      return CodeMirror.Pass
    };

    return ClifMode;
  }(CodeMirror.GrammarMode));

  ClifMode.prototype.electricInput = /^\s*\(\)<>$/;
  ClifMode.prototype.closeBrackets = {triples: "'\"", pairs: "()<>''\"\"``",};
  ClifMode.prototype.lineComment = "#";

  CodeMirror.defineMode("google-clif", function (conf) { return new ClifMode(conf); });

})));
