(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror-grammar-mode'), require('codemirror')) :
  typeof define === 'function' && define.amd ? define(['codemirror-grammar-mode', 'codemirror'], factory) :
  (factory(null,global.CodeMirror));
}(this, (function (codemirrorGrammarMode,CodeMirror) { 'use strict';

  var e = [[1, " ", "\t", "\n"], /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*/, /^include(?![a-zA-Z¡-￿_0-9_])/, /^namespace(?![a-zA-Z¡-￿_0-9_])/, /^attribute(?![a-zA-Z¡-￿_0-9_])/, /^root_type(?![a-zA-Z¡-￿_0-9_])/, /^file_extension(?![a-zA-Z¡-￿_0-9_])/, /^file_identifier(?![a-zA-Z¡-￿_0-9_])/, /^(?:\-?0x[0-9a-fA-F]+|\-?[0-9]+)/, /^(?:true|false)/, /^\"[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*\"/, /^(?:bool|byte|ubyte|short|ushort|int|uint|float|long|ulong|double|int8|uint8|int16|uint16|int32|uint32|int64|uint64|float32|float64|string)(?![a-zA-Z¡-￿_0-9_])/, /^\/\/.*/, [0, /^(?!\*\/)/, /^[^]/], /^table(?![a-zA-Z¡-￿_0-9_])/, /^\-?[0-9]+\.[0-9]+(?:[eE][\+\-]?[0-9]+)?/, /^struct(?![a-zA-Z¡-￿_0-9_])/, /^enum(?![a-zA-Z¡-￿_0-9_])/, /^union(?![a-zA-Z¡-￿_0-9_])/, /^rpc_service(?![a-zA-Z¡-￿_0-9_])/];
  var nodes = [
    [3, "keyword", e[2], 2,
     0, 3],
    [/^[^]/, 0],
    [e[0], 2,
     2, 25, 2, {"name":"comment","token":"comment"},
     2, 28, 4, {"name":"string_constant","token":"string"}],
    [3, "keyword", e[3], 5,
     2, 31, 6, {"name":"table_decl"},
     2, 45, 6, {"name":"struct_decl"},
     2, 57, 6, {"name":"enum_decl"},
     2, 72, 6, {"name":"union_decl"},
     3, "keyword", e[5], 7,
     3, "keyword", e[6], 8,
     3, "keyword", e[7], 9,
     3, "keyword", e[4], 10,
     2, 81, 6, {"name":"rpc_decl"},
     2, 95, 6, {"name":"object"},
     2, 25, 6, {"name":"comment","token":"comment"},
     0, 1],
    [e[0], 4,
     2, 25, 4, {"name":"comment","token":"comment"},
     ";", 11],
    [e[0], 5,
     2, 25, 5, {"name":"comment","token":"comment"},
     e[1], 12],
    [e[0], 6,
     2, 25, 6, {"name":"comment","token":"comment"},
     0, 3],
    [e[0], 7,
     2, 25, 7, {"name":"comment","token":"comment"},
     1, 105, 13],
    [e[0], 8,
     2, 25, 8, {"name":"comment","token":"comment"},
     2, 28, 14, {"name":"string_constant","token":"string"}],
    [e[0], 9,
     2, 25, 9, {"name":"comment","token":"comment"},
     2, 28, 15, {"name":"string_constant","token":"string"}],
    [e[0], 10,
     2, 25, 10, {"name":"comment","token":"comment"},
     3, "attribute", e[1], 16,
     3, "attribute", e[10], 16],
    [e[0], 11,
     2, 25, 11, {"name":"comment","token":"comment"},
     0, 0],
    [e[0], 12,
     2, 25, 12, {"name":"comment","token":"comment"},
     0, 17],
    [e[0], 13,
     2, 25, 13, {"name":"comment","token":"comment"},
     ";", 6],
    [e[0], 14,
     2, 25, 14, {"name":"comment","token":"comment"},
     ";", 6],
    [e[0], 15,
     2, 25, 15, {"name":"comment","token":"comment"},
     ";", 6],
    [e[0], 16,
     2, 25, 16, {"name":"comment","token":"comment"},
     ";", 6],
    [".", 18,
     ";", 6],
    [e[0], 18,
     2, 25, 18, {"name":"comment","token":"comment"},
     e[1], 19],
    [e[0], 19,
     2, 25, 19, {"name":"comment","token":"comment"},
     0, 17],
    [3, "keyword", e[2], -1,
     3, "keyword", e[3], -1,
     3, "keyword", e[4], -1,
     3, "keyword", e[14], -1,
     3, "keyword", e[16], -1,
     3, "keyword", e[17], -1,
     3, "keyword", e[18], -1,
     3, "keyword", e[5], -1,
     3, "keyword", e[19], -1,
     3, "keyword", e[6], -1,
     3, "keyword", e[7], -1,
     2, 25, -1, {"name":"comment","token":"comment"},
     e[12], 21,
     "/*", 22,
     3, "number", e[8], -1,
     3, "builtin", e[9], -1,
     3, "number", e[8], -1,
     /^\-?0x[0-9a-fA-F]+/, -1,
     /^\-?[0-9]+/, -1,
     3, "builtin", e[9], -1,
     3, "number", e[15], -1,
     2, 28, -1, {"name":"string_constant","token":"string"},
     e[1], -1,
     3, "def", e[1], -1,
     3, "def property", e[1], -1,
     3, "property", e[1], -1,
     3, "property", e[1], -1,
     3, "attribute", e[1], -1,
     3, "attribute", e[10], -1,
     3, "builtin", e[11], -1,
     3, "type", e[1], -1,
     /^\[ */, 23,
     1, 105, -1,
     /^[^]/, -1],
    ["\n", -1],
    [e[13], 22,
     "*/", -1],
    [3, "builtin", e[11], 24,
     3, "type", e[1], 24],
    [/^ *\]/, -1],
    [e[12], 26,
     "/*", 27],
    ["\n", -1],
    [e[13], 27,
     "*/", -1],
    ["\"", 29],
    ["\\", 30,
     /^(?!\")./, 29,
     "\"", -1],
    [/^[^]/, 29],
    [3, "keyword", e[14], 32],
    [e[0], 32,
     2, 25, 32, {"name":"comment","token":"comment"},
     3, "type", e[1], 33],
    [e[0], 33,
     2, 25, 33, {"name":"comment","token":"comment"},
     1, 108, 34],
    [e[0], 34,
     2, 25, 34, {"name":"comment","token":"comment"},
     "{", 35],
    [e[0], 35,
     2, 25, 35, {"name":"comment","token":"comment"},
     0, 36],
    [3, "property", e[1], 37],
    [e[0], 37,
     2, 25, 37, {"name":"comment","token":"comment"},
     ":", 38],
    [e[0], 38,
     2, 25, 38, {"name":"comment","token":"comment"},
     1, 105, 39],
    [e[0], 39,
     2, 25, 39, {"name":"comment","token":"comment"},
     "=", 40,
     0, 41],
    [e[0], 40,
     2, 25, 40, {"name":"comment","token":"comment"},
     3, "number", e[15], 41,
     3, "number", e[8], 41,
     3, "builtin", e[9], 41,
     3, "property", e[1], 41],
    [e[0], 41,
     2, 25, 41, {"name":"comment","token":"comment"},
     1, 108, 42],
    [e[0], 42,
     2, 25, 42, {"name":"comment","token":"comment"},
     ";", 43],
    [e[0], 43,
     2, 25, 43, {"name":"comment","token":"comment"},
     0, 44],
    [0, 36,
     "}", -1],
    [3, "keyword", e[16], 46],
    [e[0], 46,
     2, 25, 46, {"name":"comment","token":"comment"},
     3, "type", e[1], 47],
    [e[0], 47,
     2, 25, 47, {"name":"comment","token":"comment"},
     1, 108, 48],
    [e[0], 48,
     2, 25, 48, {"name":"comment","token":"comment"},
     "{", 49],
    [e[0], 49,
     2, 25, 49, {"name":"comment","token":"comment"},
     0, 50],
    [3, "property", e[1], 51],
    [e[0], 51,
     2, 25, 51, {"name":"comment","token":"comment"},
     ":", 52],
    [e[0], 52,
     2, 25, 52, {"name":"comment","token":"comment"},
     1, 105, 53],
    [e[0], 53,
     2, 25, 53, {"name":"comment","token":"comment"},
     1, 108, 54],
    [e[0], 54,
     2, 25, 54, {"name":"comment","token":"comment"},
     ";", 55],
    [e[0], 55,
     2, 25, 55, {"name":"comment","token":"comment"},
     0, 56],
    [0, 50,
     "}", -1],
    [3, "keyword", e[17], 58],
    [e[0], 58,
     2, 25, 58, {"name":"comment","token":"comment"},
     3, "type", e[1], 59],
    [e[0], 59,
     2, 25, 59, {"name":"comment","token":"comment"},
     ":", 60,
     0, 61],
    [e[0], 60,
     2, 25, 60, {"name":"comment","token":"comment"},
     1, 105, 61],
    [e[0], 61,
     2, 25, 61, {"name":"comment","token":"comment"},
     1, 108, 62],
    [e[0], 62,
     2, 25, 62, {"name":"comment","token":"comment"},
     "{", 63],
    [e[0], 63,
     2, 25, 63, {"name":"comment","token":"comment"},
     3, "def property", e[1], 64],
    [e[0], 64,
     2, 25, 64, {"name":"comment","token":"comment"},
     "=", 65,
     0, 66],
    [e[0], 65,
     2, 25, 65, {"name":"comment","token":"comment"},
     3, "number", e[8], 66,
     3, "builtin", e[9], 66],
    [e[0], 66,
     2, 25, 66, {"name":"comment","token":"comment"},
     0, 67],
    [",", 68,
     "}", -1],
    [e[0], 68,
     2, 25, 68, {"name":"comment","token":"comment"},
     3, "def property", e[1], 69],
    [e[0], 69,
     2, 25, 69, {"name":"comment","token":"comment"},
     "=", 70,
     0, 71],
    [e[0], 70,
     2, 25, 70, {"name":"comment","token":"comment"},
     3, "number", e[8], 71,
     3, "builtin", e[9], 71],
    [e[0], 71,
     2, 25, 71, {"name":"comment","token":"comment"},
     0, 67],
    [3, "keyword", e[18], 73],
    [e[0], 73,
     2, 25, 73, {"name":"comment","token":"comment"},
     3, "type", e[1], 74],
    [e[0], 74,
     2, 25, 74, {"name":"comment","token":"comment"},
     1, 108, 75],
    [e[0], 75,
     2, 25, 75, {"name":"comment","token":"comment"},
     "{", 76],
    [e[0], 76,
     2, 25, 76, {"name":"comment","token":"comment"},
     3, "type", e[1], 77],
    [e[0], 77,
     2, 25, 77, {"name":"comment","token":"comment"},
     0, 78],
    [",", 79,
     "}", -1],
    [e[0], 79,
     2, 25, 79, {"name":"comment","token":"comment"},
     3, "type", e[1], 80],
    [e[0], 80,
     2, 25, 80, {"name":"comment","token":"comment"},
     0, 78],
    [3, "keyword", e[19], 82],
    [e[0], 82,
     2, 25, 82, {"name":"comment","token":"comment"},
     3, "def", e[1], 83],
    [e[0], 83,
     2, 25, 83, {"name":"comment","token":"comment"},
     "{", 84],
    [e[0], 84,
     2, 25, 84, {"name":"comment","token":"comment"},
     0, 85],
    [3, "def", e[1], 86],
    [e[0], 86,
     2, 25, 86, {"name":"comment","token":"comment"},
     "(", 87],
    [e[0], 87,
     2, 25, 87, {"name":"comment","token":"comment"},
     3, "type", e[1], 88],
    [e[0], 88,
     2, 25, 88, {"name":"comment","token":"comment"},
     ")", 89],
    [e[0], 89,
     2, 25, 89, {"name":"comment","token":"comment"},
     ":", 90],
    [e[0], 90,
     2, 25, 90, {"name":"comment","token":"comment"},
     3, "type", e[1], 91],
    [e[0], 91,
     2, 25, 91, {"name":"comment","token":"comment"},
     1, 108, 92],
    [e[0], 92,
     2, 25, 92, {"name":"comment","token":"comment"},
     ";", 93],
    [e[0], 93,
     2, 25, 93, {"name":"comment","token":"comment"},
     0, 94],
    [0, 85,
     "}", -1],
    ["{", 96],
    [e[0], 96,
     2, 25, 96, {"name":"comment","token":"comment"},
     3, "property", e[1], 97],
    [e[0], 97,
     2, 25, 97, {"name":"comment","token":"comment"},
     ":", 98],
    [e[0], 98,
     2, 25, 98, {"name":"comment","token":"comment"},
     1, 118, 99],
    [e[0], 99,
     2, 25, 99, {"name":"comment","token":"comment"},
     0, 100],
    [",", 101,
     "}", -1],
    [e[0], 101,
     2, 25, 101, {"name":"comment","token":"comment"},
     3, "property", e[1], 102],
    [e[0], 102,
     2, 25, 102, {"name":"comment","token":"comment"},
     ":", 103],
    [e[0], 103,
     2, 25, 103, {"name":"comment","token":"comment"},
     1, 118, 104],
    [e[0], 104,
     2, 25, 104, {"name":"comment","token":"comment"},
     0, 100],
    [/^\[ */, 106,
     3, "builtin", e[11], -1,
     3, "type", e[1], -1],
    [3, "builtin", e[11], 107,
     3, "type", e[1], 107],
    [/^ *\]/, -1],
    ["(", 109,
     0, -1],
    [e[0], 109,
     2, 25, 109, {"name":"comment","token":"comment"},
     3, "attribute", e[1], 110],
    [e[0], 110,
     2, 25, 110, {"name":"comment","token":"comment"},
     ":", 111,
     0, 112],
    [e[0], 111,
     2, 25, 111, {"name":"comment","token":"comment"},
     3, "number", e[15], 112,
     3, "number", e[8], 112,
     3, "builtin", e[9], 112,
     3, "property", e[1], 112,
     2, 28, 112, {"name":"string_constant","token":"string"}],
    [e[0], 112,
     2, 25, 112, {"name":"comment","token":"comment"},
     0, 113],
    [",", 114,
     ")", -1],
    [e[0], 114,
     2, 25, 114, {"name":"comment","token":"comment"},
     3, "attribute", e[1], 115],
    [e[0], 115,
     2, 25, 115, {"name":"comment","token":"comment"},
     ":", 116,
     0, 117],
    [e[0], 116,
     2, 25, 116, {"name":"comment","token":"comment"},
     3, "number", e[15], 117,
     3, "number", e[8], 117,
     3, "builtin", e[9], 117,
     3, "property", e[1], 117,
     2, 28, 117, {"name":"string_constant","token":"string"}],
    [e[0], 117,
     2, 25, 117, {"name":"comment","token":"comment"},
     0, 113],
    [3, "number", e[15], -1,
     3, "number", e[8], -1,
     3, "builtin", e[9], -1,
     3, "property", e[1], -1,
     2, 28, -1, {"name":"string_constant","token":"string"},
     2, 95, -1, {"name":"object"},
     2, 119, -1, {"name":"list_literal"}],
    ["[", 120],
    [e[0], 120,
     2, 25, 120, {"name":"comment","token":"comment"},
     1, 118, 121],
    [e[0], 121,
     2, 25, 121, {"name":"comment","token":"comment"},
     0, 122],
    [",", 123,
     "]", -1],
    [e[0], 123,
     2, 25, 123, {"name":"comment","token":"comment"},
     1, 118, 124],
    [e[0], 124,
     2, 25, 124, {"name":"comment","token":"comment"},
     0, 122]
  ];
  var start = 0;
  var token = 20;

  var grammar = /*#__PURE__*/Object.freeze({
    nodes: nodes,
    start: start,
    token: token
  });

  var FlatBuffersMode = /*@__PURE__*/(function (superclass) {
    function FlatBuffersMode(conf, modeConf) {
      superclass.call(this, grammar);
      this.conf = conf;

      this.electricChars = '[{}]';
      this.blockCommentStart = '/*';
      this.blockCommentEnd = ' */';
      this.blockCommentLead = ' * ';
      this.lineComment = '//';
      this.fold = ['brace'];
    }

    if ( superclass ) FlatBuffersMode.__proto__ = superclass;
    FlatBuffersMode.prototype = Object.create( superclass && superclass.prototype );
    FlatBuffersMode.prototype.constructor = FlatBuffersMode;

    /**
     * Simple indent function: Indent 1 level for each open context (i.e. open
     * curly or square bracket)
     *
     * @param state the state object at the current cursor position, as defined by
     *     grammar-mode.js
     * @param {string} textAfter the portion of the current line that is past the
     *     cursor position
     * @param {string} line the (complete) line the cursor is on
     */
    FlatBuffersMode.prototype.indent = function indent (state, textAfter, line) {
      var context = state.contextAt(line, line.length);

      var indentLevel = 0;
      while (context) {
        // Ignore brackets that were opened on this line
        if (context.startLine !== line && context.startLine !== '') {
          indentLevel = indentLevel + 1;
        }
        context = context.parent;
      }
      return indentLevel * this.conf.indentUnit;
    };

    return FlatBuffersMode;
  }(CodeMirror.GrammarMode));

  CodeMirror.defineMode(
      'flatbuffers', function (conf, modeConf) { return new FlatBuffersMode(conf, modeConf); });
  CodeMirror.defineMIME('text/x-fbs', {name: 'flatbuffers'});

  var keywords = ["include", "namespace", "attribute", "table", "struct", "enum",
                  "union", "root_type", "rpc_service", "file_extension",
                  "file_identifier"];
  var builtins = ["bool", "byte", "ubyte", "short", "ushort", "int", "uint",
                  "float", "long", "ulong", "double", "int8", "uint8", "int16",
                  "uint16", "int32", "uint32", "int64", "uint64", "float32",
                  "float64", "string", "true", "false"];
  CodeMirror.registerHelper('hintWords', 'flatbuffers',
                            keywords.concat(builtins));

})));
